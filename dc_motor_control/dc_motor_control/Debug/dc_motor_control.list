
dc_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe8  08005fe8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ff0  08005ff0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000005c  08006054  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08006054  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d64c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9d  00000000  00000000  0002d71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d12  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7e9  00000000  00000000  0003284a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7d6  00000000  00000000  00041033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a9c  00000000  00000000  000ce80c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d22a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e78 	.word	0x08005e78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005e78 	.word	0x08005e78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if (interrupt_timer_state == RUNNING_INTERRUPT_TIMER_STATUS)
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d125      	bne.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
    if (otherwise_state == START_OTHERWISE_STATUS)
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d112      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      classify_state = classify_state == LEFT_CLASSIFY_STATE ? RIGHT_CLASSIFY_STATE : LEFT_CLASSIFY_STATE;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d101      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x24>
 800059c:	2201      	movs	r2, #1
 800059e:	e000      	b.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80005a0:	2202      	movs	r2, #2
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005a4:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = START_INTERRUPT_TIMER_STATUS;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
      otherwise_state = STOP_OTHERWISE_STATUS;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim3);
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005b4:	f002 fd66 	bl	8003084 <HAL_TIM_Base_Stop_IT>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80005b8:	e00e      	b.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
      run_classify = STOP_CLASSIFY_STATE;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
      classify_state = ORIGINAL_CLASSIFY_STATE;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = STOP_INTERRUPT_TIMER_STATUS;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
      otherwise_state = START_OTHERWISE_STATUS;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim3);
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005d4:	f002 fd56 	bl	8003084 <HAL_TIM_Base_Stop_IT>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200003b4 	.word	0x200003b4
 80005e4:	200003b5 	.word	0x200003b5
 80005e8:	200003b3 	.word	0x200003b3
 80005ec:	20000108 	.word	0x20000108
 80005f0:	200003b6 	.word	0x200003b6

080005f4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a70      	ldr	r2, [pc, #448]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d176      	bne.n	80006f8 <HAL_UARTEx_RxEventCallback+0x104>
  {
    state_change = UART_VARIABLE_RX_STATUS_OK;
 800060a:	4b70      	ldr	r3, [pc, #448]	; (80007cc <HAL_UARTEx_RxEventCallback+0x1d8>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]
    switch (rxbuf[0])
 8000610:	4b6f      	ldr	r3, [pc, #444]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b4c      	subs	r3, #76	; 0x4c
 8000616:	2b07      	cmp	r3, #7
 8000618:	d852      	bhi.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <HAL_UARTEx_RxEventCallback+0x2c>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000651 	.word	0x08000651
 8000624:	080006c1 	.word	0x080006c1
 8000628:	080006c1 	.word	0x080006c1
 800062c:	080006c1 	.word	0x080006c1
 8000630:	08000649 	.word	0x08000649
 8000634:	080006c1 	.word	0x080006c1
 8000638:	08000689 	.word	0x08000689
 800063c:	08000641 	.word	0x08000641
    {
    case 'S':
    {
      state = START_MOTOR_STATE;
 8000640:	4b64      	ldr	r3, [pc, #400]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
      break;
 8000646:	e03b      	b.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'P':
    {
      state = STOP_MOTOR_STATE;
 8000648:	4b62      	ldr	r3, [pc, #392]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
      break;
 800064e:	e037      	b.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'L':
    {
      state = MOTOR_LEFT_STATE;
 8000650:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 8000656:	2301      	movs	r3, #1
 8000658:	61fb      	str	r3, [r7, #28]
 800065a:	e00a      	b.n	8000672 <HAL_UARTEx_RxEventCallback+0x7e>
      {
        data_pwm[b - 1] = rxbuf[b];
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3b01      	subs	r3, #1
 8000660:	495b      	ldr	r1, [pc, #364]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000662:	69fa      	ldr	r2, [r7, #28]
 8000664:	440a      	add	r2, r1
 8000666:	7811      	ldrb	r1, [r2, #0]
 8000668:	4a5b      	ldr	r2, [pc, #364]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800066a:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	3301      	adds	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	2b02      	cmp	r3, #2
 8000676:	ddf1      	ble.n	800065c <HAL_UARTEx_RxEventCallback+0x68>
      }
      pwm_t = atoi(data_pwm);
 8000678:	4857      	ldr	r0, [pc, #348]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800067a:	f004 fec9 	bl	8005410 <atoi>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b56      	ldr	r3, [pc, #344]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000684:	801a      	strh	r2, [r3, #0]
      break;
 8000686:	e01b      	b.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'R':
    {
      state = MOTOR_RIGHT_STATE;
 8000688:	4b52      	ldr	r3, [pc, #328]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800068a:	2203      	movs	r2, #3
 800068c:	701a      	strb	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	e00a      	b.n	80006aa <HAL_UARTEx_RxEventCallback+0xb6>
      {
        data_pwm[b - 1] = rxbuf[b];
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	3b01      	subs	r3, #1
 8000698:	494d      	ldr	r1, [pc, #308]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	440a      	add	r2, r1
 800069e:	7811      	ldrb	r1, [r2, #0]
 80006a0:	4a4d      	ldr	r2, [pc, #308]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006a2:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	ddf1      	ble.n	8000694 <HAL_UARTEx_RxEventCallback+0xa0>
      }
      pwm_t = atoi(data_pwm);
 80006b0:	4849      	ldr	r0, [pc, #292]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006b2:	f004 fead 	bl	8005410 <atoi>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b48      	ldr	r3, [pc, #288]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1e8>)
 80006bc:	801a      	strh	r2, [r3, #0]
      break;
 80006be:	bf00      	nop
    }
    }
    /* Clear the rxbuf */
    for (uint8_t i = 0U; i < Size; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	e006      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0xe0>
    {
      rxbuf[i] = '\0';
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4a41      	ldr	r2, [pc, #260]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	3301      	adds	r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	887a      	ldrh	r2, [r7, #2]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d8f3      	bhi.n	80006c6 <HAL_UARTEx_RxEventCallback+0xd2>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) rxbuf, RXBUF_SIZE);
 80006de:	2208      	movs	r2, #8
 80006e0:	493b      	ldr	r1, [pc, #236]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006e2:	483f      	ldr	r0, [pc, #252]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80006e4:	f003 fd3f 	bl	8004166 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0208 	bic.w	r2, r2, #8
 80006f6:	601a      	str	r2, [r3, #0]
  }

  if (huart->Instance == USART2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d15e      	bne.n	80007c0 <HAL_UARTEx_RxEventCallback+0x1cc>
  {
    for (int b = 0; b < Size; b++)
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	e00b      	b.n	8000720 <HAL_UARTEx_RxEventCallback+0x12c>
    {
      data_pwm[b] = rxbuf_2[b];
 8000708:	4a38      	ldr	r2, [pc, #224]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1f8>)
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	7819      	ldrb	r1, [r3, #0]
 8000710:	4a31      	ldr	r2, [pc, #196]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4413      	add	r3, r2
 8000716:	460a      	mov	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]
    for (int b = 0; b < Size; b++)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbef      	blt.n	8000708 <HAL_UARTEx_RxEventCallback+0x114>
    }

    if (data_pwm[0] != 'L' && data_pwm[0] != 'R')
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b4c      	cmp	r3, #76	; 0x4c
 800072e:	d010      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x15e>
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b52      	cmp	r3, #82	; 0x52
 8000736:	d00c      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x15e>
    {
      state = MOTOR_LEFT_STATE;
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800073a:	2202      	movs	r2, #2
 800073c:	701a      	strb	r2, [r3, #0]
      state_change = UART_VARIABLE_RX_STATUS_OK;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]
      pwm_t = atoi(data_pwm);
 8000744:	4824      	ldr	r0, [pc, #144]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000746:	f004 fe63 	bl	8005410 <atoi>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000750:	801a      	strh	r2, [r3, #0]
    }

    if (data_pwm[0] == 'L' || data_pwm[0] == 'R')
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b4c      	cmp	r3, #76	; 0x4c
 8000758:	d003      	beq.n	8000762 <HAL_UARTEx_RxEventCallback+0x16e>
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b52      	cmp	r3, #82	; 0x52
 8000760:	d10e      	bne.n	8000780 <HAL_UARTEx_RxEventCallback+0x18c>
    {
      run_classify = START_CLASSIFY_STATE;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8000764:	2201      	movs	r2, #1
 8000766:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = START_INTERRUPT_TIMER_STATUS;
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x200>)
 800076a:	2202      	movs	r2, #2
 800076c:	701a      	strb	r2, [r3, #0]
      classify_state = data_pwm[0] == 'L' ? LEFT_CLASSIFY_STATE : RIGHT_CLASSIFY_STATE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b4c      	cmp	r3, #76	; 0x4c
 8000774:	d101      	bne.n	800077a <HAL_UARTEx_RxEventCallback+0x186>
 8000776:	2202      	movs	r2, #2
 8000778:	e000      	b.n	800077c <HAL_UARTEx_RxEventCallback+0x188>
 800077a:	2201      	movs	r2, #1
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x204>)
 800077e:	701a      	strb	r2, [r3, #0]
    }

    for (uint8_t i = 0U; i < Size; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e00a      	b.n	800079c <HAL_UARTEx_RxEventCallback+0x1a8>
    {
      data_pwm[i] = '\0';
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800078a:	2100      	movs	r1, #0
 800078c:	54d1      	strb	r1, [r2, r3]
      rxbuf_2[i] = '\0';
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000792:	2100      	movs	r1, #0
 8000794:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3301      	adds	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8ef      	bhi.n	8000786 <HAL_UARTEx_RxEventCallback+0x192>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxbuf_2, RXBUF_SIZE);
 80007a6:	2208      	movs	r2, #8
 80007a8:	4910      	ldr	r1, [pc, #64]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1f8>)
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <HAL_UARTEx_RxEventCallback+0x208>)
 80007ac:	f003 fcdb 	bl	8004166 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UARTEx_RxEventCallback+0x20c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_UARTEx_RxEventCallback+0x20c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 0208 	bic.w	r2, r2, #8
 80007be:	601a      	str	r2, [r3, #0]
  }
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40011000 	.word	0x40011000
 80007cc:	200003b8 	.word	0x200003b8
 80007d0:	200003a0 	.word	0x200003a0
 80007d4:	200003b2 	.word	0x200003b2
 80007d8:	200003bc 	.word	0x200003bc
 80007dc:	200003b0 	.word	0x200003b0
 80007e0:	20000198 	.word	0x20000198
 80007e4:	20000220 	.word	0x20000220
 80007e8:	40004400 	.word	0x40004400
 80007ec:	200003a8 	.word	0x200003a8
 80007f0:	200003b6 	.word	0x200003b6
 80007f4:	200003b4 	.word	0x200003b4
 80007f8:	200003b3 	.word	0x200003b3
 80007fc:	200001dc 	.word	0x200001dc
 8000800:	200002e0 	.word	0x200002e0

08000804 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f001 f80e 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f8a4 	bl	8000958 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 fbb8 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 8000814:	f000 fb70 	bl	8000ef8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000818:	f000 f8fe 	bl	8000a18 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800081c:	f000 fb18 	bl	8000e50 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000820:	f000 f9a6 	bl	8000b70 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000824:	f000 fb3e 	bl	8000ea4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000828:	f000 fa2c 	bl	8000c84 <MX_TIM3_Init>
  MX_TIM4_Init();
 800082c:	f000 fa7a 	bl	8000d24 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxbuf, RXBUF_SIZE);
 8000830:	2208      	movs	r2, #8
 8000832:	4939      	ldr	r1, [pc, #228]	; (8000918 <main+0x114>)
 8000834:	4839      	ldr	r0, [pc, #228]	; (800091c <main+0x118>)
 8000836:	f003 fc96 	bl	8004166 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800083a:	4b39      	ldr	r3, [pc, #228]	; (8000920 <main+0x11c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b37      	ldr	r3, [pc, #220]	; (8000920 <main+0x11c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0208 	bic.w	r2, r2, #8
 8000848:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuf_2, RXBUF_SIZE);
 800084a:	2208      	movs	r2, #8
 800084c:	4935      	ldr	r1, [pc, #212]	; (8000924 <main+0x120>)
 800084e:	4836      	ldr	r0, [pc, #216]	; (8000928 <main+0x124>)
 8000850:	f003 fc89 	bl	8004166 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000854:	4b35      	ldr	r3, [pc, #212]	; (800092c <main+0x128>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <main+0x128>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 0208 	bic.w	r2, r2, #8
 8000862:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000864:	2100      	movs	r1, #0
 8000866:	4832      	ldr	r0, [pc, #200]	; (8000930 <main+0x12c>)
 8000868:	f002 fc94 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800086c:	210c      	movs	r1, #12
 800086e:	4830      	ldr	r0, [pc, #192]	; (8000930 <main+0x12c>)
 8000870:	f002 fc90 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000874:	2104      	movs	r1, #4
 8000876:	482f      	ldr	r0, [pc, #188]	; (8000934 <main+0x130>)
 8000878:	f002 fc8c 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800087c:	2100      	movs	r1, #0
 800087e:	482d      	ldr	r0, [pc, #180]	; (8000934 <main+0x130>)
 8000880:	f002 fc88 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000884:	2108      	movs	r1, #8
 8000886:	482b      	ldr	r0, [pc, #172]	; (8000934 <main+0x130>)
 8000888:	f002 fc84 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	482a      	ldr	r0, [pc, #168]	; (8000938 <main+0x134>)
 8000890:	f002 fc80 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000894:	2104      	movs	r1, #4
 8000896:	4828      	ldr	r0, [pc, #160]	; (8000938 <main+0x134>)
 8000898:	f002 fc7c 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800089c:	2108      	movs	r1, #8
 800089e:	4826      	ldr	r0, [pc, #152]	; (8000938 <main+0x134>)
 80008a0:	f002 fc78 	bl	8003194 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008a4:	210c      	movs	r1, #12
 80008a6:	4824      	ldr	r0, [pc, #144]	; (8000938 <main+0x134>)
 80008a8:	f002 fc74 	bl	8003194 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (conveyor_control(state, pwm_t) != CONVEYOR_STATUS_OK)
 80008ac:	4b23      	ldr	r3, [pc, #140]	; (800093c <main+0x138>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4a23      	ldr	r2, [pc, #140]	; (8000940 <main+0x13c>)
 80008b2:	8812      	ldrh	r2, [r2, #0]
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fbbf 	bl	800103c <conveyor_control>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <main+0xc4>
    {
      Error_Handler();
 80008c4:	f000 fc3c 	bl	8001140 <Error_Handler>
    }

    if (state_change == UART_TRANSMIT_STATUS_OK)
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <main+0x140>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d109      	bne.n	80008e4 <main+0xe0>
    {
      if (uart_transmit() != UART_TRANSMIT_STATUS_OK)
 80008d0:	f000 fb9a 	bl	8001008 <uart_transmit>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <main+0xda>
      {
        Error_Handler();
 80008da:	f000 fc31 	bl	8001140 <Error_Handler>
      }
      state_change = UART_VARIABLE_RX_STATUS_DONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <main+0x140>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	801a      	strh	r2, [r3, #0]
    }

    if (run_classify == START_CLASSIFY_STATE)
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <main+0x144>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d109      	bne.n	8000900 <main+0xfc>
    {
      if (interrupt_timer_state == START_INTERRUPT_TIMER_STATUS)
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <main+0x148>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d105      	bne.n	8000900 <main+0xfc>
      {
        HAL_TIM_Base_Start_IT(&htim3);
 80008f4:	4816      	ldr	r0, [pc, #88]	; (8000950 <main+0x14c>)
 80008f6:	f002 fb63 	bl	8002fc0 <HAL_TIM_Base_Start_IT>
        interrupt_timer_state = RUNNING_INTERRUPT_TIMER_STATUS;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <main+0x148>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
      }
      // run_classify = STOP_CLASSIFY_STATE;
    }

    if (classify_control(classify_state, CLASSIFY_PWM_T) != CLASSIFY_STATUS_OK)
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <main+0x150>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2132      	movs	r1, #50	; 0x32
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fbe2 	bl	80010d0 <classify_control>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0cc      	beq.n	80008ac <main+0xa8>
    {
      Error_Handler();
 8000912:	f000 fc15 	bl	8001140 <Error_Handler>
    if (conveyor_control(state, pwm_t) != CONVEYOR_STATUS_OK)
 8000916:	e7c9      	b.n	80008ac <main+0xa8>
 8000918:	200003a0 	.word	0x200003a0
 800091c:	20000198 	.word	0x20000198
 8000920:	20000220 	.word	0x20000220
 8000924:	200003a8 	.word	0x200003a8
 8000928:	200001dc 	.word	0x200001dc
 800092c:	200002e0 	.word	0x200002e0
 8000930:	20000078 	.word	0x20000078
 8000934:	200000c0 	.word	0x200000c0
 8000938:	20000150 	.word	0x20000150
 800093c:	200003b2 	.word	0x200003b2
 8000940:	200003b0 	.word	0x200003b0
 8000944:	200003b8 	.word	0x200003b8
 8000948:	200003b6 	.word	0x200003b6
 800094c:	200003b4 	.word	0x200003b4
 8000950:	20000108 	.word	0x20000108
 8000954:	200003b3 	.word	0x200003b3

08000958 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b094      	sub	sp, #80	; 0x50
 800095c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	2230      	movs	r2, #48	; 0x30
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 fe02 	bl	8005570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <SystemClock_Config+0xb8>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <SystemClock_Config+0xb8>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <SystemClock_Config+0xb8>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <SystemClock_Config+0xbc>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <SystemClock_Config+0xbc>)
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <SystemClock_Config+0xbc>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	2301      	movs	r3, #1
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c0:	2310      	movs	r3, #16
 80009c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0320 	add.w	r3, r7, #32
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fe4f 	bl	8002670 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009d8:	f000 fbb2 	bl	8001140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 80009dc:	230f      	movs	r3, #15
 80009de:	60fb      	str	r3, [r7, #12]
    RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 f8b2 	bl	8002b60 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a02:	f000 fb9d 	bl	8001140 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b096      	sub	sp, #88	; 0x58
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	615a      	str	r2, [r3, #20]
 8000a48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 fd8d 	bl	8005570 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a56:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a58:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <MX_TIM1_Init+0x154>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000a5c:	4b42      	ldr	r3, [pc, #264]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a5e:	229f      	movs	r2, #159	; 0x9f
 8000a60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a6a:	2263      	movs	r2, #99	; 0x63
 8000a6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6e:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a74:	4b3c      	ldr	r3, [pc, #240]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a7a:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a80:	4839      	ldr	r0, [pc, #228]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a82:	f002 fa4d 	bl	8002f20 <HAL_TIM_Base_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a8c:	f000 fb58 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4832      	ldr	r0, [pc, #200]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000a9e:	f002 fdf3 	bl	8003688 <HAL_TIM_ConfigClockSource>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000aa8:	f000 fb4a 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aac:	482e      	ldr	r0, [pc, #184]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000aae:	f002 fb18 	bl	80030e2 <HAL_TIM_PWM_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ab8:	f000 fb42 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4827      	ldr	r0, [pc, #156]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000acc:	f003 f998 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000ad6:	f000 fb33 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ada:	2360      	movs	r3, #96	; 0x60
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	2200      	movs	r2, #0
 8000afc:	4619      	mov	r1, r3
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000b00:	f002 fd00 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b0a:	f000 fb19 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	220c      	movs	r2, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000b18:	f002 fcf4 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b22:	f000 fb0d 	bl	8001140 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000b4a:	f003 f9c7 	bl	8003edc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b54:	f000 faf4 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <MX_TIM1_Init+0x150>)
 8000b5a:	f000 fb87 	bl	800126c <HAL_TIM_MspPostInit>
}
 8000b5e:	bf00      	nop
 8000b60:	3758      	adds	r7, #88	; 0x58
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000078 	.word	0x20000078
 8000b6c:	40010000 	.word	0x40010000

08000b70 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000baa:	229f      	movs	r2, #159	; 0x9f
 8000bac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000bb6:	2263      	movs	r2, #99	; 0x63
 8000bb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc6:	482e      	ldr	r0, [pc, #184]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000bc8:	f002 f9aa 	bl	8002f20 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000bd2:	f000 fab5 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4827      	ldr	r0, [pc, #156]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000be4:	f002 fd50 	bl	8003688 <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000bee:	f000 faa7 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bf2:	4823      	ldr	r0, [pc, #140]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000bf4:	f002 fa75 	bl	80030e2 <HAL_TIM_PWM_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000bfe:	f000 fa9f 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0320 	add.w	r3, r7, #32
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481b      	ldr	r0, [pc, #108]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000c12:	f003 f8f5 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c1c:	f000 fa90 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c20:	2360      	movs	r3, #96	; 0x60
 8000c22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4812      	ldr	r0, [pc, #72]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000c38:	f002 fc64 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c42:	f000 fa7d 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	2204      	movs	r2, #4
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000c4e:	f002 fc59 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000c58:	f000 fa72 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2208      	movs	r2, #8
 8000c60:	4619      	mov	r1, r3
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000c64:	f002 fc4e 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000c6e:	f000 fa67 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <MX_TIM2_Init+0x110>)
 8000c74:	f000 fafa 	bl	800126c <HAL_TIM_MspPostInit>
}
 8000c78:	bf00      	nop
 8000c7a:	3738      	adds	r7, #56	; 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000c0 	.word	0x200000c0

08000c84 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c8a:	f107 0308 	add.w	r3, r7, #8
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <MX_TIM3_Init+0x98>)
 8000ca4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000ca8:	f240 623f 	movw	r2, #1599	; 0x63f
 8000cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99999;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000cb6:	4a1a      	ldr	r2, [pc, #104]	; (8000d20 <MX_TIM3_Init+0x9c>)
 8000cb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cc6:	4814      	ldr	r0, [pc, #80]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000cc8:	f002 f92a 	bl	8002f20 <HAL_TIM_Base_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000cd2:	f000 fa35 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000ce4:	f002 fcd0 	bl	8003688 <HAL_TIM_ConfigClockSource>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fa27 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_TIM3_Init+0x94>)
 8000d00:	f003 f87e 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000d0a:	f000 fa19 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000108 	.word	0x20000108
 8000d1c:	40000400 	.word	0x40000400
 8000d20:	0001869f 	.word	0x0001869f

08000d24 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08e      	sub	sp, #56	; 0x38
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d38:	f107 0320 	add.w	r3, r7, #32
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
 8000d50:	615a      	str	r2, [r3, #20]
 8000d52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d56:	4a3d      	ldr	r2, [pc, #244]	; (8000e4c <MX_TIM4_Init+0x128>)
 8000d58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8000d5a:	4b3b      	ldr	r3, [pc, #236]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d5c:	229f      	movs	r2, #159	; 0x9f
 8000d5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d68:	2263      	movs	r2, #99	; 0x63
 8000d6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b36      	ldr	r3, [pc, #216]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d72:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d78:	4833      	ldr	r0, [pc, #204]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d7a:	f002 f8d1 	bl	8002f20 <HAL_TIM_Base_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000d84:	f000 f9dc 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d92:	4619      	mov	r1, r3
 8000d94:	482c      	ldr	r0, [pc, #176]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000d96:	f002 fc77 	bl	8003688 <HAL_TIM_ConfigClockSource>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000da0:	f000 f9ce 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000da4:	4828      	ldr	r0, [pc, #160]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000da6:	f002 f99c 	bl	80030e2 <HAL_TIM_PWM_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000db0:	f000 f9c6 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dbc:	f107 0320 	add.w	r3, r7, #32
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4821      	ldr	r0, [pc, #132]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000dc4:	f003 f81c 	bl	8003e00 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000dce:	f000 f9b7 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd2:	2360      	movs	r3, #96	; 0x60
 8000dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	4619      	mov	r1, r3
 8000de8:	4817      	ldr	r0, [pc, #92]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000dea:	f002 fb8b 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000df4:	f000 f9a4 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4812      	ldr	r0, [pc, #72]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000e00:	f002 fb80 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000e0a:	f000 f999 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2208      	movs	r2, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000e16:	f002 fb75 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000e20:	f000 f98e 	bl	8001140 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e24:	1d3b      	adds	r3, r7, #4
 8000e26:	220c      	movs	r2, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000e2c:	f002 fb6a 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000e36:	f000 f983 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM4_Init+0x124>)
 8000e3c:	f000 fa16 	bl	800126c <HAL_TIM_MspPostInit>
}
 8000e40:	bf00      	nop
 8000e42:	3738      	adds	r7, #56	; 0x38
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000150 	.word	0x20000150
 8000e4c:	40000800 	.word	0x40000800

08000e50 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <MX_USART1_UART_Init+0x50>)
 8000e58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e76:	220c      	movs	r2, #12
 8000e78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USART1_UART_Init+0x4c>)
 8000e88:	f003 f88e 	bl	8003fa8 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e92:	f000 f955 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000198 	.word	0x20000198
 8000ea0:	40011000 	.word	0x40011000

08000ea4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <MX_USART2_UART_Init+0x50>)
 8000eac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000eb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_USART2_UART_Init+0x4c>)
 8000edc:	f003 f864 	bl	8003fa8 <HAL_UART_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ee6:	f000 f92b 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001dc 	.word	0x200001dc
 8000ef4:	40004400 	.word	0x40004400

08000ef8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_DMA_Init+0x88>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <MX_DMA_Init+0x88>)
 8000f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_DMA_Init+0x88>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <MX_DMA_Init+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_DMA_Init+0x88>)
 8000f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <MX_DMA_Init+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2010      	movs	r0, #16
 8000f3c:	f000 fdc1 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f40:	2010      	movs	r0, #16
 8000f42:	f000 fdda 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2011      	movs	r0, #17
 8000f4c:	f000 fdb9 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f50:	2011      	movs	r0, #17
 8000f52:	f000 fdd2 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	203a      	movs	r0, #58	; 0x3a
 8000f5c:	f000 fdb1 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f60:	203a      	movs	r0, #58	; 0x3a
 8000f62:	f000 fdca 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2046      	movs	r0, #70	; 0x46
 8000f6c:	f000 fda9 	bl	8001ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f70:	2046      	movs	r0, #70	; 0x46
 8000f72:	f000 fdc2 	bl	8001afa <HAL_NVIC_EnableIRQ>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800

08000f84 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_GPIO_Init+0x7c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a17      	ldr	r2, [pc, #92]	; (8001000 <MX_GPIO_Init+0x7c>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_GPIO_Init+0x7c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	4b11      	ldr	r3, [pc, #68]	; (8001000 <MX_GPIO_Init+0x7c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a10      	ldr	r2, [pc, #64]	; (8001000 <MX_GPIO_Init+0x7c>)
 8000fc0:	f043 0302 	orr.w	r3, r3, #2
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_GPIO_Init+0x7c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2160      	movs	r1, #96	; 0x60
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <MX_GPIO_Init+0x80>)
 8000fd8:	f001 fb30 	bl	800263c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000fdc:	2360      	movs	r3, #96	; 0x60
 8000fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0x80>)
 8000ff4:	f001 f99e 	bl	8002334 <HAL_GPIO_Init>
}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000

08001008 <uart_transmit>:

/* USER CODE BEGIN 4 */
static uart_transmit_status_t uart_transmit()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  sprintf(duty_cycle_send, "%2d", pwm_t);
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <uart_transmit+0x24>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4907      	ldr	r1, [pc, #28]	; (8001030 <uart_transmit+0x28>)
 8001014:	4807      	ldr	r0, [pc, #28]	; (8001034 <uart_transmit+0x2c>)
 8001016:	f004 fa8b 	bl	8005530 <siprintf>
  /* Transmit UART of Duty Cycle Polling */
  HAL_UART_Transmit(&huart2, (uint8_t *) duty_cycle_send, sizeof(duty_cycle_send), 100);
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2202      	movs	r2, #2
 800101e:	4905      	ldr	r1, [pc, #20]	; (8001034 <uart_transmit+0x2c>)
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <uart_transmit+0x30>)
 8001022:	f003 f80e 	bl	8004042 <HAL_UART_Transmit>
  return UART_TRANSMIT_STATUS_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200003b0 	.word	0x200003b0
 8001030:	08005e90 	.word	0x08005e90
 8001034:	200003c4 	.word	0x200003c4
 8001038:	200001dc 	.word	0x200001dc

0800103c <conveyor_control>:
static conveyor_status_t conveyor_control(uint8_t state, uint8_t pwm_t)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
  switch (state)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d832      	bhi.n	80010b8 <conveyor_control+0x7c>
 8001052:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <conveyor_control+0x1c>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001069 	.word	0x08001069
 800105c:	0800107f 	.word	0x0800107f
 8001060:	08001095 	.word	0x08001095
 8001064:	080010a7 	.word	0x080010a7
  {
  case STOP_MOTOR_STATE:
  {
    pwm_t = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	71bb      	strb	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_t);
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <conveyor_control+0x8c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	79ba      	ldrb	r2, [r7, #6]
 8001072:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <conveyor_control+0x90>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	79ba      	ldrb	r2, [r7, #6]
 800107a:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 800107c:	e01c      	b.n	80010b8 <conveyor_control+0x7c>
  }
  case START_MOTOR_STATE:
  {
    pwm_t = 49;
 800107e:	2331      	movs	r3, #49	; 0x31
 8001080:	71bb      	strb	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <conveyor_control+0x8c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <conveyor_control+0x90>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	79ba      	ldrb	r2, [r7, #6]
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8001092:	e011      	b.n	80010b8 <conveyor_control+0x7c>
  }
  case MOTOR_LEFT_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <conveyor_control+0x8c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <conveyor_control+0x90>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	79ba      	ldrb	r2, [r7, #6]
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010a4:	e008      	b.n	80010b8 <conveyor_control+0x7c>
  }
  case MOTOR_RIGHT_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_t);
 80010a6:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <conveyor_control+0x8c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	79ba      	ldrb	r2, [r7, #6]
 80010ac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <conveyor_control+0x90>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010b6:	bf00      	nop
  }
  }
  return CONVEYOR_STATUS_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	200000c0 	.word	0x200000c0
 80010cc:	20000150 	.word	0x20000150

080010d0 <classify_control>:

static classify_status_t classify_control(uint8_t classify_state, uint8_t pwm_classify)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	460a      	mov	r2, r1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	4613      	mov	r3, r2
 80010de:	71bb      	strb	r3, [r7, #6]
  switch (classify_state)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d00f      	beq.n	8001106 <classify_control+0x36>
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	dc1f      	bgt.n	800112a <classify_control+0x5a>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <classify_control+0x24>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d012      	beq.n	8001118 <classify_control+0x48>
 80010f2:	e01a      	b.n	800112a <classify_control+0x5a>
  {
  case ORIGINAL_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <classify_control+0x68>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <classify_control+0x6c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2200      	movs	r2, #0
 8001102:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001104:	e011      	b.n	800112a <classify_control+0x5a>
  }
  case LEFT_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_classify);
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <classify_control+0x68>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	79ba      	ldrb	r2, [r7, #6]
 800110c:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <classify_control+0x6c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001116:	e008      	b.n	800112a <classify_control+0x5a>
  }
  case RIGHT_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <classify_control+0x68>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_classify);
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <classify_control+0x6c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	79ba      	ldrb	r2, [r7, #6]
 8001126:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001128:	bf00      	nop
  }
  }
  return CLASSIFY_STATUS_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200000c0 	.word	0x200000c0
 800113c:	20000150 	.word	0x20000150

08001140 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_MspInit+0x4c>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a0f      	ldr	r2, [pc, #60]	; (8001198 <HAL_MspInit+0x4c>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_MspInit+0x4c>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_MspInit+0x4c>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <HAL_TIM_Base_MspInit+0xc0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10e      	bne.n	80011cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a2a      	ldr	r2, [pc, #168]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011ca:	e042      	b.n	8001252 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d4:	d10e      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
}
 80011f2:	e02e      	b.n	8001252 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <HAL_TIM_Base_MspInit+0xc8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d116      	bne.n	800122c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a16      	ldr	r2, [pc, #88]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	201d      	movs	r0, #29
 8001220:	f000 fc4f 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001224:	201d      	movs	r0, #29
 8001226:	f000 fc68 	bl	8001afa <HAL_NVIC_EnableIRQ>
}
 800122a:	e012      	b.n	8001252 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_TIM_Base_MspInit+0xcc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d10d      	bne.n	8001252 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_TIM_Base_MspInit+0xc4>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010000 	.word	0x40010000
 8001260:	40023800 	.word	0x40023800
 8001264:	40000400 	.word	0x40000400
 8001268:	40000800 	.word	0x40000800

0800126c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <HAL_TIM_MspPostInit+0x138>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d11f      	bne.n	80012ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	4b45      	ldr	r3, [pc, #276]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80012aa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012bc:	2301      	movs	r3, #1
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <HAL_TIM_MspPostInit+0x140>)
 80012c8:	f001 f834 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012cc:	e066      	b.n	800139c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d6:	d13d      	bne.n	8001354 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b2f      	ldr	r3, [pc, #188]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001310:	2303      	movs	r3, #3
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001320:	2301      	movs	r3, #1
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4820      	ldr	r0, [pc, #128]	; (80013ac <HAL_TIM_MspPostInit+0x140>)
 800132c:	f001 f802 	bl	8002334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001342:	2301      	movs	r3, #1
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <HAL_TIM_MspPostInit+0x144>)
 800134e:	f000 fff1 	bl	8002334 <HAL_GPIO_Init>
}
 8001352:	e023      	b.n	800139c <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM4)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a16      	ldr	r2, [pc, #88]	; (80013b4 <HAL_TIM_MspPostInit+0x148>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d11e      	bne.n	800139c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_TIM_MspPostInit+0x13c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800137a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800138c:	2302      	movs	r3, #2
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <HAL_TIM_MspPostInit+0x144>)
 8001398:	f000 ffcc 	bl	8002334 <HAL_GPIO_Init>
}
 800139c:	bf00      	nop
 800139e:	3730      	adds	r7, #48	; 0x30
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40000800 	.word	0x40000800

080013b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a97      	ldr	r2, [pc, #604]	; (8001634 <HAL_UART_MspInit+0x27c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	f040 8092 	bne.w	8001500 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	4b95      	ldr	r3, [pc, #596]	; (8001638 <HAL_UART_MspInit+0x280>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	4a94      	ldr	r2, [pc, #592]	; (8001638 <HAL_UART_MspInit+0x280>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6453      	str	r3, [r2, #68]	; 0x44
 80013ec:	4b92      	ldr	r3, [pc, #584]	; (8001638 <HAL_UART_MspInit+0x280>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	4b8e      	ldr	r3, [pc, #568]	; (8001638 <HAL_UART_MspInit+0x280>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	4a8d      	ldr	r2, [pc, #564]	; (8001638 <HAL_UART_MspInit+0x280>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	6313      	str	r3, [r2, #48]	; 0x30
 8001408:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <HAL_UART_MspInit+0x280>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001414:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001426:	2307      	movs	r3, #7
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4882      	ldr	r0, [pc, #520]	; (800163c <HAL_UART_MspInit+0x284>)
 8001432:	f000 ff7f 	bl	8002334 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001436:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001438:	4a82      	ldr	r2, [pc, #520]	; (8001644 <HAL_UART_MspInit+0x28c>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800143c:	4b80      	ldr	r3, [pc, #512]	; (8001640 <HAL_UART_MspInit+0x288>)
 800143e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001442:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001444:	4b7e      	ldr	r3, [pc, #504]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	4b7d      	ldr	r3, [pc, #500]	; (8001640 <HAL_UART_MspInit+0x288>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001450:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001456:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001458:	4b79      	ldr	r3, [pc, #484]	; (8001640 <HAL_UART_MspInit+0x288>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	4b78      	ldr	r3, [pc, #480]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001464:	4b76      	ldr	r3, [pc, #472]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800146a:	4b75      	ldr	r3, [pc, #468]	; (8001640 <HAL_UART_MspInit+0x288>)
 800146c:	2200      	movs	r2, #0
 800146e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001470:	4b73      	ldr	r3, [pc, #460]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001472:	2200      	movs	r2, #0
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001476:	4872      	ldr	r0, [pc, #456]	; (8001640 <HAL_UART_MspInit+0x288>)
 8001478:	f000 fb5a 	bl	8001b30 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001482:	f7ff fe5d 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a6d      	ldr	r2, [pc, #436]	; (8001640 <HAL_UART_MspInit+0x288>)
 800148a:	639a      	str	r2, [r3, #56]	; 0x38
 800148c:	4a6c      	ldr	r2, [pc, #432]	; (8001640 <HAL_UART_MspInit+0x288>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001492:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <HAL_UART_MspInit+0x290>)
 8001494:	4a6d      	ldr	r2, [pc, #436]	; (800164c <HAL_UART_MspInit+0x294>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001498:	4b6b      	ldr	r3, [pc, #428]	; (8001648 <HAL_UART_MspInit+0x290>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a0:	4b69      	ldr	r3, [pc, #420]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b66      	ldr	r3, [pc, #408]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b4:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b60      	ldr	r3, [pc, #384]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014d2:	485d      	ldr	r0, [pc, #372]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014d4:	f000 fb2c 	bl	8001b30 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80014de:	f7ff fe2f 	bl	8001140 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a58      	ldr	r2, [pc, #352]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
 80014e8:	4a57      	ldr	r2, [pc, #348]	; (8001648 <HAL_UART_MspInit+0x290>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2025      	movs	r0, #37	; 0x25
 80014f4:	f000 fae5 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014f8:	2025      	movs	r0, #37	; 0x25
 80014fa:	f000 fafe 	bl	8001afa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014fe:	e095      	b.n	800162c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <HAL_UART_MspInit+0x298>)
 8001506:	4293      	cmp	r3, r2
 8001508:	f040 8090 	bne.w	800162c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	4b49      	ldr	r3, [pc, #292]	; (8001638 <HAL_UART_MspInit+0x280>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a48      	ldr	r2, [pc, #288]	; (8001638 <HAL_UART_MspInit+0x280>)
 8001516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151a:	6413      	str	r3, [r2, #64]	; 0x40
 800151c:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_UART_MspInit+0x280>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <HAL_UART_MspInit+0x280>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a41      	ldr	r2, [pc, #260]	; (8001638 <HAL_UART_MspInit+0x280>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <HAL_UART_MspInit+0x280>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001544:	230c      	movs	r3, #12
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001554:	2307      	movs	r3, #7
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4837      	ldr	r0, [pc, #220]	; (800163c <HAL_UART_MspInit+0x284>)
 8001560:	f000 fee8 	bl	8002334 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001564:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_UART_MspInit+0x29c>)
 8001566:	4a3c      	ldr	r2, [pc, #240]	; (8001658 <HAL_UART_MspInit+0x2a0>)
 8001568:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800156a:	4b3a      	ldr	r3, [pc, #232]	; (8001654 <HAL_UART_MspInit+0x29c>)
 800156c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001570:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001572:	4b38      	ldr	r3, [pc, #224]	; (8001654 <HAL_UART_MspInit+0x29c>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_UART_MspInit+0x29c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_UART_MspInit+0x29c>)
 8001580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001584:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_UART_MspInit+0x29c>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <HAL_UART_MspInit+0x29c>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_UART_MspInit+0x29c>)
 8001594:	2200      	movs	r2, #0
 8001596:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <HAL_UART_MspInit+0x29c>)
 800159a:	2200      	movs	r2, #0
 800159c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_UART_MspInit+0x29c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015a4:	482b      	ldr	r0, [pc, #172]	; (8001654 <HAL_UART_MspInit+0x29c>)
 80015a6:	f000 fac3 	bl	8001b30 <HAL_DMA_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80015b0:	f7ff fdc6 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a27      	ldr	r2, [pc, #156]	; (8001654 <HAL_UART_MspInit+0x29c>)
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
 80015ba:	4a26      	ldr	r2, [pc, #152]	; (8001654 <HAL_UART_MspInit+0x29c>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015c0:	4b26      	ldr	r3, [pc, #152]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015c2:	4a27      	ldr	r2, [pc, #156]	; (8001660 <HAL_UART_MspInit+0x2a8>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015c6:	4b25      	ldr	r3, [pc, #148]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_UART_MspInit+0x2a4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001600:	4816      	ldr	r0, [pc, #88]	; (800165c <HAL_UART_MspInit+0x2a4>)
 8001602:	f000 fa95 	bl	8001b30 <HAL_DMA_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800160c:	f7ff fd98 	bl	8001140 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_UART_MspInit+0x2a4>)
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
 8001616:	4a11      	ldr	r2, [pc, #68]	; (800165c <HAL_UART_MspInit+0x2a4>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2026      	movs	r0, #38	; 0x26
 8001622:	f000 fa4e 	bl	8001ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001626:	2026      	movs	r0, #38	; 0x26
 8001628:	f000 fa67 	bl	8001afa <HAL_NVIC_EnableIRQ>
}
 800162c:	bf00      	nop
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40011000 	.word	0x40011000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000
 8001640:	20000220 	.word	0x20000220
 8001644:	40026440 	.word	0x40026440
 8001648:	20000280 	.word	0x20000280
 800164c:	400264b8 	.word	0x400264b8
 8001650:	40004400 	.word	0x40004400
 8001654:	200002e0 	.word	0x200002e0
 8001658:	40026088 	.word	0x40026088
 800165c:	20000340 	.word	0x20000340
 8001660:	400260a0 	.word	0x400260a0

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f90c 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Stream5_IRQHandler+0x10>)
 80016be:	f000 fbcf 	bl	8001e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200002e0 	.word	0x200002e0

080016cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <DMA1_Stream6_IRQHandler+0x10>)
 80016d2:	f000 fbc5 	bl	8001e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000340 	.word	0x20000340

080016e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM3_IRQHandler+0x10>)
 80016e6:	f001 fe05 	bl	80032f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000108 	.word	0x20000108

080016f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016f8:	4802      	ldr	r0, [pc, #8]	; (8001704 <USART1_IRQHandler+0x10>)
 80016fa:	f002 fd99 	bl	8004230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000198 	.word	0x20000198

08001708 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <USART2_IRQHandler+0x10>)
 800170e:	f002 fd8f 	bl	8004230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001dc 	.word	0x200001dc

0800171c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA2_Stream2_IRQHandler+0x10>)
 8001722:	f000 fb9d 	bl	8001e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000220 	.word	0x20000220

08001730 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <DMA2_Stream7_IRQHandler+0x10>)
 8001736:	f000 fb93 	bl	8001e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000280 	.word	0x20000280

08001744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800174c:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <_sbrk+0x5c>)
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <_sbrk+0x60>)
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001758:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <_sbrk+0x64>)
 8001762:	4a12      	ldr	r2, [pc, #72]	; (80017ac <_sbrk+0x68>)
 8001764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <_sbrk+0x64>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	429a      	cmp	r2, r3
 8001772:	d207      	bcs.n	8001784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001774:	f003 ff04 	bl	8005580 <__errno>
 8001778:	4603      	mov	r3, r0
 800177a:	220c      	movs	r2, #12
 800177c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177e:	f04f 33ff 	mov.w	r3, #4294967295
 8001782:	e009      	b.n	8001798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <_sbrk+0x64>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800178a:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <_sbrk+0x64>)
 8001794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001796:	68fb      	ldr	r3, [r7, #12]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20010000 	.word	0x20010000
 80017a4:	00000400 	.word	0x00000400
 80017a8:	200003c8 	.word	0x200003c8
 80017ac:	20000518 	.word	0x20000518

080017b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017fe:	f7ff ffd7 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f003 fec3 	bl	800558c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7fe fffd 	bl	8000804 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001818:	08005ff8 	.word	0x08005ff8
  ldr r2, =_sbss
 800181c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001820:	20000518 	.word	0x20000518

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_Init+0x40>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_Init+0x40>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_Init+0x40>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f92b 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f000 f808 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff fc76 	bl	800114c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x54>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x58>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f943 	bl	8001b16 <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00e      	b.n	80018b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d80a      	bhi.n	80018b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f000 f90b 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_InitTick+0x5c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000004 	.word	0x20000004

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008
 80018f0:	200003cc 	.word	0x200003cc

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	200003cc 	.word	0x200003cc

0800190c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001922:	68ba      	ldr	r2, [r7, #8]
 8001924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001928:	4013      	ands	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193e:	4a04      	ldr	r2, [pc, #16]	; (8001950 <__NVIC_SetPriorityGrouping+0x44>)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	60d3      	str	r3, [r2, #12]
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <__NVIC_GetPriorityGrouping+0x18>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	f003 0307 	and.w	r3, r3, #7
}
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	2b00      	cmp	r3, #0
 8001980:	db0b      	blt.n	800199a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f003 021f 	and.w	r2, r3, #31
 8001988:	4907      	ldr	r1, [pc, #28]	; (80019a8 <__NVIC_EnableIRQ+0x38>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2001      	movs	r0, #1
 8001992:	fa00 f202 	lsl.w	r2, r0, r2
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff29 	bl	800190c <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff3e 	bl	8001954 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff31 	bl	8001970 <__NVIC_EnableIRQ>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff ffa2 	bl	8001a68 <SysTick_Config>
 8001b24:	4603      	mov	r3, r0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b3c:	f7ff feda 	bl	80018f4 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e099      	b.n	8001c80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0201 	bic.w	r2, r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6c:	e00f      	b.n	8001b8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6e:	f7ff fec1 	bl	80018f4 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d908      	bls.n	8001b8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2203      	movs	r2, #3
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e078      	b.n	8001c80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1e8      	bne.n	8001b6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_DMA_Init+0x158>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d107      	bne.n	8001bf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f023 0307 	bic.w	r3, r3, #7
 8001c0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d117      	bne.n	8001c52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00e      	beq.n	8001c52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 fb01 	bl	800223c <DMA_CheckFifoParam>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2240      	movs	r2, #64	; 0x40
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e016      	b.n	8001c80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 fab8 	bl	80021d0 <DMA_CalcBaseAndBitshift>
 8001c60:	4603      	mov	r3, r0
 8001c62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c68:	223f      	movs	r2, #63	; 0x3f
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	f010803f 	.word	0xf010803f

08001c8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_DMA_Start_IT+0x26>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e040      	b.n	8001d34 <HAL_DMA_Start_IT+0xa8>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d12f      	bne.n	8001d26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68b9      	ldr	r1, [r7, #8]
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fa4a 	bl	8002174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce4:	223f      	movs	r2, #63	; 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0216 	orr.w	r2, r2, #22
 8001cfa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0208 	orr.w	r2, r2, #8
 8001d12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e005      	b.n	8001d32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d48:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d4a:	f7ff fdd3 	bl	80018f4 <HAL_GetTick>
 8001d4e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d008      	beq.n	8001d6e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e052      	b.n	8001e14 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0216 	bic.w	r2, r2, #22
 8001d7c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d8c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <HAL_DMA_Abort+0x62>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0208 	bic.w	r2, r2, #8
 8001dac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dbe:	e013      	b.n	8001de8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc0:	f7ff fd98 	bl	80018f4 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d90c      	bls.n	8001de8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e015      	b.n	8001e14 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1e4      	bne.n	8001dc0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	223f      	movs	r2, #63	; 0x3f
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d004      	beq.n	8001e3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00c      	b.n	8001e54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2205      	movs	r2, #5
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0201 	bic.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e6c:	4b8e      	ldr	r3, [pc, #568]	; (80020a8 <HAL_DMA_IRQHandler+0x248>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a8e      	ldr	r2, [pc, #568]	; (80020ac <HAL_DMA_IRQHandler+0x24c>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0a9b      	lsrs	r3, r3, #10
 8001e78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01a      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2208      	movs	r2, #8
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d012      	beq.n	8001f02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2201      	movs	r2, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2204      	movs	r2, #4
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2204      	movs	r2, #4
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d043      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03c      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d018      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d024      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
 8001f8e:	e01f      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
 8001fa0:	e016      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0208 	bic.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 808f 	beq.w	8002100 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8087 	beq.w	8002100 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d136      	bne.n	8002078 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0216 	bic.w	r2, r2, #22
 8002018:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002028:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <HAL_DMA_IRQHandler+0x1da>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0208 	bic.w	r2, r2, #8
 8002048:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	223f      	movs	r2, #63	; 0x3f
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	d07e      	beq.n	800216c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
        }
        return;
 8002076:	e079      	b.n	800216c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01d      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	2b00      	cmp	r3, #0
 800209a:	d031      	beq.n	8002100 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	e02c      	b.n	8002100 <HAL_DMA_IRQHandler+0x2a0>
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000
 80020ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d023      	beq.n	8002100 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
 80020c0:	e01e      	b.n	8002100 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10f      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0210 	bic.w	r2, r2, #16
 80020de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002104:	2b00      	cmp	r3, #0
 8002106:	d032      	beq.n	800216e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d022      	beq.n	800215a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2205      	movs	r2, #5
 8002118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	3301      	adds	r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	429a      	cmp	r2, r3
 8002136:	d307      	bcc.n	8002148 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f2      	bne.n	800212c <HAL_DMA_IRQHandler+0x2cc>
 8002146:	e000      	b.n	800214a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002148:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
 800216a:	e000      	b.n	800216e <HAL_DMA_IRQHandler+0x30e>
        return;
 800216c:	bf00      	nop
    }
  }
}
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d108      	bne.n	80021b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021b2:	e007      	b.n	80021c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	3b10      	subs	r3, #16
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <DMA_CalcBaseAndBitshift+0x64>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <DMA_CalcBaseAndBitshift+0x68>)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d909      	bls.n	8002212 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	1d1a      	adds	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	659a      	str	r2, [r3, #88]	; 0x58
 8002210:	e007      	b.n	8002222 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	aaaaaaab 	.word	0xaaaaaaab
 8002238:	08005eac 	.word	0x08005eac

0800223c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d11f      	bne.n	8002296 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d856      	bhi.n	800230a <DMA_CheckFifoParam+0xce>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <DMA_CheckFifoParam+0x28>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	08002275 	.word	0x08002275
 8002268:	08002287 	.word	0x08002287
 800226c:	08002275 	.word	0x08002275
 8002270:	0800230b 	.word	0x0800230b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d046      	beq.n	800230e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002284:	e043      	b.n	800230e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800228e:	d140      	bne.n	8002312 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002294:	e03d      	b.n	8002312 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	d121      	bne.n	80022e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d837      	bhi.n	8002316 <DMA_CheckFifoParam+0xda>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <DMA_CheckFifoParam+0x70>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022c3 	.word	0x080022c3
 80022b4:	080022bd 	.word	0x080022bd
 80022b8:	080022d5 	.word	0x080022d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e030      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d025      	beq.n	800231a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d2:	e022      	b.n	800231a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022dc:	d11f      	bne.n	800231e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022e2:	e01c      	b.n	800231e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d903      	bls.n	80022f2 <DMA_CheckFifoParam+0xb6>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d003      	beq.n	80022f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022f0:	e018      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	73fb      	strb	r3, [r7, #15]
      break;
 80022f6:	e015      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00e      	beq.n	8002322 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
      break;
 8002308:	e00b      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 800230a:	bf00      	nop
 800230c:	e00a      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 800230e:	bf00      	nop
 8002310:	e008      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 8002312:	bf00      	nop
 8002314:	e006      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 8002316:	bf00      	nop
 8002318:	e004      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 800231a:	bf00      	nop
 800231c:	e002      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;   
 800231e:	bf00      	nop
 8002320:	e000      	b.n	8002324 <DMA_CheckFifoParam+0xe8>
      break;
 8002322:	bf00      	nop
    }
  } 
  
  return status; 
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e159      	b.n	8002604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8148 	bne.w	80025fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	2b02      	cmp	r3, #2
 8002384:	d130      	bne.n	80023e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0201 	and.w	r2, r3, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d017      	beq.n	8002424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d123      	bne.n	8002478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a2 	beq.w	80025fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_GPIO_Init+0x2e8>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a56      	ldr	r2, [pc, #344]	; (800261c <HAL_GPIO_Init+0x2e8>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b54      	ldr	r3, [pc, #336]	; (800261c <HAL_GPIO_Init+0x2e8>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d6:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_GPIO_Init+0x2ec>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a49      	ldr	r2, [pc, #292]	; (8002624 <HAL_GPIO_Init+0x2f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d019      	beq.n	8002536 <HAL_GPIO_Init+0x202>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a48      	ldr	r2, [pc, #288]	; (8002628 <HAL_GPIO_Init+0x2f4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_GPIO_Init+0x1fe>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a47      	ldr	r2, [pc, #284]	; (800262c <HAL_GPIO_Init+0x2f8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00d      	beq.n	800252e <HAL_GPIO_Init+0x1fa>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a46      	ldr	r2, [pc, #280]	; (8002630 <HAL_GPIO_Init+0x2fc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <HAL_GPIO_Init+0x1f6>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a45      	ldr	r2, [pc, #276]	; (8002634 <HAL_GPIO_Init+0x300>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_GPIO_Init+0x1f2>
 8002522:	2304      	movs	r3, #4
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x204>
 8002526:	2307      	movs	r3, #7
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x204>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x204>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x204>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x204>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002548:	4935      	ldr	r1, [pc, #212]	; (8002620 <HAL_GPIO_Init+0x2ec>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_GPIO_Init+0x304>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x304>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_GPIO_Init+0x304>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ce:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f aea2 	bls.w	8002350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40013800 	.word	0x40013800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002658:	e003      	b.n	8002662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800265a:	887b      	ldrh	r3, [r7, #2]
 800265c:	041a      	lsls	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	619a      	str	r2, [r3, #24]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e267      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d075      	beq.n	800277a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800268e:	4b88      	ldr	r3, [pc, #544]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b04      	cmp	r3, #4
 8002698:	d00c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269a:	4b85      	ldr	r3, [pc, #532]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d112      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b82      	ldr	r3, [pc, #520]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	4b7e      	ldr	r3, [pc, #504]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d05b      	beq.n	8002778 <HAL_RCC_OscConfig+0x108>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d157      	bne.n	8002778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e242      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d4:	d106      	bne.n	80026e4 <HAL_RCC_OscConfig+0x74>
 80026d6:	4b76      	ldr	r3, [pc, #472]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a75      	ldr	r2, [pc, #468]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e01d      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x98>
 80026ee:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a6f      	ldr	r2, [pc, #444]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6c      	ldr	r2, [pc, #432]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0xb0>
 8002708:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800271a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff f8e4 	bl	80018f4 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002730:	f7ff f8e0 	bl	80018f4 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e207      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0xc0>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff f8d0 	bl	80018f4 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002758:	f7ff f8cc 	bl	80018f4 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e1f3      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	4b51      	ldr	r3, [pc, #324]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0xe8>
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d063      	beq.n	800284e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002786:	4b4a      	ldr	r3, [pc, #296]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279a:	2b08      	cmp	r3, #8
 800279c:	d11c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b44      	ldr	r3, [pc, #272]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b41      	ldr	r3, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e1c7      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4937      	ldr	r1, [pc, #220]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e03a      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d020      	beq.n	8002822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b34      	ldr	r3, [pc, #208]	; (80028b4 <HAL_RCC_OscConfig+0x244>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7ff f885 	bl	80018f4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ee:	f7ff f881 	bl	80018f4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1a8      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4925      	ldr	r1, [pc, #148]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 800281c:	4313      	orrs	r3, r2
 800281e:	600b      	str	r3, [r1, #0]
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_OscConfig+0x244>)
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7ff f864 	bl	80018f4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002830:	f7ff f860 	bl	80018f4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e187      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d036      	beq.n	80028c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_RCC_OscConfig+0x248>)
 8002864:	2201      	movs	r2, #1
 8002866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7ff f844 	bl	80018f4 <HAL_GetTick>
 800286c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002870:	f7ff f840 	bl	80018f4 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e167      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_OscConfig+0x240>)
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x200>
 800288e:	e01b      	b.n	80028c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_OscConfig+0x248>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002896:	f7ff f82d 	bl	80018f4 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	e00e      	b.n	80028bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800289e:	f7ff f829 	bl	80018f4 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d907      	bls.n	80028bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e150      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	42470000 	.word	0x42470000
 80028b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028bc:	4b88      	ldr	r3, [pc, #544]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1ea      	bne.n	800289e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 8097 	beq.w	8002a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028da:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10f      	bne.n	8002906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b7d      	ldr	r3, [pc, #500]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a7c      	ldr	r2, [pc, #496]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b7a      	ldr	r3, [pc, #488]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b77      	ldr	r3, [pc, #476]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002912:	4b74      	ldr	r3, [pc, #464]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a73      	ldr	r2, [pc, #460]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291e:	f7fe ffe9 	bl	80018f4 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002926:	f7fe ffe5 	bl	80018f4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e10c      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <HAL_RCC_OscConfig+0x474>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x2ea>
 800294c:	4b64      	ldr	r3, [pc, #400]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a63      	ldr	r2, [pc, #396]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	e01c      	b.n	8002994 <HAL_RCC_OscConfig+0x324>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b05      	cmp	r3, #5
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x30c>
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a5e      	ldr	r2, [pc, #376]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
 800296e:	4b5c      	ldr	r3, [pc, #368]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a5b      	ldr	r2, [pc, #364]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0x324>
 800297c:	4b58      	ldr	r3, [pc, #352]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a57      	ldr	r2, [pc, #348]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	4b55      	ldr	r3, [pc, #340]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a54      	ldr	r2, [pc, #336]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 0304 	bic.w	r3, r3, #4
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d015      	beq.n	80029c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe ffaa 	bl	80018f4 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe ffa6 	bl	80018f4 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0cb      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0ee      	beq.n	80029a4 <HAL_RCC_OscConfig+0x334>
 80029c6:	e014      	b.n	80029f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c8:	f7fe ff94 	bl	80018f4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fe ff90 	bl	80018f4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e0b5      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e6:	4b3e      	ldr	r3, [pc, #248]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1ee      	bne.n	80029d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f8:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	4a38      	ldr	r2, [pc, #224]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 80029fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a1 	beq.w	8002b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a0e:	4b34      	ldr	r3, [pc, #208]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d05c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d141      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_OscConfig+0x478>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe ff64 	bl	80018f4 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe ff60 	bl	80018f4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e087      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69da      	ldr	r2, [r3, #28]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	019b      	lsls	r3, r3, #6
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	085b      	lsrs	r3, r3, #1
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	491b      	ldr	r1, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <HAL_RCC_OscConfig+0x478>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7e:	f7fe ff39 	bl	80018f4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe ff35 	bl	80018f4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e05c      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x416>
 8002aa4:	e054      	b.n	8002b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b10      	ldr	r3, [pc, #64]	; (8002ae8 <HAL_RCC_OscConfig+0x478>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe ff22 	bl	80018f4 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe ff1e 	bl	80018f4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e045      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x444>
 8002ad2:	e03d      	b.n	8002b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e038      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <HAL_RCC_OscConfig+0x4ec>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d028      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d121      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d11a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d111      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0cc      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d90c      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d044      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1e:	4b3f      	ldr	r3, [pc, #252]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e06f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e067      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3e:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f023 0203 	bic.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4934      	ldr	r1, [pc, #208]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c50:	f7fe fe50 	bl	80018f4 <HAL_GetTick>
 8002c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c56:	e00a      	b.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c58:	f7fe fe4c 	bl	80018f4 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e04f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 020c 	and.w	r2, r3, #12
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d1eb      	bne.n	8002c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c80:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d20c      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8e:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1c4>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fdb0 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08005e94 	.word	0x08005e94
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d30:	b090      	sub	sp, #64	; 0x40
 8002d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
 8002d38:	2300      	movs	r3, #0
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d00d      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x40>
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	f200 80a1 	bhi.w	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5e:	e09b      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d64:	e09b      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6a:	e098      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d76:	4b4d      	ldr	r3, [pc, #308]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d028      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	099b      	lsrs	r3, r3, #6
 8002d88:	2200      	movs	r2, #0
 8002d8a:	623b      	str	r3, [r7, #32]
 8002d8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d94:	2100      	movs	r1, #0
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d98:	fb03 f201 	mul.w	r2, r3, r1
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	4a43      	ldr	r2, [pc, #268]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da6:	fba0 1202 	umull	r1, r2, r0, r2
 8002daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dac:	460a      	mov	r2, r1
 8002dae:	62ba      	str	r2, [r7, #40]	; 0x28
 8002db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db2:	4413      	add	r3, r2
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db8:	2200      	movs	r2, #0
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dc6:	f7fd fa5b 	bl	8000280 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4613      	mov	r3, r2
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dd2:	e053      	b.n	8002e7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	2200      	movs	r2, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	617a      	str	r2, [r7, #20]
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de6:	f04f 0b00 	mov.w	fp, #0
 8002dea:	4652      	mov	r2, sl
 8002dec:	465b      	mov	r3, fp
 8002dee:	f04f 0000 	mov.w	r0, #0
 8002df2:	f04f 0100 	mov.w	r1, #0
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfc:	0150      	lsls	r0, r2, #5
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	ebb2 080a 	subs.w	r8, r2, sl
 8002e06:	eb63 090b 	sbc.w	r9, r3, fp
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e22:	eb63 0509 	sbc.w	r5, r3, r9
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	00eb      	lsls	r3, r5, #3
 8002e30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e34:	00e2      	lsls	r2, r4, #3
 8002e36:	4614      	mov	r4, r2
 8002e38:	461d      	mov	r5, r3
 8002e3a:	eb14 030a 	adds.w	r3, r4, sl
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	eb45 030b 	adc.w	r3, r5, fp
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e52:	4629      	mov	r1, r5
 8002e54:	028b      	lsls	r3, r1, #10
 8002e56:	4621      	mov	r1, r4
 8002e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e5c:	4621      	mov	r1, r4
 8002e5e:	028a      	lsls	r2, r1, #10
 8002e60:	4610      	mov	r0, r2
 8002e62:	4619      	mov	r1, r3
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2200      	movs	r2, #0
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	60fa      	str	r2, [r7, #12]
 8002e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e70:	f7fd fa06 	bl	8000280 <__aeabi_uldivmod>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4613      	mov	r3, r2
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	0c1b      	lsrs	r3, r3, #16
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	3301      	adds	r3, #1
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e96:	e002      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e98:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3740      	adds	r7, #64	; 0x40
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	00f42400 	.word	0x00f42400
 8002eb4:	017d7840 	.word	0x017d7840

08002eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ebc:	4b03      	ldr	r3, [pc, #12]	; (8002ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000000 	.word	0x20000000

08002ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed4:	f7ff fff0 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0a9b      	lsrs	r3, r3, #10
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08005ea4 	.word	0x08005ea4

08002ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002efc:	f7ff ffdc 	bl	8002eb8 <HAL_RCC_GetHCLKFreq>
 8002f00:	4602      	mov	r2, r0
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	0b5b      	lsrs	r3, r3, #13
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	4903      	ldr	r1, [pc, #12]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0e:	5ccb      	ldrb	r3, [r1, r3]
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	08005ea4 	.word	0x08005ea4

08002f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e041      	b.n	8002fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe f928 	bl	800119c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f000 fc82 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d001      	beq.n	8002fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e044      	b.n	8003062 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x6c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003002:	d013      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x6c>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1a      	ldr	r2, [pc, #104]	; (8003074 <HAL_TIM_Base_Start_IT+0xb4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00e      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x6c>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a19      	ldr	r2, [pc, #100]	; (8003078 <HAL_TIM_Base_Start_IT+0xb8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d009      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x6c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a17      	ldr	r2, [pc, #92]	; (800307c <HAL_TIM_Base_Start_IT+0xbc>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d004      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x6c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_TIM_Base_Start_IT+0xc0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d111      	bne.n	8003050 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b06      	cmp	r3, #6
 800303c:	d010      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304e:	e007      	b.n	8003060 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40014000 	.word	0x40014000

08003084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10f      	bne.n	80030cc <HAL_TIM_Base_Stop_IT+0x48>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	f240 4344 	movw	r3, #1092	; 0x444
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_TIM_Base_Stop_IT+0x48>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e041      	b.n	8003178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d106      	bne.n	800310e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f839 	bl	8003180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 fba1 	bl	8003868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start+0x24>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e022      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d109      	bne.n	80031d2 <HAL_TIM_PWM_Start+0x3e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	bf14      	ite	ne
 80031ca:	2301      	movne	r3, #1
 80031cc:	2300      	moveq	r3, #0
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	e015      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start+0x58>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e008      	b.n	80031fe <HAL_TIM_PWM_Start+0x6a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e068      	b.n	80032d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0x82>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003214:	e013      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b04      	cmp	r3, #4
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0x92>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003224:	e00b      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0xa2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003234:	e003      	b.n	800323e <HAL_TIM_PWM_Start+0xaa>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fdb4 	bl	8003db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a23      	ldr	r2, [pc, #140]	; (80032e0 <HAL_TIM_PWM_Start+0x14c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d107      	bne.n	8003266 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <HAL_TIM_PWM_Start+0x14c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003278:	d013      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <HAL_TIM_PWM_Start+0x150>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a17      	ldr	r2, [pc, #92]	; (80032e8 <HAL_TIM_PWM_Start+0x154>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_TIM_PWM_Start+0x158>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x10e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a14      	ldr	r2, [pc, #80]	; (80032f0 <HAL_TIM_PWM_Start+0x15c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d111      	bne.n	80032c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b06      	cmp	r3, #6
 80032b2:	d010      	beq.n	80032d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0201 	orr.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c4:	e007      	b.n	80032d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40000c00 	.word	0x40000c00
 80032f0:	40014000 	.word	0x40014000

080032f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b02      	cmp	r3, #2
 8003308:	d122      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b02      	cmp	r3, #2
 8003316:	d11b      	bne.n	8003350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0202 	mvn.w	r2, #2
 8003320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa77 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa69 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa7a 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b04      	cmp	r3, #4
 800335c:	d122      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0204 	mvn.w	r2, #4
 8003374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fa4d 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa3f 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa50 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d122      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f003 0308 	and.w	r3, r3, #8
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d11b      	bne.n	80033f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f06f 0208 	mvn.w	r2, #8
 80033c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2204      	movs	r2, #4
 80033ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa23 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 80033e4:	e005      	b.n	80033f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa15 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 fa26 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	2b10      	cmp	r3, #16
 8003404:	d122      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b10      	cmp	r3, #16
 8003412:	d11b      	bne.n	800344c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0210 	mvn.w	r2, #16
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2208      	movs	r2, #8
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9f9 	bl	800382a <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9eb 	bl	8003816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f9fc 	bl	800383e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10e      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d107      	bne.n	8003478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0201 	mvn.w	r2, #1
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fd f882 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b80      	cmp	r3, #128	; 0x80
 8003484:	d10e      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003490:	2b80      	cmp	r3, #128	; 0x80
 8003492:	d107      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800349c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fd78 	bl	8003f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9c1 	bl	8003852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0220 	mvn.w	r2, #32
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fd42 	bl	8003f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800351e:	2302      	movs	r3, #2
 8003520:	e0ae      	b.n	8003680 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b0c      	cmp	r3, #12
 800352e:	f200 809f 	bhi.w	8003670 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003671 	.word	0x08003671
 8003540:	08003671 	.word	0x08003671
 8003544:	08003671 	.word	0x08003671
 8003548:	080035ad 	.word	0x080035ad
 800354c:	08003671 	.word	0x08003671
 8003550:	08003671 	.word	0x08003671
 8003554:	08003671 	.word	0x08003671
 8003558:	080035ef 	.word	0x080035ef
 800355c:	08003671 	.word	0x08003671
 8003560:	08003671 	.word	0x08003671
 8003564:	08003671 	.word	0x08003671
 8003568:	0800362f 	.word	0x0800362f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f9f8 	bl	8003968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e064      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fa3e 	bl	8003a34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
      break;
 80035ec:	e043      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fa89 	bl	8003b0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0208 	orr.w	r2, r2, #8
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
      break;
 800362c:	e023      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fad3 	bl	8003be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	61da      	str	r2, [r3, #28]
      break;
 800366e:	e002      	b.n	8003676 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	75fb      	strb	r3, [r7, #23]
      break;
 8003674:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800367e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_ConfigClockSource+0x1c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e0b4      	b.n	800380e <HAL_TIM_ConfigClockSource+0x186>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036dc:	d03e      	beq.n	800375c <HAL_TIM_ConfigClockSource+0xd4>
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e2:	f200 8087 	bhi.w	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	f000 8086 	beq.w	80037fa <HAL_TIM_ConfigClockSource+0x172>
 80036ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f2:	d87f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036f4:	2b70      	cmp	r3, #112	; 0x70
 80036f6:	d01a      	beq.n	800372e <HAL_TIM_ConfigClockSource+0xa6>
 80036f8:	2b70      	cmp	r3, #112	; 0x70
 80036fa:	d87b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 80036fc:	2b60      	cmp	r3, #96	; 0x60
 80036fe:	d050      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003700:	2b60      	cmp	r3, #96	; 0x60
 8003702:	d877      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b50      	cmp	r3, #80	; 0x50
 8003706:	d03c      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xfa>
 8003708:	2b50      	cmp	r3, #80	; 0x50
 800370a:	d873      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d058      	beq.n	80037c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d86f      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b30      	cmp	r3, #48	; 0x30
 8003716:	d064      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003718:	2b30      	cmp	r3, #48	; 0x30
 800371a:	d86b      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b20      	cmp	r3, #32
 800371e:	d060      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003720:	2b20      	cmp	r3, #32
 8003722:	d867      	bhi.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d05c      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003728:	2b10      	cmp	r3, #16
 800372a:	d05a      	beq.n	80037e2 <HAL_TIM_ConfigClockSource+0x15a>
 800372c:	e062      	b.n	80037f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f000 fb19 	bl	8003d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	609a      	str	r2, [r3, #8]
      break;
 800375a:	e04f      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f000 fb02 	bl	8003d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800377e:	609a      	str	r2, [r3, #8]
      break;
 8003780:	e03c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	461a      	mov	r2, r3
 8003790:	f000 fa76 	bl	8003c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2150      	movs	r1, #80	; 0x50
 800379a:	4618      	mov	r0, r3
 800379c:	f000 facf 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80037a0:	e02c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f000 fa95 	bl	8003cde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2160      	movs	r1, #96	; 0x60
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fabf 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80037c0:	e01c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	461a      	mov	r2, r3
 80037d0:	f000 fa56 	bl	8003c80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 faaf 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80037e0:	e00c      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4619      	mov	r1, r3
 80037ec:	4610      	mov	r0, r2
 80037ee:	f000 faa6 	bl	8003d3e <TIM_ITRx_SetConfig>
      break;
 80037f2:	e003      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	e000      	b.n	80037fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a34      	ldr	r2, [pc, #208]	; (800394c <TIM_Base_SetConfig+0xe4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a31      	ldr	r2, [pc, #196]	; (8003950 <TIM_Base_SetConfig+0xe8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a30      	ldr	r2, [pc, #192]	; (8003954 <TIM_Base_SetConfig+0xec>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x38>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a2f      	ldr	r2, [pc, #188]	; (8003958 <TIM_Base_SetConfig+0xf0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a25      	ldr	r2, [pc, #148]	; (800394c <TIM_Base_SetConfig+0xe4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d01b      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d017      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a22      	ldr	r2, [pc, #136]	; (8003950 <TIM_Base_SetConfig+0xe8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <TIM_Base_SetConfig+0xec>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a20      	ldr	r2, [pc, #128]	; (8003958 <TIM_Base_SetConfig+0xf0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1f      	ldr	r2, [pc, #124]	; (800395c <TIM_Base_SetConfig+0xf4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <TIM_Base_SetConfig+0xf8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_Base_SetConfig+0x8a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <TIM_Base_SetConfig+0xfc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <TIM_Base_SetConfig+0xe4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d103      	bne.n	8003938 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	615a      	str	r2, [r3, #20]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000
 8003950:	40000400 	.word	0x40000400
 8003954:	40000800 	.word	0x40000800
 8003958:	40000c00 	.word	0x40000c00
 800395c:	40014000 	.word	0x40014000
 8003960:	40014400 	.word	0x40014400
 8003964:	40014800 	.word	0x40014800

08003968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	f023 0201 	bic.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f023 0302 	bic.w	r3, r3, #2
 80039b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <TIM_OC1_SetConfig+0xc8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10c      	bne.n	80039de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0308 	bic.w	r3, r3, #8
 80039ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f023 0304 	bic.w	r3, r3, #4
 80039dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <TIM_OC1_SetConfig+0xc8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d111      	bne.n	8003a0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	621a      	str	r2, [r3, #32]
}
 8003a24:	bf00      	nop
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	40010000 	.word	0x40010000

08003a34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	f023 0210 	bic.w	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	021b      	lsls	r3, r3, #8
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0320 	bic.w	r3, r3, #32
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <TIM_OC2_SetConfig+0xd4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d10d      	bne.n	8003ab0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <TIM_OC2_SetConfig+0xd4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d113      	bne.n	8003ae0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	621a      	str	r2, [r3, #32]
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40010000 	.word	0x40010000

08003b0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <TIM_OC3_SetConfig+0xd0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10d      	bne.n	8003b86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	021b      	lsls	r3, r3, #8
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <TIM_OC3_SetConfig+0xd0>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d113      	bne.n	8003bb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	621a      	str	r2, [r3, #32]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40010000 	.word	0x40010000

08003be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	021b      	lsls	r3, r3, #8
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	031b      	lsls	r3, r3, #12
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <TIM_OC4_SetConfig+0x9c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d109      	bne.n	8003c54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40010000 	.word	0x40010000

08003c80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003caa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f023 030a 	bic.w	r3, r3, #10
 8003cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b087      	sub	sp, #28
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	f023 0210 	bic.w	r2, r3, #16
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	621a      	str	r2, [r3, #32]
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b085      	sub	sp, #20
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f043 0307 	orr.w	r3, r3, #7
 8003d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	609a      	str	r2, [r3, #8]
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1a      	ldr	r2, [r3, #32]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1a      	ldr	r2, [r3, #32]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e050      	b.n	8003eba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d018      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e64:	d013      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d00e      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d004      	beq.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a13      	ldr	r2, [pc, #76]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40014000 	.word	0x40014000

08003edc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e03d      	b.n	8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e03f      	b.n	800403a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd f9f2 	bl	80013b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 ff9b 	bl	8004f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b08a      	sub	sp, #40	; 0x28
 8004046:	af02      	add	r7, sp, #8
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	603b      	str	r3, [r7, #0]
 800404e:	4613      	mov	r3, r2
 8004050:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b20      	cmp	r3, #32
 8004060:	d17c      	bne.n	800415c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_UART_Transmit+0x2c>
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e075      	b.n	800415e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_UART_Transmit+0x3e>
 800407c:	2302      	movs	r3, #2
 800407e:	e06e      	b.n	800415e <HAL_UART_Transmit+0x11c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2221      	movs	r2, #33	; 0x21
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fd fc2d 	bl	80018f4 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b0:	d108      	bne.n	80040c4 <HAL_UART_Transmit+0x82>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	61bb      	str	r3, [r7, #24]
 80040c2:	e003      	b.n	80040cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040d4:	e02a      	b.n	800412c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	9300      	str	r3, [sp, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2200      	movs	r2, #0
 80040de:	2180      	movs	r1, #128	; 0x80
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fc53 	bl	800498c <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e036      	b.n	800415e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	3302      	adds	r3, #2
 800410a:	61bb      	str	r3, [r7, #24]
 800410c:	e007      	b.n	800411e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3301      	adds	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1cf      	bne.n	80040d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2200      	movs	r2, #0
 800413e:	2140      	movs	r1, #64	; 0x40
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 fc23 	bl	800498c <UART_WaitOnFlagUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b08c      	sub	sp, #48	; 0x30
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	4613      	mov	r3, r2
 8004172:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d152      	bne.n	8004226 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e04b      	b.n	8004228 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800419a:	2302      	movs	r3, #2
 800419c:	e044      	b.n	8004228 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	461a      	mov	r2, r3
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fc58 	bl	8004a68 <UART_Start_Receive_DMA>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80041be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d12c      	bne.n	8004220 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d125      	bne.n	800421a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	617b      	str	r3, [r7, #20]
   return(result);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f043 0310 	orr.w	r3, r3, #16
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004204:	627a      	str	r2, [r7, #36]	; 0x24
 8004206:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6a39      	ldr	r1, [r7, #32]
 800420a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	61fb      	str	r3, [r7, #28]
   return(result);
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004218:	e002      	b.n	8004220 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004220:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004224:	e000      	b.n	8004228 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004226:	2302      	movs	r3, #2
  }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3730      	adds	r7, #48	; 0x30
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b0ba      	sub	sp, #232	; 0xe8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800425c:	2300      	movs	r3, #0
 800425e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800426e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d009      	beq.n	8004296 <HAL_UART_IRQHandler+0x66>
 8004282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 fd8f 	bl	8004db2 <UART_Receive_IT>
      return;
 8004294:	e256      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 80de 	beq.w	800445c <HAL_UART_IRQHandler+0x22c>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 80d1 	beq.w	800445c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <HAL_UART_IRQHandler+0xae>
 80042c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_UART_IRQHandler+0xd2>
 80042ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f043 0202 	orr.w	r2, r3, #2
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_UART_IRQHandler+0xf6>
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f043 0204 	orr.w	r2, r3, #4
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d011      	beq.n	8004356 <HAL_UART_IRQHandler+0x126>
 8004332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800433e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f043 0208 	orr.w	r2, r3, #8
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 81ed 	beq.w	800473a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_UART_IRQHandler+0x14e>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fd1a 	bl	8004db2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	bf0c      	ite	eq
 800438c:	2301      	moveq	r3, #1
 800438e:	2300      	movne	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d103      	bne.n	80043aa <HAL_UART_IRQHandler+0x17a>
 80043a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04f      	beq.n	800444a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fc22 	bl	8004bf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ba:	2b40      	cmp	r3, #64	; 0x40
 80043bc:	d141      	bne.n	8004442 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3314      	adds	r3, #20
 80043c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1d9      	bne.n	80043be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	2b00      	cmp	r3, #0
 8004410:	d013      	beq.n	800443a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	4a7d      	ldr	r2, [pc, #500]	; (800460c <HAL_UART_IRQHandler+0x3dc>)
 8004418:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fcfc 	bl	8001e1c <HAL_DMA_Abort_IT>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004434:	4610      	mov	r0, r2
 8004436:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e00e      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f9a4 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004440:	e00a      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9a0 	bl	8004788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e006      	b.n	8004458 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f99c 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004456:	e170      	b.n	800473a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	bf00      	nop
    return;
 800445a:	e16e      	b.n	800473a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	2b01      	cmp	r3, #1
 8004462:	f040 814a 	bne.w	80046fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 8143 	beq.w	80046fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 813c 	beq.w	80046fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004482:	2300      	movs	r3, #0
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	f040 80b4 	bne.w	8004610 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8140 	beq.w	800473e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044c6:	429a      	cmp	r2, r3
 80044c8:	f080 8139 	bcs.w	800473e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044de:	f000 8088 	beq.w	80045f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f0:	e853 3f00 	ldrex	r3, [r3]
 80044f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800450e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800451a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1d9      	bne.n	80044e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3314      	adds	r3, #20
 8004534:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800453e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3314      	adds	r3, #20
 800454e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004552:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004556:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800455a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004564:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e1      	bne.n	800452e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800457a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800458e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004590:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004594:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800459c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e3      	bne.n	800456a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	330c      	adds	r3, #12
 80045d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80045d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e3      	bne.n	80045b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fd fba5 	bl	8001d3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	4619      	mov	r1, r3
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7fb fff6 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004608:	e099      	b.n	800473e <HAL_UART_IRQHandler+0x50e>
 800460a:	bf00      	nop
 800460c:	08004cbb 	.word	0x08004cbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 808b 	beq.w	8004742 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800462c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8086 	beq.w	8004742 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	330c      	adds	r3, #12
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004648:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800464c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	330c      	adds	r3, #12
 8004656:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800465a:	647a      	str	r2, [r7, #68]	; 0x44
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e3      	bne.n	8004636 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	623b      	str	r3, [r7, #32]
   return(result);
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3314      	adds	r3, #20
 800468e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004692:	633a      	str	r2, [r7, #48]	; 0x30
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e3      	bne.n	800466e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0310 	bic.w	r3, r3, #16
 80046ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046d8:	61fa      	str	r2, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	69b9      	ldr	r1, [r7, #24]
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	617b      	str	r3, [r7, #20]
   return(result);
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e3      	bne.n	80046b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fb ff7e 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046f8:	e023      	b.n	8004742 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_UART_IRQHandler+0x4ea>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 fae5 	bl	8004ce2 <UART_Transmit_IT>
    return;
 8004718:	e014      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <HAL_UART_IRQHandler+0x514>
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fb25 	bl	8004d82 <UART_EndTransmit_IT>
    return;
 8004738:	e004      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
    return;
 800473a:	bf00      	nop
 800473c:	e002      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
      return;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <HAL_UART_IRQHandler+0x514>
      return;
 8004742:	bf00      	nop
  }
}
 8004744:	37e8      	adds	r7, #232	; 0xe8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop

0800474c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b09c      	sub	sp, #112	; 0x70
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d172      	bne.n	800489e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80047b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ba:	2200      	movs	r2, #0
 80047bc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c8:	e853 3f00 	ldrex	r3, [r3]
 80047cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047de:	65ba      	str	r2, [r7, #88]	; 0x58
 80047e0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047e6:	e841 2300 	strex	r3, r2, [r1]
 80047ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e5      	bne.n	80047be <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004804:	f023 0301 	bic.w	r3, r3, #1
 8004808:	667b      	str	r3, [r7, #100]	; 0x64
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004812:	647a      	str	r2, [r7, #68]	; 0x44
 8004814:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e5      	bne.n	80047f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	e853 3f00 	ldrex	r3, [r3]
 8004834:	623b      	str	r3, [r7, #32]
   return(result);
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800483c:	663b      	str	r3, [r7, #96]	; 0x60
 800483e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3314      	adds	r3, #20
 8004844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004846:	633a      	str	r2, [r7, #48]	; 0x30
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800484c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e5      	bne.n	8004826 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	2b01      	cmp	r3, #1
 8004868:	d119      	bne.n	800489e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	60fb      	str	r3, [r7, #12]
   return(result);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f023 0310 	bic.w	r3, r3, #16
 8004880:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800488a:	61fa      	str	r2, [r7, #28]
 800488c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	69b9      	ldr	r1, [r7, #24]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	617b      	str	r3, [r7, #20]
   return(result);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e5      	bne.n	800486a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d106      	bne.n	80048b4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048aa:	4619      	mov	r1, r3
 80048ac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048ae:	f7fb fea1 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048b2:	e002      	b.n	80048ba <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80048b4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048b6:	f7ff ff53 	bl	8004760 <HAL_UART_RxCpltCallback>
}
 80048ba:	bf00      	nop
 80048bc:	3770      	adds	r7, #112	; 0x70
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d108      	bne.n	80048ea <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7fb fe86 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048e8:	e002      	b.n	80048f0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f7ff ff42 	bl	8004774 <HAL_UART_RxHalfCpltCallback>
}
 80048f0:	bf00      	nop
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b21      	cmp	r3, #33	; 0x21
 800492a:	d108      	bne.n	800493e <UART_DMAError+0x46>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d005      	beq.n	800493e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2200      	movs	r2, #0
 8004936:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f000 f933 	bl	8004ba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004948:	2b40      	cmp	r3, #64	; 0x40
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b22      	cmp	r3, #34	; 0x22
 800495e:	d108      	bne.n	8004972 <UART_DMAError+0x7a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2200      	movs	r2, #0
 800496a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800496c:	68b8      	ldr	r0, [r7, #8]
 800496e:	f000 f941 	bl	8004bf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f043 0210 	orr.w	r2, r3, #16
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800497e:	68b8      	ldr	r0, [r7, #8]
 8004980:	f7ff ff02 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b090      	sub	sp, #64	; 0x40
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	e050      	b.n	8004a40 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d04c      	beq.n	8004a40 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <UART_WaitOnFlagUntilTimeout+0x30>
 80049ac:	f7fc ffa2 	bl	80018f4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d241      	bcs.n	8004a40 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	330c      	adds	r3, #12
 80049da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049dc:	637a      	str	r2, [r7, #52]	; 0x34
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3314      	adds	r3, #20
 80049f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f023 0301 	bic.w	r3, r3, #1
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a10:	623a      	str	r2, [r7, #32]
 8004a12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	69f9      	ldr	r1, [r7, #28]
 8004a16:	6a3a      	ldr	r2, [r7, #32]
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e5      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e00f      	b.n	8004a60 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d09f      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3740      	adds	r7, #64	; 0x40
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b098      	sub	sp, #96	; 0x60
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	88fa      	ldrh	r2, [r7, #6]
 8004a80:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2222      	movs	r2, #34	; 0x22
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <UART_Start_Receive_DMA+0x130>)
 8004a96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	; (8004b9c <UART_Start_Receive_DMA+0x134>)
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	4a3e      	ldr	r2, [pc, #248]	; (8004ba0 <UART_Start_Receive_DMA+0x138>)
 8004aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	2200      	movs	r2, #0
 8004aae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ab0:	f107 0308 	add.w	r3, r7, #8
 8004ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	f7fd f8e0 	bl	8001c8c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004acc:	2300      	movs	r3, #0
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d019      	beq.n	8004b26 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	330c      	adds	r3, #12
 8004af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	330c      	adds	r3, #12
 8004b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b12:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	f043 0301 	orr.w	r3, r3, #1
 8004b3c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b46:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e5      	bne.n	8004b26 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3314      	adds	r3, #20
 8004b60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	653b      	str	r3, [r7, #80]	; 0x50
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3314      	adds	r3, #20
 8004b78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b7a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6a39      	ldr	r1, [r7, #32]
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3760      	adds	r7, #96	; 0x60
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	0800479d 	.word	0x0800479d
 8004b9c:	080048c3 	.word	0x080048c3
 8004ba0:	080048f9 	.word	0x080048f9

08004ba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	330c      	adds	r3, #12
 8004bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	69fa      	ldr	r2, [r7, #28]
 8004bcc:	61ba      	str	r2, [r7, #24]
 8004bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e5      	bne.n	8004bac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004be8:	bf00      	nop
 8004bea:	3724      	adds	r7, #36	; 0x24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b095      	sub	sp, #84	; 0x54
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	330c      	adds	r3, #12
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c1c:	643a      	str	r2, [r7, #64]	; 0x40
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e5      	bne.n	8004bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3314      	adds	r3, #20
 8004c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e5      	bne.n	8004c30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d119      	bne.n	8004ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f023 0310 	bic.w	r3, r3, #16
 8004c82:	647b      	str	r3, [r7, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8c:	61ba      	str	r2, [r7, #24]
 8004c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6979      	ldr	r1, [r7, #20]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cae:	bf00      	nop
 8004cb0:	3754      	adds	r7, #84	; 0x54
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff fd57 	bl	8004788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b21      	cmp	r3, #33	; 0x21
 8004cf4:	d13e      	bne.n	8004d74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfe:	d114      	bne.n	8004d2a <UART_Transmit_IT+0x48>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d110      	bne.n	8004d2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	1c9a      	adds	r2, r3, #2
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	621a      	str	r2, [r3, #32]
 8004d28:	e008      	b.n	8004d3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6211      	str	r1, [r2, #32]
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e000      	b.n	8004d76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d74:	2302      	movs	r3, #2
  }
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fcd2 	bl	800474c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b08c      	sub	sp, #48	; 0x30
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b22      	cmp	r3, #34	; 0x22
 8004dc4:	f040 80ab 	bne.w	8004f1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd0:	d117      	bne.n	8004e02 <UART_Receive_IT+0x50>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d113      	bne.n	8004e02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8004e00:	e026      	b.n	8004e50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e14:	d007      	beq.n	8004e26 <UART_Receive_IT+0x74>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <UART_Receive_IT+0x82>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d106      	bne.n	8004e34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e008      	b.n	8004e46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d15a      	bne.n	8004f1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0220 	bic.w	r2, r2, #32
 8004e72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0201 	bic.w	r2, r2, #1
 8004e92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d135      	bne.n	8004f10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f023 0310 	bic.w	r3, r3, #16
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	623a      	str	r2, [r7, #32]
 8004ecc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	69f9      	ldr	r1, [r7, #28]
 8004ed0:	6a3a      	ldr	r2, [r7, #32]
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e5      	bne.n	8004eaa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d10a      	bne.n	8004f02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fb fb73 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
 8004f0e:	e002      	b.n	8004f16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fc25 	bl	8004760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	e002      	b.n	8004f20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	e000      	b.n	8004f20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3730      	adds	r7, #48	; 0x30
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f2c:	b0c0      	sub	sp, #256	; 0x100
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	ea40 0301 	orr.w	r3, r0, r1
 8004f50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f80:	f021 010c 	bic.w	r1, r1, #12
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa2:	6999      	ldr	r1, [r3, #24]
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	ea40 0301 	orr.w	r3, r0, r1
 8004fae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	4b8f      	ldr	r3, [pc, #572]	; (80051f4 <UART_SetConfig+0x2cc>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d005      	beq.n	8004fc8 <UART_SetConfig+0xa0>
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	; (80051f8 <UART_SetConfig+0x2d0>)
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d104      	bne.n	8004fd2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fc8:	f7fd ff96 	bl	8002ef8 <HAL_RCC_GetPCLK2Freq>
 8004fcc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fd0:	e003      	b.n	8004fda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fd2:	f7fd ff7d 	bl	8002ed0 <HAL_RCC_GetPCLK1Freq>
 8004fd6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe4:	f040 810c 	bne.w	8005200 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fec:	2200      	movs	r2, #0
 8004fee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ff2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ff6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	1891      	adds	r1, r2, r2
 8005000:	65b9      	str	r1, [r7, #88]	; 0x58
 8005002:	415b      	adcs	r3, r3
 8005004:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005006:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800500a:	4621      	mov	r1, r4
 800500c:	eb12 0801 	adds.w	r8, r2, r1
 8005010:	4629      	mov	r1, r5
 8005012:	eb43 0901 	adc.w	r9, r3, r1
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005022:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005026:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800502a:	4690      	mov	r8, r2
 800502c:	4699      	mov	r9, r3
 800502e:	4623      	mov	r3, r4
 8005030:	eb18 0303 	adds.w	r3, r8, r3
 8005034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005038:	462b      	mov	r3, r5
 800503a:	eb49 0303 	adc.w	r3, r9, r3
 800503e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800504e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005052:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005056:	460b      	mov	r3, r1
 8005058:	18db      	adds	r3, r3, r3
 800505a:	653b      	str	r3, [r7, #80]	; 0x50
 800505c:	4613      	mov	r3, r2
 800505e:	eb42 0303 	adc.w	r3, r2, r3
 8005062:	657b      	str	r3, [r7, #84]	; 0x54
 8005064:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005068:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800506c:	f7fb f908 	bl	8000280 <__aeabi_uldivmod>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	4b61      	ldr	r3, [pc, #388]	; (80051fc <UART_SetConfig+0x2d4>)
 8005076:	fba3 2302 	umull	r2, r3, r3, r2
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	011c      	lsls	r4, r3, #4
 800507e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005082:	2200      	movs	r2, #0
 8005084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005088:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800508c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005090:	4642      	mov	r2, r8
 8005092:	464b      	mov	r3, r9
 8005094:	1891      	adds	r1, r2, r2
 8005096:	64b9      	str	r1, [r7, #72]	; 0x48
 8005098:	415b      	adcs	r3, r3
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800509c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050a0:	4641      	mov	r1, r8
 80050a2:	eb12 0a01 	adds.w	sl, r2, r1
 80050a6:	4649      	mov	r1, r9
 80050a8:	eb43 0b01 	adc.w	fp, r3, r1
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	f04f 0300 	mov.w	r3, #0
 80050b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050c0:	4692      	mov	sl, r2
 80050c2:	469b      	mov	fp, r3
 80050c4:	4643      	mov	r3, r8
 80050c6:	eb1a 0303 	adds.w	r3, sl, r3
 80050ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050ce:	464b      	mov	r3, r9
 80050d0:	eb4b 0303 	adc.w	r3, fp, r3
 80050d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050ec:	460b      	mov	r3, r1
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	643b      	str	r3, [r7, #64]	; 0x40
 80050f2:	4613      	mov	r3, r2
 80050f4:	eb42 0303 	adc.w	r3, r2, r3
 80050f8:	647b      	str	r3, [r7, #68]	; 0x44
 80050fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005102:	f7fb f8bd 	bl	8000280 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4611      	mov	r1, r2
 800510c:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <UART_SetConfig+0x2d4>)
 800510e:	fba3 2301 	umull	r2, r3, r3, r1
 8005112:	095b      	lsrs	r3, r3, #5
 8005114:	2264      	movs	r2, #100	; 0x64
 8005116:	fb02 f303 	mul.w	r3, r2, r3
 800511a:	1acb      	subs	r3, r1, r3
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005122:	4b36      	ldr	r3, [pc, #216]	; (80051fc <UART_SetConfig+0x2d4>)
 8005124:	fba3 2302 	umull	r2, r3, r3, r2
 8005128:	095b      	lsrs	r3, r3, #5
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005130:	441c      	add	r4, r3
 8005132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800513c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005140:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005144:	4642      	mov	r2, r8
 8005146:	464b      	mov	r3, r9
 8005148:	1891      	adds	r1, r2, r2
 800514a:	63b9      	str	r1, [r7, #56]	; 0x38
 800514c:	415b      	adcs	r3, r3
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005150:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005154:	4641      	mov	r1, r8
 8005156:	1851      	adds	r1, r2, r1
 8005158:	6339      	str	r1, [r7, #48]	; 0x30
 800515a:	4649      	mov	r1, r9
 800515c:	414b      	adcs	r3, r1
 800515e:	637b      	str	r3, [r7, #52]	; 0x34
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800516c:	4659      	mov	r1, fp
 800516e:	00cb      	lsls	r3, r1, #3
 8005170:	4651      	mov	r1, sl
 8005172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005176:	4651      	mov	r1, sl
 8005178:	00ca      	lsls	r2, r1, #3
 800517a:	4610      	mov	r0, r2
 800517c:	4619      	mov	r1, r3
 800517e:	4603      	mov	r3, r0
 8005180:	4642      	mov	r2, r8
 8005182:	189b      	adds	r3, r3, r2
 8005184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005188:	464b      	mov	r3, r9
 800518a:	460a      	mov	r2, r1
 800518c:	eb42 0303 	adc.w	r3, r2, r3
 8005190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051a8:	460b      	mov	r3, r1
 80051aa:	18db      	adds	r3, r3, r3
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ae:	4613      	mov	r3, r2
 80051b0:	eb42 0303 	adc.w	r3, r2, r3
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051be:	f7fb f85f 	bl	8000280 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4b0d      	ldr	r3, [pc, #52]	; (80051fc <UART_SetConfig+0x2d4>)
 80051c8:	fba3 1302 	umull	r1, r3, r3, r2
 80051cc:	095b      	lsrs	r3, r3, #5
 80051ce:	2164      	movs	r1, #100	; 0x64
 80051d0:	fb01 f303 	mul.w	r3, r1, r3
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	3332      	adds	r3, #50	; 0x32
 80051da:	4a08      	ldr	r2, [pc, #32]	; (80051fc <UART_SetConfig+0x2d4>)
 80051dc:	fba2 2303 	umull	r2, r3, r2, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	f003 0207 	and.w	r2, r3, #7
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4422      	add	r2, r4
 80051ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051f0:	e106      	b.n	8005400 <UART_SetConfig+0x4d8>
 80051f2:	bf00      	nop
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40011400 	.word	0x40011400
 80051fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005200:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800520a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800520e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005212:	4642      	mov	r2, r8
 8005214:	464b      	mov	r3, r9
 8005216:	1891      	adds	r1, r2, r2
 8005218:	6239      	str	r1, [r7, #32]
 800521a:	415b      	adcs	r3, r3
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005222:	4641      	mov	r1, r8
 8005224:	1854      	adds	r4, r2, r1
 8005226:	4649      	mov	r1, r9
 8005228:	eb43 0501 	adc.w	r5, r3, r1
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	00eb      	lsls	r3, r5, #3
 8005236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800523a:	00e2      	lsls	r2, r4, #3
 800523c:	4614      	mov	r4, r2
 800523e:	461d      	mov	r5, r3
 8005240:	4643      	mov	r3, r8
 8005242:	18e3      	adds	r3, r4, r3
 8005244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005248:	464b      	mov	r3, r9
 800524a:	eb45 0303 	adc.w	r3, r5, r3
 800524e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800525e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800526e:	4629      	mov	r1, r5
 8005270:	008b      	lsls	r3, r1, #2
 8005272:	4621      	mov	r1, r4
 8005274:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005278:	4621      	mov	r1, r4
 800527a:	008a      	lsls	r2, r1, #2
 800527c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005280:	f7fa fffe 	bl	8000280 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4b60      	ldr	r3, [pc, #384]	; (800540c <UART_SetConfig+0x4e4>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	011c      	lsls	r4, r3, #4
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800529c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	61b9      	str	r1, [r7, #24]
 80052ac:	415b      	adcs	r3, r3
 80052ae:	61fb      	str	r3, [r7, #28]
 80052b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052b4:	4641      	mov	r1, r8
 80052b6:	1851      	adds	r1, r2, r1
 80052b8:	6139      	str	r1, [r7, #16]
 80052ba:	4649      	mov	r1, r9
 80052bc:	414b      	adcs	r3, r1
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052cc:	4659      	mov	r1, fp
 80052ce:	00cb      	lsls	r3, r1, #3
 80052d0:	4651      	mov	r1, sl
 80052d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052d6:	4651      	mov	r1, sl
 80052d8:	00ca      	lsls	r2, r1, #3
 80052da:	4610      	mov	r0, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	4603      	mov	r3, r0
 80052e0:	4642      	mov	r2, r8
 80052e2:	189b      	adds	r3, r3, r2
 80052e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052e8:	464b      	mov	r3, r9
 80052ea:	460a      	mov	r2, r1
 80052ec:	eb42 0303 	adc.w	r3, r2, r3
 80052f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800530c:	4649      	mov	r1, r9
 800530e:	008b      	lsls	r3, r1, #2
 8005310:	4641      	mov	r1, r8
 8005312:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005316:	4641      	mov	r1, r8
 8005318:	008a      	lsls	r2, r1, #2
 800531a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800531e:	f7fa ffaf 	bl	8000280 <__aeabi_uldivmod>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4611      	mov	r1, r2
 8005328:	4b38      	ldr	r3, [pc, #224]	; (800540c <UART_SetConfig+0x4e4>)
 800532a:	fba3 2301 	umull	r2, r3, r3, r1
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	2264      	movs	r2, #100	; 0x64
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	1acb      	subs	r3, r1, r3
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	3332      	adds	r3, #50	; 0x32
 800533c:	4a33      	ldr	r2, [pc, #204]	; (800540c <UART_SetConfig+0x4e4>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005348:	441c      	add	r4, r3
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	673b      	str	r3, [r7, #112]	; 0x70
 8005352:	677a      	str	r2, [r7, #116]	; 0x74
 8005354:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	415b      	adcs	r3, r3
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005368:	4641      	mov	r1, r8
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6039      	str	r1, [r7, #0]
 800536e:	4649      	mov	r1, r9
 8005370:	414b      	adcs	r3, r1
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005380:	4659      	mov	r1, fp
 8005382:	00cb      	lsls	r3, r1, #3
 8005384:	4651      	mov	r1, sl
 8005386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538a:	4651      	mov	r1, sl
 800538c:	00ca      	lsls	r2, r1, #3
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	4603      	mov	r3, r0
 8005394:	4642      	mov	r2, r8
 8005396:	189b      	adds	r3, r3, r2
 8005398:	66bb      	str	r3, [r7, #104]	; 0x68
 800539a:	464b      	mov	r3, r9
 800539c:	460a      	mov	r2, r1
 800539e:	eb42 0303 	adc.w	r3, r2, r3
 80053a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	663b      	str	r3, [r7, #96]	; 0x60
 80053ae:	667a      	str	r2, [r7, #100]	; 0x64
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053bc:	4649      	mov	r1, r9
 80053be:	008b      	lsls	r3, r1, #2
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c6:	4641      	mov	r1, r8
 80053c8:	008a      	lsls	r2, r1, #2
 80053ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053ce:	f7fa ff57 	bl	8000280 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4b0d      	ldr	r3, [pc, #52]	; (800540c <UART_SetConfig+0x4e4>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	; 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	3332      	adds	r3, #50	; 0x32
 80053ea:	4a08      	ldr	r2, [pc, #32]	; (800540c <UART_SetConfig+0x4e4>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f003 020f 	and.w	r2, r3, #15
 80053f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4422      	add	r2, r4
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005406:	46bd      	mov	sp, r7
 8005408:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540c:	51eb851f 	.word	0x51eb851f

08005410 <atoi>:
 8005410:	220a      	movs	r2, #10
 8005412:	2100      	movs	r1, #0
 8005414:	f000 b882 	b.w	800551c <strtol>

08005418 <_strtol_l.constprop.0>:
 8005418:	2b01      	cmp	r3, #1
 800541a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541e:	d001      	beq.n	8005424 <_strtol_l.constprop.0+0xc>
 8005420:	2b24      	cmp	r3, #36	; 0x24
 8005422:	d906      	bls.n	8005432 <_strtol_l.constprop.0+0x1a>
 8005424:	f000 f8ac 	bl	8005580 <__errno>
 8005428:	2316      	movs	r3, #22
 800542a:	6003      	str	r3, [r0, #0]
 800542c:	2000      	movs	r0, #0
 800542e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005432:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005518 <_strtol_l.constprop.0+0x100>
 8005436:	460d      	mov	r5, r1
 8005438:	462e      	mov	r6, r5
 800543a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800543e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005442:	f017 0708 	ands.w	r7, r7, #8
 8005446:	d1f7      	bne.n	8005438 <_strtol_l.constprop.0+0x20>
 8005448:	2c2d      	cmp	r4, #45	; 0x2d
 800544a:	d132      	bne.n	80054b2 <_strtol_l.constprop.0+0x9a>
 800544c:	782c      	ldrb	r4, [r5, #0]
 800544e:	2701      	movs	r7, #1
 8005450:	1cb5      	adds	r5, r6, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d05b      	beq.n	800550e <_strtol_l.constprop.0+0xf6>
 8005456:	2b10      	cmp	r3, #16
 8005458:	d109      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800545a:	2c30      	cmp	r4, #48	; 0x30
 800545c:	d107      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800545e:	782c      	ldrb	r4, [r5, #0]
 8005460:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005464:	2c58      	cmp	r4, #88	; 0x58
 8005466:	d14d      	bne.n	8005504 <_strtol_l.constprop.0+0xec>
 8005468:	786c      	ldrb	r4, [r5, #1]
 800546a:	2310      	movs	r3, #16
 800546c:	3502      	adds	r5, #2
 800546e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005472:	f108 38ff 	add.w	r8, r8, #4294967295
 8005476:	f04f 0e00 	mov.w	lr, #0
 800547a:	fbb8 f9f3 	udiv	r9, r8, r3
 800547e:	4676      	mov	r6, lr
 8005480:	fb03 8a19 	mls	sl, r3, r9, r8
 8005484:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005488:	f1bc 0f09 	cmp.w	ip, #9
 800548c:	d816      	bhi.n	80054bc <_strtol_l.constprop.0+0xa4>
 800548e:	4664      	mov	r4, ip
 8005490:	42a3      	cmp	r3, r4
 8005492:	dd24      	ble.n	80054de <_strtol_l.constprop.0+0xc6>
 8005494:	f1be 3fff 	cmp.w	lr, #4294967295
 8005498:	d008      	beq.n	80054ac <_strtol_l.constprop.0+0x94>
 800549a:	45b1      	cmp	r9, r6
 800549c:	d31c      	bcc.n	80054d8 <_strtol_l.constprop.0+0xc0>
 800549e:	d101      	bne.n	80054a4 <_strtol_l.constprop.0+0x8c>
 80054a0:	45a2      	cmp	sl, r4
 80054a2:	db19      	blt.n	80054d8 <_strtol_l.constprop.0+0xc0>
 80054a4:	fb06 4603 	mla	r6, r6, r3, r4
 80054a8:	f04f 0e01 	mov.w	lr, #1
 80054ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054b0:	e7e8      	b.n	8005484 <_strtol_l.constprop.0+0x6c>
 80054b2:	2c2b      	cmp	r4, #43	; 0x2b
 80054b4:	bf04      	itt	eq
 80054b6:	782c      	ldrbeq	r4, [r5, #0]
 80054b8:	1cb5      	addeq	r5, r6, #2
 80054ba:	e7ca      	b.n	8005452 <_strtol_l.constprop.0+0x3a>
 80054bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80054c0:	f1bc 0f19 	cmp.w	ip, #25
 80054c4:	d801      	bhi.n	80054ca <_strtol_l.constprop.0+0xb2>
 80054c6:	3c37      	subs	r4, #55	; 0x37
 80054c8:	e7e2      	b.n	8005490 <_strtol_l.constprop.0+0x78>
 80054ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80054ce:	f1bc 0f19 	cmp.w	ip, #25
 80054d2:	d804      	bhi.n	80054de <_strtol_l.constprop.0+0xc6>
 80054d4:	3c57      	subs	r4, #87	; 0x57
 80054d6:	e7db      	b.n	8005490 <_strtol_l.constprop.0+0x78>
 80054d8:	f04f 3eff 	mov.w	lr, #4294967295
 80054dc:	e7e6      	b.n	80054ac <_strtol_l.constprop.0+0x94>
 80054de:	f1be 3fff 	cmp.w	lr, #4294967295
 80054e2:	d105      	bne.n	80054f0 <_strtol_l.constprop.0+0xd8>
 80054e4:	2322      	movs	r3, #34	; 0x22
 80054e6:	6003      	str	r3, [r0, #0]
 80054e8:	4646      	mov	r6, r8
 80054ea:	b942      	cbnz	r2, 80054fe <_strtol_l.constprop.0+0xe6>
 80054ec:	4630      	mov	r0, r6
 80054ee:	e79e      	b.n	800542e <_strtol_l.constprop.0+0x16>
 80054f0:	b107      	cbz	r7, 80054f4 <_strtol_l.constprop.0+0xdc>
 80054f2:	4276      	negs	r6, r6
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	d0f9      	beq.n	80054ec <_strtol_l.constprop.0+0xd4>
 80054f8:	f1be 0f00 	cmp.w	lr, #0
 80054fc:	d000      	beq.n	8005500 <_strtol_l.constprop.0+0xe8>
 80054fe:	1e69      	subs	r1, r5, #1
 8005500:	6011      	str	r1, [r2, #0]
 8005502:	e7f3      	b.n	80054ec <_strtol_l.constprop.0+0xd4>
 8005504:	2430      	movs	r4, #48	; 0x30
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1b1      	bne.n	800546e <_strtol_l.constprop.0+0x56>
 800550a:	2308      	movs	r3, #8
 800550c:	e7af      	b.n	800546e <_strtol_l.constprop.0+0x56>
 800550e:	2c30      	cmp	r4, #48	; 0x30
 8005510:	d0a5      	beq.n	800545e <_strtol_l.constprop.0+0x46>
 8005512:	230a      	movs	r3, #10
 8005514:	e7ab      	b.n	800546e <_strtol_l.constprop.0+0x56>
 8005516:	bf00      	nop
 8005518:	08005eb5 	.word	0x08005eb5

0800551c <strtol>:
 800551c:	4613      	mov	r3, r2
 800551e:	460a      	mov	r2, r1
 8005520:	4601      	mov	r1, r0
 8005522:	4802      	ldr	r0, [pc, #8]	; (800552c <strtol+0x10>)
 8005524:	6800      	ldr	r0, [r0, #0]
 8005526:	f7ff bf77 	b.w	8005418 <_strtol_l.constprop.0>
 800552a:	bf00      	nop
 800552c:	20000058 	.word	0x20000058

08005530 <siprintf>:
 8005530:	b40e      	push	{r1, r2, r3}
 8005532:	b500      	push	{lr}
 8005534:	b09c      	sub	sp, #112	; 0x70
 8005536:	ab1d      	add	r3, sp, #116	; 0x74
 8005538:	9002      	str	r0, [sp, #8]
 800553a:	9006      	str	r0, [sp, #24]
 800553c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005540:	4809      	ldr	r0, [pc, #36]	; (8005568 <siprintf+0x38>)
 8005542:	9107      	str	r1, [sp, #28]
 8005544:	9104      	str	r1, [sp, #16]
 8005546:	4909      	ldr	r1, [pc, #36]	; (800556c <siprintf+0x3c>)
 8005548:	f853 2b04 	ldr.w	r2, [r3], #4
 800554c:	9105      	str	r1, [sp, #20]
 800554e:	6800      	ldr	r0, [r0, #0]
 8005550:	9301      	str	r3, [sp, #4]
 8005552:	a902      	add	r1, sp, #8
 8005554:	f000 f992 	bl	800587c <_svfiprintf_r>
 8005558:	9b02      	ldr	r3, [sp, #8]
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	b01c      	add	sp, #112	; 0x70
 8005560:	f85d eb04 	ldr.w	lr, [sp], #4
 8005564:	b003      	add	sp, #12
 8005566:	4770      	bx	lr
 8005568:	20000058 	.word	0x20000058
 800556c:	ffff0208 	.word	0xffff0208

08005570 <memset>:
 8005570:	4402      	add	r2, r0
 8005572:	4603      	mov	r3, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	d100      	bne.n	800557a <memset+0xa>
 8005578:	4770      	bx	lr
 800557a:	f803 1b01 	strb.w	r1, [r3], #1
 800557e:	e7f9      	b.n	8005574 <memset+0x4>

08005580 <__errno>:
 8005580:	4b01      	ldr	r3, [pc, #4]	; (8005588 <__errno+0x8>)
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	20000058 	.word	0x20000058

0800558c <__libc_init_array>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4d0d      	ldr	r5, [pc, #52]	; (80055c4 <__libc_init_array+0x38>)
 8005590:	4c0d      	ldr	r4, [pc, #52]	; (80055c8 <__libc_init_array+0x3c>)
 8005592:	1b64      	subs	r4, r4, r5
 8005594:	10a4      	asrs	r4, r4, #2
 8005596:	2600      	movs	r6, #0
 8005598:	42a6      	cmp	r6, r4
 800559a:	d109      	bne.n	80055b0 <__libc_init_array+0x24>
 800559c:	4d0b      	ldr	r5, [pc, #44]	; (80055cc <__libc_init_array+0x40>)
 800559e:	4c0c      	ldr	r4, [pc, #48]	; (80055d0 <__libc_init_array+0x44>)
 80055a0:	f000 fc6a 	bl	8005e78 <_init>
 80055a4:	1b64      	subs	r4, r4, r5
 80055a6:	10a4      	asrs	r4, r4, #2
 80055a8:	2600      	movs	r6, #0
 80055aa:	42a6      	cmp	r6, r4
 80055ac:	d105      	bne.n	80055ba <__libc_init_array+0x2e>
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b4:	4798      	blx	r3
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7ee      	b.n	8005598 <__libc_init_array+0xc>
 80055ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80055be:	4798      	blx	r3
 80055c0:	3601      	adds	r6, #1
 80055c2:	e7f2      	b.n	80055aa <__libc_init_array+0x1e>
 80055c4:	08005ff0 	.word	0x08005ff0
 80055c8:	08005ff0 	.word	0x08005ff0
 80055cc:	08005ff0 	.word	0x08005ff0
 80055d0:	08005ff4 	.word	0x08005ff4

080055d4 <__retarget_lock_acquire_recursive>:
 80055d4:	4770      	bx	lr

080055d6 <__retarget_lock_release_recursive>:
 80055d6:	4770      	bx	lr

080055d8 <_free_r>:
 80055d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055da:	2900      	cmp	r1, #0
 80055dc:	d044      	beq.n	8005668 <_free_r+0x90>
 80055de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e2:	9001      	str	r0, [sp, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f1a1 0404 	sub.w	r4, r1, #4
 80055ea:	bfb8      	it	lt
 80055ec:	18e4      	addlt	r4, r4, r3
 80055ee:	f000 f8df 	bl	80057b0 <__malloc_lock>
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <_free_r+0x94>)
 80055f4:	9801      	ldr	r0, [sp, #4]
 80055f6:	6813      	ldr	r3, [r2, #0]
 80055f8:	b933      	cbnz	r3, 8005608 <_free_r+0x30>
 80055fa:	6063      	str	r3, [r4, #4]
 80055fc:	6014      	str	r4, [r2, #0]
 80055fe:	b003      	add	sp, #12
 8005600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005604:	f000 b8da 	b.w	80057bc <__malloc_unlock>
 8005608:	42a3      	cmp	r3, r4
 800560a:	d908      	bls.n	800561e <_free_r+0x46>
 800560c:	6825      	ldr	r5, [r4, #0]
 800560e:	1961      	adds	r1, r4, r5
 8005610:	428b      	cmp	r3, r1
 8005612:	bf01      	itttt	eq
 8005614:	6819      	ldreq	r1, [r3, #0]
 8005616:	685b      	ldreq	r3, [r3, #4]
 8005618:	1949      	addeq	r1, r1, r5
 800561a:	6021      	streq	r1, [r4, #0]
 800561c:	e7ed      	b.n	80055fa <_free_r+0x22>
 800561e:	461a      	mov	r2, r3
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	b10b      	cbz	r3, 8005628 <_free_r+0x50>
 8005624:	42a3      	cmp	r3, r4
 8005626:	d9fa      	bls.n	800561e <_free_r+0x46>
 8005628:	6811      	ldr	r1, [r2, #0]
 800562a:	1855      	adds	r5, r2, r1
 800562c:	42a5      	cmp	r5, r4
 800562e:	d10b      	bne.n	8005648 <_free_r+0x70>
 8005630:	6824      	ldr	r4, [r4, #0]
 8005632:	4421      	add	r1, r4
 8005634:	1854      	adds	r4, r2, r1
 8005636:	42a3      	cmp	r3, r4
 8005638:	6011      	str	r1, [r2, #0]
 800563a:	d1e0      	bne.n	80055fe <_free_r+0x26>
 800563c:	681c      	ldr	r4, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	6053      	str	r3, [r2, #4]
 8005642:	440c      	add	r4, r1
 8005644:	6014      	str	r4, [r2, #0]
 8005646:	e7da      	b.n	80055fe <_free_r+0x26>
 8005648:	d902      	bls.n	8005650 <_free_r+0x78>
 800564a:	230c      	movs	r3, #12
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	e7d6      	b.n	80055fe <_free_r+0x26>
 8005650:	6825      	ldr	r5, [r4, #0]
 8005652:	1961      	adds	r1, r4, r5
 8005654:	428b      	cmp	r3, r1
 8005656:	bf04      	itt	eq
 8005658:	6819      	ldreq	r1, [r3, #0]
 800565a:	685b      	ldreq	r3, [r3, #4]
 800565c:	6063      	str	r3, [r4, #4]
 800565e:	bf04      	itt	eq
 8005660:	1949      	addeq	r1, r1, r5
 8005662:	6021      	streq	r1, [r4, #0]
 8005664:	6054      	str	r4, [r2, #4]
 8005666:	e7ca      	b.n	80055fe <_free_r+0x26>
 8005668:	b003      	add	sp, #12
 800566a:	bd30      	pop	{r4, r5, pc}
 800566c:	20000510 	.word	0x20000510

08005670 <sbrk_aligned>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	4e0e      	ldr	r6, [pc, #56]	; (80056ac <sbrk_aligned+0x3c>)
 8005674:	460c      	mov	r4, r1
 8005676:	6831      	ldr	r1, [r6, #0]
 8005678:	4605      	mov	r5, r0
 800567a:	b911      	cbnz	r1, 8005682 <sbrk_aligned+0x12>
 800567c:	f000 fba6 	bl	8005dcc <_sbrk_r>
 8005680:	6030      	str	r0, [r6, #0]
 8005682:	4621      	mov	r1, r4
 8005684:	4628      	mov	r0, r5
 8005686:	f000 fba1 	bl	8005dcc <_sbrk_r>
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	d00a      	beq.n	80056a4 <sbrk_aligned+0x34>
 800568e:	1cc4      	adds	r4, r0, #3
 8005690:	f024 0403 	bic.w	r4, r4, #3
 8005694:	42a0      	cmp	r0, r4
 8005696:	d007      	beq.n	80056a8 <sbrk_aligned+0x38>
 8005698:	1a21      	subs	r1, r4, r0
 800569a:	4628      	mov	r0, r5
 800569c:	f000 fb96 	bl	8005dcc <_sbrk_r>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d101      	bne.n	80056a8 <sbrk_aligned+0x38>
 80056a4:	f04f 34ff 	mov.w	r4, #4294967295
 80056a8:	4620      	mov	r0, r4
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	20000514 	.word	0x20000514

080056b0 <_malloc_r>:
 80056b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b4:	1ccd      	adds	r5, r1, #3
 80056b6:	f025 0503 	bic.w	r5, r5, #3
 80056ba:	3508      	adds	r5, #8
 80056bc:	2d0c      	cmp	r5, #12
 80056be:	bf38      	it	cc
 80056c0:	250c      	movcc	r5, #12
 80056c2:	2d00      	cmp	r5, #0
 80056c4:	4607      	mov	r7, r0
 80056c6:	db01      	blt.n	80056cc <_malloc_r+0x1c>
 80056c8:	42a9      	cmp	r1, r5
 80056ca:	d905      	bls.n	80056d8 <_malloc_r+0x28>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	2600      	movs	r6, #0
 80056d2:	4630      	mov	r0, r6
 80056d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057ac <_malloc_r+0xfc>
 80056dc:	f000 f868 	bl	80057b0 <__malloc_lock>
 80056e0:	f8d8 3000 	ldr.w	r3, [r8]
 80056e4:	461c      	mov	r4, r3
 80056e6:	bb5c      	cbnz	r4, 8005740 <_malloc_r+0x90>
 80056e8:	4629      	mov	r1, r5
 80056ea:	4638      	mov	r0, r7
 80056ec:	f7ff ffc0 	bl	8005670 <sbrk_aligned>
 80056f0:	1c43      	adds	r3, r0, #1
 80056f2:	4604      	mov	r4, r0
 80056f4:	d155      	bne.n	80057a2 <_malloc_r+0xf2>
 80056f6:	f8d8 4000 	ldr.w	r4, [r8]
 80056fa:	4626      	mov	r6, r4
 80056fc:	2e00      	cmp	r6, #0
 80056fe:	d145      	bne.n	800578c <_malloc_r+0xdc>
 8005700:	2c00      	cmp	r4, #0
 8005702:	d048      	beq.n	8005796 <_malloc_r+0xe6>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	4631      	mov	r1, r6
 8005708:	4638      	mov	r0, r7
 800570a:	eb04 0903 	add.w	r9, r4, r3
 800570e:	f000 fb5d 	bl	8005dcc <_sbrk_r>
 8005712:	4581      	cmp	r9, r0
 8005714:	d13f      	bne.n	8005796 <_malloc_r+0xe6>
 8005716:	6821      	ldr	r1, [r4, #0]
 8005718:	1a6d      	subs	r5, r5, r1
 800571a:	4629      	mov	r1, r5
 800571c:	4638      	mov	r0, r7
 800571e:	f7ff ffa7 	bl	8005670 <sbrk_aligned>
 8005722:	3001      	adds	r0, #1
 8005724:	d037      	beq.n	8005796 <_malloc_r+0xe6>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	442b      	add	r3, r5
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	f8d8 3000 	ldr.w	r3, [r8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d038      	beq.n	80057a6 <_malloc_r+0xf6>
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	42a2      	cmp	r2, r4
 8005738:	d12b      	bne.n	8005792 <_malloc_r+0xe2>
 800573a:	2200      	movs	r2, #0
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	e00f      	b.n	8005760 <_malloc_r+0xb0>
 8005740:	6822      	ldr	r2, [r4, #0]
 8005742:	1b52      	subs	r2, r2, r5
 8005744:	d41f      	bmi.n	8005786 <_malloc_r+0xd6>
 8005746:	2a0b      	cmp	r2, #11
 8005748:	d917      	bls.n	800577a <_malloc_r+0xca>
 800574a:	1961      	adds	r1, r4, r5
 800574c:	42a3      	cmp	r3, r4
 800574e:	6025      	str	r5, [r4, #0]
 8005750:	bf18      	it	ne
 8005752:	6059      	strne	r1, [r3, #4]
 8005754:	6863      	ldr	r3, [r4, #4]
 8005756:	bf08      	it	eq
 8005758:	f8c8 1000 	streq.w	r1, [r8]
 800575c:	5162      	str	r2, [r4, r5]
 800575e:	604b      	str	r3, [r1, #4]
 8005760:	4638      	mov	r0, r7
 8005762:	f104 060b 	add.w	r6, r4, #11
 8005766:	f000 f829 	bl	80057bc <__malloc_unlock>
 800576a:	f026 0607 	bic.w	r6, r6, #7
 800576e:	1d23      	adds	r3, r4, #4
 8005770:	1af2      	subs	r2, r6, r3
 8005772:	d0ae      	beq.n	80056d2 <_malloc_r+0x22>
 8005774:	1b9b      	subs	r3, r3, r6
 8005776:	50a3      	str	r3, [r4, r2]
 8005778:	e7ab      	b.n	80056d2 <_malloc_r+0x22>
 800577a:	42a3      	cmp	r3, r4
 800577c:	6862      	ldr	r2, [r4, #4]
 800577e:	d1dd      	bne.n	800573c <_malloc_r+0x8c>
 8005780:	f8c8 2000 	str.w	r2, [r8]
 8005784:	e7ec      	b.n	8005760 <_malloc_r+0xb0>
 8005786:	4623      	mov	r3, r4
 8005788:	6864      	ldr	r4, [r4, #4]
 800578a:	e7ac      	b.n	80056e6 <_malloc_r+0x36>
 800578c:	4634      	mov	r4, r6
 800578e:	6876      	ldr	r6, [r6, #4]
 8005790:	e7b4      	b.n	80056fc <_malloc_r+0x4c>
 8005792:	4613      	mov	r3, r2
 8005794:	e7cc      	b.n	8005730 <_malloc_r+0x80>
 8005796:	230c      	movs	r3, #12
 8005798:	603b      	str	r3, [r7, #0]
 800579a:	4638      	mov	r0, r7
 800579c:	f000 f80e 	bl	80057bc <__malloc_unlock>
 80057a0:	e797      	b.n	80056d2 <_malloc_r+0x22>
 80057a2:	6025      	str	r5, [r4, #0]
 80057a4:	e7dc      	b.n	8005760 <_malloc_r+0xb0>
 80057a6:	605b      	str	r3, [r3, #4]
 80057a8:	deff      	udf	#255	; 0xff
 80057aa:	bf00      	nop
 80057ac:	20000510 	.word	0x20000510

080057b0 <__malloc_lock>:
 80057b0:	4801      	ldr	r0, [pc, #4]	; (80057b8 <__malloc_lock+0x8>)
 80057b2:	f7ff bf0f 	b.w	80055d4 <__retarget_lock_acquire_recursive>
 80057b6:	bf00      	nop
 80057b8:	2000050c 	.word	0x2000050c

080057bc <__malloc_unlock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__malloc_unlock+0x8>)
 80057be:	f7ff bf0a 	b.w	80055d6 <__retarget_lock_release_recursive>
 80057c2:	bf00      	nop
 80057c4:	2000050c 	.word	0x2000050c

080057c8 <__ssputs_r>:
 80057c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057cc:	688e      	ldr	r6, [r1, #8]
 80057ce:	461f      	mov	r7, r3
 80057d0:	42be      	cmp	r6, r7
 80057d2:	680b      	ldr	r3, [r1, #0]
 80057d4:	4682      	mov	sl, r0
 80057d6:	460c      	mov	r4, r1
 80057d8:	4690      	mov	r8, r2
 80057da:	d82c      	bhi.n	8005836 <__ssputs_r+0x6e>
 80057dc:	898a      	ldrh	r2, [r1, #12]
 80057de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057e2:	d026      	beq.n	8005832 <__ssputs_r+0x6a>
 80057e4:	6965      	ldr	r5, [r4, #20]
 80057e6:	6909      	ldr	r1, [r1, #16]
 80057e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057ec:	eba3 0901 	sub.w	r9, r3, r1
 80057f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f4:	1c7b      	adds	r3, r7, #1
 80057f6:	444b      	add	r3, r9
 80057f8:	106d      	asrs	r5, r5, #1
 80057fa:	429d      	cmp	r5, r3
 80057fc:	bf38      	it	cc
 80057fe:	461d      	movcc	r5, r3
 8005800:	0553      	lsls	r3, r2, #21
 8005802:	d527      	bpl.n	8005854 <__ssputs_r+0x8c>
 8005804:	4629      	mov	r1, r5
 8005806:	f7ff ff53 	bl	80056b0 <_malloc_r>
 800580a:	4606      	mov	r6, r0
 800580c:	b360      	cbz	r0, 8005868 <__ssputs_r+0xa0>
 800580e:	6921      	ldr	r1, [r4, #16]
 8005810:	464a      	mov	r2, r9
 8005812:	f000 faeb 	bl	8005dec <memcpy>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800581c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005820:	81a3      	strh	r3, [r4, #12]
 8005822:	6126      	str	r6, [r4, #16]
 8005824:	6165      	str	r5, [r4, #20]
 8005826:	444e      	add	r6, r9
 8005828:	eba5 0509 	sub.w	r5, r5, r9
 800582c:	6026      	str	r6, [r4, #0]
 800582e:	60a5      	str	r5, [r4, #8]
 8005830:	463e      	mov	r6, r7
 8005832:	42be      	cmp	r6, r7
 8005834:	d900      	bls.n	8005838 <__ssputs_r+0x70>
 8005836:	463e      	mov	r6, r7
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	4632      	mov	r2, r6
 800583c:	4641      	mov	r1, r8
 800583e:	f000 faab 	bl	8005d98 <memmove>
 8005842:	68a3      	ldr	r3, [r4, #8]
 8005844:	1b9b      	subs	r3, r3, r6
 8005846:	60a3      	str	r3, [r4, #8]
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	4433      	add	r3, r6
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	2000      	movs	r0, #0
 8005850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005854:	462a      	mov	r2, r5
 8005856:	f000 fad7 	bl	8005e08 <_realloc_r>
 800585a:	4606      	mov	r6, r0
 800585c:	2800      	cmp	r0, #0
 800585e:	d1e0      	bne.n	8005822 <__ssputs_r+0x5a>
 8005860:	6921      	ldr	r1, [r4, #16]
 8005862:	4650      	mov	r0, sl
 8005864:	f7ff feb8 	bl	80055d8 <_free_r>
 8005868:	230c      	movs	r3, #12
 800586a:	f8ca 3000 	str.w	r3, [sl]
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	e7e9      	b.n	8005850 <__ssputs_r+0x88>

0800587c <_svfiprintf_r>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	4698      	mov	r8, r3
 8005882:	898b      	ldrh	r3, [r1, #12]
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	b09d      	sub	sp, #116	; 0x74
 8005888:	4607      	mov	r7, r0
 800588a:	460d      	mov	r5, r1
 800588c:	4614      	mov	r4, r2
 800588e:	d50e      	bpl.n	80058ae <_svfiprintf_r+0x32>
 8005890:	690b      	ldr	r3, [r1, #16]
 8005892:	b963      	cbnz	r3, 80058ae <_svfiprintf_r+0x32>
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	f7ff ff0b 	bl	80056b0 <_malloc_r>
 800589a:	6028      	str	r0, [r5, #0]
 800589c:	6128      	str	r0, [r5, #16]
 800589e:	b920      	cbnz	r0, 80058aa <_svfiprintf_r+0x2e>
 80058a0:	230c      	movs	r3, #12
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	e0d0      	b.n	8005a4c <_svfiprintf_r+0x1d0>
 80058aa:	2340      	movs	r3, #64	; 0x40
 80058ac:	616b      	str	r3, [r5, #20]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9309      	str	r3, [sp, #36]	; 0x24
 80058b2:	2320      	movs	r3, #32
 80058b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058bc:	2330      	movs	r3, #48	; 0x30
 80058be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a64 <_svfiprintf_r+0x1e8>
 80058c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058c6:	f04f 0901 	mov.w	r9, #1
 80058ca:	4623      	mov	r3, r4
 80058cc:	469a      	mov	sl, r3
 80058ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d2:	b10a      	cbz	r2, 80058d8 <_svfiprintf_r+0x5c>
 80058d4:	2a25      	cmp	r2, #37	; 0x25
 80058d6:	d1f9      	bne.n	80058cc <_svfiprintf_r+0x50>
 80058d8:	ebba 0b04 	subs.w	fp, sl, r4
 80058dc:	d00b      	beq.n	80058f6 <_svfiprintf_r+0x7a>
 80058de:	465b      	mov	r3, fp
 80058e0:	4622      	mov	r2, r4
 80058e2:	4629      	mov	r1, r5
 80058e4:	4638      	mov	r0, r7
 80058e6:	f7ff ff6f 	bl	80057c8 <__ssputs_r>
 80058ea:	3001      	adds	r0, #1
 80058ec:	f000 80a9 	beq.w	8005a42 <_svfiprintf_r+0x1c6>
 80058f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f2:	445a      	add	r2, fp
 80058f4:	9209      	str	r2, [sp, #36]	; 0x24
 80058f6:	f89a 3000 	ldrb.w	r3, [sl]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80a1 	beq.w	8005a42 <_svfiprintf_r+0x1c6>
 8005900:	2300      	movs	r3, #0
 8005902:	f04f 32ff 	mov.w	r2, #4294967295
 8005906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800590a:	f10a 0a01 	add.w	sl, sl, #1
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	9307      	str	r3, [sp, #28]
 8005912:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005916:	931a      	str	r3, [sp, #104]	; 0x68
 8005918:	4654      	mov	r4, sl
 800591a:	2205      	movs	r2, #5
 800591c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005920:	4850      	ldr	r0, [pc, #320]	; (8005a64 <_svfiprintf_r+0x1e8>)
 8005922:	f7fa fc5d 	bl	80001e0 <memchr>
 8005926:	9a04      	ldr	r2, [sp, #16]
 8005928:	b9d8      	cbnz	r0, 8005962 <_svfiprintf_r+0xe6>
 800592a:	06d0      	lsls	r0, r2, #27
 800592c:	bf44      	itt	mi
 800592e:	2320      	movmi	r3, #32
 8005930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005934:	0711      	lsls	r1, r2, #28
 8005936:	bf44      	itt	mi
 8005938:	232b      	movmi	r3, #43	; 0x2b
 800593a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593e:	f89a 3000 	ldrb.w	r3, [sl]
 8005942:	2b2a      	cmp	r3, #42	; 0x2a
 8005944:	d015      	beq.n	8005972 <_svfiprintf_r+0xf6>
 8005946:	9a07      	ldr	r2, [sp, #28]
 8005948:	4654      	mov	r4, sl
 800594a:	2000      	movs	r0, #0
 800594c:	f04f 0c0a 	mov.w	ip, #10
 8005950:	4621      	mov	r1, r4
 8005952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005956:	3b30      	subs	r3, #48	; 0x30
 8005958:	2b09      	cmp	r3, #9
 800595a:	d94d      	bls.n	80059f8 <_svfiprintf_r+0x17c>
 800595c:	b1b0      	cbz	r0, 800598c <_svfiprintf_r+0x110>
 800595e:	9207      	str	r2, [sp, #28]
 8005960:	e014      	b.n	800598c <_svfiprintf_r+0x110>
 8005962:	eba0 0308 	sub.w	r3, r0, r8
 8005966:	fa09 f303 	lsl.w	r3, r9, r3
 800596a:	4313      	orrs	r3, r2
 800596c:	9304      	str	r3, [sp, #16]
 800596e:	46a2      	mov	sl, r4
 8005970:	e7d2      	b.n	8005918 <_svfiprintf_r+0x9c>
 8005972:	9b03      	ldr	r3, [sp, #12]
 8005974:	1d19      	adds	r1, r3, #4
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	9103      	str	r1, [sp, #12]
 800597a:	2b00      	cmp	r3, #0
 800597c:	bfbb      	ittet	lt
 800597e:	425b      	neglt	r3, r3
 8005980:	f042 0202 	orrlt.w	r2, r2, #2
 8005984:	9307      	strge	r3, [sp, #28]
 8005986:	9307      	strlt	r3, [sp, #28]
 8005988:	bfb8      	it	lt
 800598a:	9204      	strlt	r2, [sp, #16]
 800598c:	7823      	ldrb	r3, [r4, #0]
 800598e:	2b2e      	cmp	r3, #46	; 0x2e
 8005990:	d10c      	bne.n	80059ac <_svfiprintf_r+0x130>
 8005992:	7863      	ldrb	r3, [r4, #1]
 8005994:	2b2a      	cmp	r3, #42	; 0x2a
 8005996:	d134      	bne.n	8005a02 <_svfiprintf_r+0x186>
 8005998:	9b03      	ldr	r3, [sp, #12]
 800599a:	1d1a      	adds	r2, r3, #4
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	9203      	str	r2, [sp, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bfb8      	it	lt
 80059a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059a8:	3402      	adds	r4, #2
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a74 <_svfiprintf_r+0x1f8>
 80059b0:	7821      	ldrb	r1, [r4, #0]
 80059b2:	2203      	movs	r2, #3
 80059b4:	4650      	mov	r0, sl
 80059b6:	f7fa fc13 	bl	80001e0 <memchr>
 80059ba:	b138      	cbz	r0, 80059cc <_svfiprintf_r+0x150>
 80059bc:	9b04      	ldr	r3, [sp, #16]
 80059be:	eba0 000a 	sub.w	r0, r0, sl
 80059c2:	2240      	movs	r2, #64	; 0x40
 80059c4:	4082      	lsls	r2, r0
 80059c6:	4313      	orrs	r3, r2
 80059c8:	3401      	adds	r4, #1
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d0:	4825      	ldr	r0, [pc, #148]	; (8005a68 <_svfiprintf_r+0x1ec>)
 80059d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059d6:	2206      	movs	r2, #6
 80059d8:	f7fa fc02 	bl	80001e0 <memchr>
 80059dc:	2800      	cmp	r0, #0
 80059de:	d038      	beq.n	8005a52 <_svfiprintf_r+0x1d6>
 80059e0:	4b22      	ldr	r3, [pc, #136]	; (8005a6c <_svfiprintf_r+0x1f0>)
 80059e2:	bb1b      	cbnz	r3, 8005a2c <_svfiprintf_r+0x1b0>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	3307      	adds	r3, #7
 80059e8:	f023 0307 	bic.w	r3, r3, #7
 80059ec:	3308      	adds	r3, #8
 80059ee:	9303      	str	r3, [sp, #12]
 80059f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f2:	4433      	add	r3, r6
 80059f4:	9309      	str	r3, [sp, #36]	; 0x24
 80059f6:	e768      	b.n	80058ca <_svfiprintf_r+0x4e>
 80059f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059fc:	460c      	mov	r4, r1
 80059fe:	2001      	movs	r0, #1
 8005a00:	e7a6      	b.n	8005950 <_svfiprintf_r+0xd4>
 8005a02:	2300      	movs	r3, #0
 8005a04:	3401      	adds	r4, #1
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f04f 0c0a 	mov.w	ip, #10
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a14:	3a30      	subs	r2, #48	; 0x30
 8005a16:	2a09      	cmp	r2, #9
 8005a18:	d903      	bls.n	8005a22 <_svfiprintf_r+0x1a6>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0c6      	beq.n	80059ac <_svfiprintf_r+0x130>
 8005a1e:	9105      	str	r1, [sp, #20]
 8005a20:	e7c4      	b.n	80059ac <_svfiprintf_r+0x130>
 8005a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a26:	4604      	mov	r4, r0
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7f0      	b.n	8005a0e <_svfiprintf_r+0x192>
 8005a2c:	ab03      	add	r3, sp, #12
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <_svfiprintf_r+0x1f4>)
 8005a34:	a904      	add	r1, sp, #16
 8005a36:	4638      	mov	r0, r7
 8005a38:	f3af 8000 	nop.w
 8005a3c:	1c42      	adds	r2, r0, #1
 8005a3e:	4606      	mov	r6, r0
 8005a40:	d1d6      	bne.n	80059f0 <_svfiprintf_r+0x174>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	065b      	lsls	r3, r3, #25
 8005a46:	f53f af2d 	bmi.w	80058a4 <_svfiprintf_r+0x28>
 8005a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a4c:	b01d      	add	sp, #116	; 0x74
 8005a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a52:	ab03      	add	r3, sp, #12
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	462a      	mov	r2, r5
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <_svfiprintf_r+0x1f4>)
 8005a5a:	a904      	add	r1, sp, #16
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f000 f879 	bl	8005b54 <_printf_i>
 8005a62:	e7eb      	b.n	8005a3c <_svfiprintf_r+0x1c0>
 8005a64:	08005fb5 	.word	0x08005fb5
 8005a68:	08005fbf 	.word	0x08005fbf
 8005a6c:	00000000 	.word	0x00000000
 8005a70:	080057c9 	.word	0x080057c9
 8005a74:	08005fbb 	.word	0x08005fbb

08005a78 <_printf_common>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	4699      	mov	r9, r3
 8005a80:	688a      	ldr	r2, [r1, #8]
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	bfb8      	it	lt
 8005a8c:	4613      	movlt	r3, r2
 8005a8e:	6033      	str	r3, [r6, #0]
 8005a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a94:	4607      	mov	r7, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	b10a      	cbz	r2, 8005a9e <_printf_common+0x26>
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0699      	lsls	r1, r3, #26
 8005aa2:	bf42      	ittt	mi
 8005aa4:	6833      	ldrmi	r3, [r6, #0]
 8005aa6:	3302      	addmi	r3, #2
 8005aa8:	6033      	strmi	r3, [r6, #0]
 8005aaa:	6825      	ldr	r5, [r4, #0]
 8005aac:	f015 0506 	ands.w	r5, r5, #6
 8005ab0:	d106      	bne.n	8005ac0 <_printf_common+0x48>
 8005ab2:	f104 0a19 	add.w	sl, r4, #25
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	6832      	ldr	r2, [r6, #0]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dc26      	bgt.n	8005b0e <_printf_common+0x96>
 8005ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac4:	1e13      	subs	r3, r2, #0
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	bf18      	it	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	0692      	lsls	r2, r2, #26
 8005ace:	d42b      	bmi.n	8005b28 <_printf_common+0xb0>
 8005ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	3001      	adds	r0, #1
 8005adc:	d01e      	beq.n	8005b1c <_printf_common+0xa4>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	f003 0306 	and.w	r3, r3, #6
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	bf02      	ittt	eq
 8005aea:	68e5      	ldreq	r5, [r4, #12]
 8005aec:	6833      	ldreq	r3, [r6, #0]
 8005aee:	1aed      	subeq	r5, r5, r3
 8005af0:	68a3      	ldr	r3, [r4, #8]
 8005af2:	bf0c      	ite	eq
 8005af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af8:	2500      	movne	r5, #0
 8005afa:	4293      	cmp	r3, r2
 8005afc:	bfc4      	itt	gt
 8005afe:	1a9b      	subgt	r3, r3, r2
 8005b00:	18ed      	addgt	r5, r5, r3
 8005b02:	2600      	movs	r6, #0
 8005b04:	341a      	adds	r4, #26
 8005b06:	42b5      	cmp	r5, r6
 8005b08:	d11a      	bne.n	8005b40 <_printf_common+0xc8>
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e008      	b.n	8005b20 <_printf_common+0xa8>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	4652      	mov	r2, sl
 8005b12:	4649      	mov	r1, r9
 8005b14:	4638      	mov	r0, r7
 8005b16:	47c0      	blx	r8
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d103      	bne.n	8005b24 <_printf_common+0xac>
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	3501      	adds	r5, #1
 8005b26:	e7c6      	b.n	8005ab6 <_printf_common+0x3e>
 8005b28:	18e1      	adds	r1, r4, r3
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	2030      	movs	r0, #48	; 0x30
 8005b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b32:	4422      	add	r2, r4
 8005b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	e7c7      	b.n	8005ad0 <_printf_common+0x58>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4622      	mov	r2, r4
 8005b44:	4649      	mov	r1, r9
 8005b46:	4638      	mov	r0, r7
 8005b48:	47c0      	blx	r8
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d0e6      	beq.n	8005b1c <_printf_common+0xa4>
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7d9      	b.n	8005b06 <_printf_common+0x8e>
	...

08005b54 <_printf_i>:
 8005b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	7e0f      	ldrb	r7, [r1, #24]
 8005b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b5c:	2f78      	cmp	r7, #120	; 0x78
 8005b5e:	4691      	mov	r9, r2
 8005b60:	4680      	mov	r8, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	469a      	mov	sl, r3
 8005b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b6a:	d807      	bhi.n	8005b7c <_printf_i+0x28>
 8005b6c:	2f62      	cmp	r7, #98	; 0x62
 8005b6e:	d80a      	bhi.n	8005b86 <_printf_i+0x32>
 8005b70:	2f00      	cmp	r7, #0
 8005b72:	f000 80d4 	beq.w	8005d1e <_printf_i+0x1ca>
 8005b76:	2f58      	cmp	r7, #88	; 0x58
 8005b78:	f000 80c0 	beq.w	8005cfc <_printf_i+0x1a8>
 8005b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b84:	e03a      	b.n	8005bfc <_printf_i+0xa8>
 8005b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b8a:	2b15      	cmp	r3, #21
 8005b8c:	d8f6      	bhi.n	8005b7c <_printf_i+0x28>
 8005b8e:	a101      	add	r1, pc, #4	; (adr r1, 8005b94 <_printf_i+0x40>)
 8005b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b94:	08005bed 	.word	0x08005bed
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005b7d 	.word	0x08005b7d
 8005ba0:	08005b7d 	.word	0x08005b7d
 8005ba4:	08005b7d 	.word	0x08005b7d
 8005ba8:	08005b7d 	.word	0x08005b7d
 8005bac:	08005c01 	.word	0x08005c01
 8005bb0:	08005b7d 	.word	0x08005b7d
 8005bb4:	08005b7d 	.word	0x08005b7d
 8005bb8:	08005b7d 	.word	0x08005b7d
 8005bbc:	08005b7d 	.word	0x08005b7d
 8005bc0:	08005d05 	.word	0x08005d05
 8005bc4:	08005c2d 	.word	0x08005c2d
 8005bc8:	08005cbf 	.word	0x08005cbf
 8005bcc:	08005b7d 	.word	0x08005b7d
 8005bd0:	08005b7d 	.word	0x08005b7d
 8005bd4:	08005d27 	.word	0x08005d27
 8005bd8:	08005b7d 	.word	0x08005b7d
 8005bdc:	08005c2d 	.word	0x08005c2d
 8005be0:	08005b7d 	.word	0x08005b7d
 8005be4:	08005b7d 	.word	0x08005b7d
 8005be8:	08005cc7 	.word	0x08005cc7
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	1d1a      	adds	r2, r3, #4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	602a      	str	r2, [r5, #0]
 8005bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e09f      	b.n	8005d40 <_printf_i+0x1ec>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	0607      	lsls	r7, r0, #24
 8005c06:	f103 0104 	add.w	r1, r3, #4
 8005c0a:	6029      	str	r1, [r5, #0]
 8005c0c:	d501      	bpl.n	8005c12 <_printf_i+0xbe>
 8005c0e:	681e      	ldr	r6, [r3, #0]
 8005c10:	e003      	b.n	8005c1a <_printf_i+0xc6>
 8005c12:	0646      	lsls	r6, r0, #25
 8005c14:	d5fb      	bpl.n	8005c0e <_printf_i+0xba>
 8005c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c1a:	2e00      	cmp	r6, #0
 8005c1c:	da03      	bge.n	8005c26 <_printf_i+0xd2>
 8005c1e:	232d      	movs	r3, #45	; 0x2d
 8005c20:	4276      	negs	r6, r6
 8005c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c26:	485a      	ldr	r0, [pc, #360]	; (8005d90 <_printf_i+0x23c>)
 8005c28:	230a      	movs	r3, #10
 8005c2a:	e012      	b.n	8005c52 <_printf_i+0xfe>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	6820      	ldr	r0, [r4, #0]
 8005c30:	1d19      	adds	r1, r3, #4
 8005c32:	6029      	str	r1, [r5, #0]
 8005c34:	0605      	lsls	r5, r0, #24
 8005c36:	d501      	bpl.n	8005c3c <_printf_i+0xe8>
 8005c38:	681e      	ldr	r6, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <_printf_i+0xee>
 8005c3c:	0641      	lsls	r1, r0, #25
 8005c3e:	d5fb      	bpl.n	8005c38 <_printf_i+0xe4>
 8005c40:	881e      	ldrh	r6, [r3, #0]
 8005c42:	4853      	ldr	r0, [pc, #332]	; (8005d90 <_printf_i+0x23c>)
 8005c44:	2f6f      	cmp	r7, #111	; 0x6f
 8005c46:	bf0c      	ite	eq
 8005c48:	2308      	moveq	r3, #8
 8005c4a:	230a      	movne	r3, #10
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c52:	6865      	ldr	r5, [r4, #4]
 8005c54:	60a5      	str	r5, [r4, #8]
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	bfa2      	ittt	ge
 8005c5a:	6821      	ldrge	r1, [r4, #0]
 8005c5c:	f021 0104 	bicge.w	r1, r1, #4
 8005c60:	6021      	strge	r1, [r4, #0]
 8005c62:	b90e      	cbnz	r6, 8005c68 <_printf_i+0x114>
 8005c64:	2d00      	cmp	r5, #0
 8005c66:	d04b      	beq.n	8005d00 <_printf_i+0x1ac>
 8005c68:	4615      	mov	r5, r2
 8005c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c72:	5dc7      	ldrb	r7, [r0, r7]
 8005c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c78:	4637      	mov	r7, r6
 8005c7a:	42bb      	cmp	r3, r7
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	d9f4      	bls.n	8005c6a <_printf_i+0x116>
 8005c80:	2b08      	cmp	r3, #8
 8005c82:	d10b      	bne.n	8005c9c <_printf_i+0x148>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	07de      	lsls	r6, r3, #31
 8005c88:	d508      	bpl.n	8005c9c <_printf_i+0x148>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	6861      	ldr	r1, [r4, #4]
 8005c8e:	4299      	cmp	r1, r3
 8005c90:	bfde      	ittt	le
 8005c92:	2330      	movle	r3, #48	; 0x30
 8005c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c9c:	1b52      	subs	r2, r2, r5
 8005c9e:	6122      	str	r2, [r4, #16]
 8005ca0:	f8cd a000 	str.w	sl, [sp]
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	aa03      	add	r2, sp, #12
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4640      	mov	r0, r8
 8005cac:	f7ff fee4 	bl	8005a78 <_printf_common>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d14a      	bne.n	8005d4a <_printf_i+0x1f6>
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	b004      	add	sp, #16
 8005cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	f043 0320 	orr.w	r3, r3, #32
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	4833      	ldr	r0, [pc, #204]	; (8005d94 <_printf_i+0x240>)
 8005cc8:	2778      	movs	r7, #120	; 0x78
 8005cca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	6829      	ldr	r1, [r5, #0]
 8005cd2:	061f      	lsls	r7, r3, #24
 8005cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cd8:	d402      	bmi.n	8005ce0 <_printf_i+0x18c>
 8005cda:	065f      	lsls	r7, r3, #25
 8005cdc:	bf48      	it	mi
 8005cde:	b2b6      	uxthmi	r6, r6
 8005ce0:	07df      	lsls	r7, r3, #31
 8005ce2:	bf48      	it	mi
 8005ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce8:	6029      	str	r1, [r5, #0]
 8005cea:	bf48      	it	mi
 8005cec:	6023      	strmi	r3, [r4, #0]
 8005cee:	b91e      	cbnz	r6, 8005cf8 <_printf_i+0x1a4>
 8005cf0:	6823      	ldr	r3, [r4, #0]
 8005cf2:	f023 0320 	bic.w	r3, r3, #32
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	e7a7      	b.n	8005c4c <_printf_i+0xf8>
 8005cfc:	4824      	ldr	r0, [pc, #144]	; (8005d90 <_printf_i+0x23c>)
 8005cfe:	e7e4      	b.n	8005cca <_printf_i+0x176>
 8005d00:	4615      	mov	r5, r2
 8005d02:	e7bd      	b.n	8005c80 <_printf_i+0x12c>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	6826      	ldr	r6, [r4, #0]
 8005d08:	6961      	ldr	r1, [r4, #20]
 8005d0a:	1d18      	adds	r0, r3, #4
 8005d0c:	6028      	str	r0, [r5, #0]
 8005d0e:	0635      	lsls	r5, r6, #24
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	d501      	bpl.n	8005d18 <_printf_i+0x1c4>
 8005d14:	6019      	str	r1, [r3, #0]
 8005d16:	e002      	b.n	8005d1e <_printf_i+0x1ca>
 8005d18:	0670      	lsls	r0, r6, #25
 8005d1a:	d5fb      	bpl.n	8005d14 <_printf_i+0x1c0>
 8005d1c:	8019      	strh	r1, [r3, #0]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	4615      	mov	r5, r2
 8005d24:	e7bc      	b.n	8005ca0 <_printf_i+0x14c>
 8005d26:	682b      	ldr	r3, [r5, #0]
 8005d28:	1d1a      	adds	r2, r3, #4
 8005d2a:	602a      	str	r2, [r5, #0]
 8005d2c:	681d      	ldr	r5, [r3, #0]
 8005d2e:	6862      	ldr	r2, [r4, #4]
 8005d30:	2100      	movs	r1, #0
 8005d32:	4628      	mov	r0, r5
 8005d34:	f7fa fa54 	bl	80001e0 <memchr>
 8005d38:	b108      	cbz	r0, 8005d3e <_printf_i+0x1ea>
 8005d3a:	1b40      	subs	r0, r0, r5
 8005d3c:	6060      	str	r0, [r4, #4]
 8005d3e:	6863      	ldr	r3, [r4, #4]
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	2300      	movs	r3, #0
 8005d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d48:	e7aa      	b.n	8005ca0 <_printf_i+0x14c>
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	462a      	mov	r2, r5
 8005d4e:	4649      	mov	r1, r9
 8005d50:	4640      	mov	r0, r8
 8005d52:	47d0      	blx	sl
 8005d54:	3001      	adds	r0, #1
 8005d56:	d0ad      	beq.n	8005cb4 <_printf_i+0x160>
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	079b      	lsls	r3, r3, #30
 8005d5c:	d413      	bmi.n	8005d86 <_printf_i+0x232>
 8005d5e:	68e0      	ldr	r0, [r4, #12]
 8005d60:	9b03      	ldr	r3, [sp, #12]
 8005d62:	4298      	cmp	r0, r3
 8005d64:	bfb8      	it	lt
 8005d66:	4618      	movlt	r0, r3
 8005d68:	e7a6      	b.n	8005cb8 <_printf_i+0x164>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4640      	mov	r0, r8
 8005d72:	47d0      	blx	sl
 8005d74:	3001      	adds	r0, #1
 8005d76:	d09d      	beq.n	8005cb4 <_printf_i+0x160>
 8005d78:	3501      	adds	r5, #1
 8005d7a:	68e3      	ldr	r3, [r4, #12]
 8005d7c:	9903      	ldr	r1, [sp, #12]
 8005d7e:	1a5b      	subs	r3, r3, r1
 8005d80:	42ab      	cmp	r3, r5
 8005d82:	dcf2      	bgt.n	8005d6a <_printf_i+0x216>
 8005d84:	e7eb      	b.n	8005d5e <_printf_i+0x20a>
 8005d86:	2500      	movs	r5, #0
 8005d88:	f104 0619 	add.w	r6, r4, #25
 8005d8c:	e7f5      	b.n	8005d7a <_printf_i+0x226>
 8005d8e:	bf00      	nop
 8005d90:	08005fc6 	.word	0x08005fc6
 8005d94:	08005fd7 	.word	0x08005fd7

08005d98 <memmove>:
 8005d98:	4288      	cmp	r0, r1
 8005d9a:	b510      	push	{r4, lr}
 8005d9c:	eb01 0402 	add.w	r4, r1, r2
 8005da0:	d902      	bls.n	8005da8 <memmove+0x10>
 8005da2:	4284      	cmp	r4, r0
 8005da4:	4623      	mov	r3, r4
 8005da6:	d807      	bhi.n	8005db8 <memmove+0x20>
 8005da8:	1e43      	subs	r3, r0, #1
 8005daa:	42a1      	cmp	r1, r4
 8005dac:	d008      	beq.n	8005dc0 <memmove+0x28>
 8005dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005db2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005db6:	e7f8      	b.n	8005daa <memmove+0x12>
 8005db8:	4402      	add	r2, r0
 8005dba:	4601      	mov	r1, r0
 8005dbc:	428a      	cmp	r2, r1
 8005dbe:	d100      	bne.n	8005dc2 <memmove+0x2a>
 8005dc0:	bd10      	pop	{r4, pc}
 8005dc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dca:	e7f7      	b.n	8005dbc <memmove+0x24>

08005dcc <_sbrk_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d06      	ldr	r5, [pc, #24]	; (8005de8 <_sbrk_r+0x1c>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	602b      	str	r3, [r5, #0]
 8005dd8:	f7fb fcb4 	bl	8001744 <_sbrk>
 8005ddc:	1c43      	adds	r3, r0, #1
 8005dde:	d102      	bne.n	8005de6 <_sbrk_r+0x1a>
 8005de0:	682b      	ldr	r3, [r5, #0]
 8005de2:	b103      	cbz	r3, 8005de6 <_sbrk_r+0x1a>
 8005de4:	6023      	str	r3, [r4, #0]
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	20000508 	.word	0x20000508

08005dec <memcpy>:
 8005dec:	440a      	add	r2, r1
 8005dee:	4291      	cmp	r1, r2
 8005df0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005df4:	d100      	bne.n	8005df8 <memcpy+0xc>
 8005df6:	4770      	bx	lr
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e02:	4291      	cmp	r1, r2
 8005e04:	d1f9      	bne.n	8005dfa <memcpy+0xe>
 8005e06:	bd10      	pop	{r4, pc}

08005e08 <_realloc_r>:
 8005e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	4614      	mov	r4, r2
 8005e10:	460e      	mov	r6, r1
 8005e12:	b921      	cbnz	r1, 8005e1e <_realloc_r+0x16>
 8005e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	4611      	mov	r1, r2
 8005e1a:	f7ff bc49 	b.w	80056b0 <_malloc_r>
 8005e1e:	b92a      	cbnz	r2, 8005e2c <_realloc_r+0x24>
 8005e20:	f7ff fbda 	bl	80055d8 <_free_r>
 8005e24:	4625      	mov	r5, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e2c:	f000 f81b 	bl	8005e66 <_malloc_usable_size_r>
 8005e30:	4284      	cmp	r4, r0
 8005e32:	4607      	mov	r7, r0
 8005e34:	d802      	bhi.n	8005e3c <_realloc_r+0x34>
 8005e36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e3a:	d812      	bhi.n	8005e62 <_realloc_r+0x5a>
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	4640      	mov	r0, r8
 8005e40:	f7ff fc36 	bl	80056b0 <_malloc_r>
 8005e44:	4605      	mov	r5, r0
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d0ed      	beq.n	8005e26 <_realloc_r+0x1e>
 8005e4a:	42bc      	cmp	r4, r7
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4631      	mov	r1, r6
 8005e50:	bf28      	it	cs
 8005e52:	463a      	movcs	r2, r7
 8005e54:	f7ff ffca 	bl	8005dec <memcpy>
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	f7ff fbbc 	bl	80055d8 <_free_r>
 8005e60:	e7e1      	b.n	8005e26 <_realloc_r+0x1e>
 8005e62:	4635      	mov	r5, r6
 8005e64:	e7df      	b.n	8005e26 <_realloc_r+0x1e>

08005e66 <_malloc_usable_size_r>:
 8005e66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e6a:	1f18      	subs	r0, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bfbc      	itt	lt
 8005e70:	580b      	ldrlt	r3, [r1, r0]
 8005e72:	18c0      	addlt	r0, r0, r3
 8005e74:	4770      	bx	lr
	...

08005e78 <_init>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr

08005e84 <_fini>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	bf00      	nop
 8005e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8a:	bc08      	pop	{r3}
 8005e8c:	469e      	mov	lr, r3
 8005e8e:	4770      	bx	lr
