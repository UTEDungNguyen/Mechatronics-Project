
dc_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000545c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800575c  0800575c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000424  2000005c  080057c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  080057c0  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cfa5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d22  00000000  00000000  0002d074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0002ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009be  00000000  00000000  0002fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163b3  00000000  00000000  000303be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4fa  00000000  00000000  00046771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d386  00000000  00000000  00054c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039cc  00000000  00000000  000e1ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000e59c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055e4 	.word	0x080055e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080055e4 	.word	0x080055e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a5e      	ldr	r2, [pc, #376]	; (8000708 <HAL_UARTEx_RxEventCallback+0x18c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d176      	bne.n	8000680 <HAL_UARTEx_RxEventCallback+0x104>
  {
	state_change = 0;
 8000592:	4b5e      	ldr	r3, [pc, #376]	; (800070c <HAL_UARTEx_RxEventCallback+0x190>)
 8000594:	2200      	movs	r2, #0
 8000596:	801a      	strh	r2, [r3, #0]
    switch (rxbuf[0])
 8000598:	4b5d      	ldr	r3, [pc, #372]	; (8000710 <HAL_UARTEx_RxEventCallback+0x194>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3b4c      	subs	r3, #76	; 0x4c
 800059e:	2b07      	cmp	r3, #7
 80005a0:	d852      	bhi.n	8000648 <HAL_UARTEx_RxEventCallback+0xcc>
 80005a2:	a201      	add	r2, pc, #4	; (adr r2, 80005a8 <HAL_UARTEx_RxEventCallback+0x2c>)
 80005a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005a8:	080005d9 	.word	0x080005d9
 80005ac:	08000649 	.word	0x08000649
 80005b0:	08000649 	.word	0x08000649
 80005b4:	08000649 	.word	0x08000649
 80005b8:	080005d1 	.word	0x080005d1
 80005bc:	08000649 	.word	0x08000649
 80005c0:	08000611 	.word	0x08000611
 80005c4:	080005c9 	.word	0x080005c9
    {
    case 'S':
    {
      state = START_MOTOR_STATE;
 80005c8:	4b52      	ldr	r3, [pc, #328]	; (8000714 <HAL_UARTEx_RxEventCallback+0x198>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	801a      	strh	r2, [r3, #0]
      break;
 80005ce:	e03b      	b.n	8000648 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'P':
    {
      state = STOP_MOTOR_STATE;
 80005d0:	4b50      	ldr	r3, [pc, #320]	; (8000714 <HAL_UARTEx_RxEventCallback+0x198>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]
      break;
 80005d6:	e037      	b.n	8000648 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'L':
    {
      state = MOTOR_LEFT_STATE;
 80005d8:	4b4e      	ldr	r3, [pc, #312]	; (8000714 <HAL_UARTEx_RxEventCallback+0x198>)
 80005da:	2202      	movs	r2, #2
 80005dc:	801a      	strh	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 80005de:	2301      	movs	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
 80005e2:	e00a      	b.n	80005fa <HAL_UARTEx_RxEventCallback+0x7e>
      {
        data_pwm[b - 1] = rxbuf[b];
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4949      	ldr	r1, [pc, #292]	; (8000710 <HAL_UARTEx_RxEventCallback+0x194>)
 80005ea:	69fa      	ldr	r2, [r7, #28]
 80005ec:	440a      	add	r2, r1
 80005ee:	7811      	ldrb	r1, [r2, #0]
 80005f0:	4a49      	ldr	r2, [pc, #292]	; (8000718 <HAL_UARTEx_RxEventCallback+0x19c>)
 80005f2:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	3301      	adds	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	ddf1      	ble.n	80005e4 <HAL_UARTEx_RxEventCallback+0x68>
      }
      pwm_t = atoi(data_pwm);
 8000600:	4845      	ldr	r0, [pc, #276]	; (8000718 <HAL_UARTEx_RxEventCallback+0x19c>)
 8000602:	f004 fabb 	bl	8004b7c <atoi>
 8000606:	4603      	mov	r3, r0
 8000608:	b29a      	uxth	r2, r3
 800060a:	4b44      	ldr	r3, [pc, #272]	; (800071c <HAL_UARTEx_RxEventCallback+0x1a0>)
 800060c:	801a      	strh	r2, [r3, #0]
      break;
 800060e:	e01b      	b.n	8000648 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'R':
    {
      state = MOTOR_RIGHT_STATE;
 8000610:	4b40      	ldr	r3, [pc, #256]	; (8000714 <HAL_UARTEx_RxEventCallback+0x198>)
 8000612:	2203      	movs	r2, #3
 8000614:	801a      	strh	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 8000616:	2301      	movs	r3, #1
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	e00a      	b.n	8000632 <HAL_UARTEx_RxEventCallback+0xb6>
      {
        data_pwm[b - 1] = rxbuf[b];
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	3b01      	subs	r3, #1
 8000620:	493b      	ldr	r1, [pc, #236]	; (8000710 <HAL_UARTEx_RxEventCallback+0x194>)
 8000622:	69ba      	ldr	r2, [r7, #24]
 8000624:	440a      	add	r2, r1
 8000626:	7811      	ldrb	r1, [r2, #0]
 8000628:	4a3b      	ldr	r2, [pc, #236]	; (8000718 <HAL_UARTEx_RxEventCallback+0x19c>)
 800062a:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	3301      	adds	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	2b02      	cmp	r3, #2
 8000636:	ddf1      	ble.n	800061c <HAL_UARTEx_RxEventCallback+0xa0>
      }
      pwm_t = atoi(data_pwm);
 8000638:	4837      	ldr	r0, [pc, #220]	; (8000718 <HAL_UARTEx_RxEventCallback+0x19c>)
 800063a:	f004 fa9f 	bl	8004b7c <atoi>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	4b36      	ldr	r3, [pc, #216]	; (800071c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8000644:	801a      	strh	r2, [r3, #0]
      break;
 8000646:	bf00      	nop
    }
    }
    /* Clear the rxbuf */
    for (uint8_t i = 0U; i < Size; i++)
 8000648:	2300      	movs	r3, #0
 800064a:	75fb      	strb	r3, [r7, #23]
 800064c:	e006      	b.n	800065c <HAL_UARTEx_RxEventCallback+0xe0>
    {
      rxbuf[i] = '\0';
 800064e:	7dfb      	ldrb	r3, [r7, #23]
 8000650:	4a2f      	ldr	r2, [pc, #188]	; (8000710 <HAL_UARTEx_RxEventCallback+0x194>)
 8000652:	2100      	movs	r1, #0
 8000654:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 8000656:	7dfb      	ldrb	r3, [r7, #23]
 8000658:	3301      	adds	r3, #1
 800065a:	75fb      	strb	r3, [r7, #23]
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	b29b      	uxth	r3, r3
 8000660:	887a      	ldrh	r2, [r7, #2]
 8000662:	429a      	cmp	r2, r3
 8000664:	d8f3      	bhi.n	800064e <HAL_UARTEx_RxEventCallback+0xd2>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) rxbuf, RXBUF_SIZE);
 8000666:	2208      	movs	r2, #8
 8000668:	4929      	ldr	r1, [pc, #164]	; (8000710 <HAL_UARTEx_RxEventCallback+0x194>)
 800066a:	482d      	ldr	r0, [pc, #180]	; (8000720 <HAL_UARTEx_RxEventCallback+0x1a4>)
 800066c:	f003 f931 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f022 0208 	bic.w	r2, r2, #8
 800067e:	601a      	str	r2, [r3, #0]
  }

  if (huart->Instance == USART2)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a28      	ldr	r2, [pc, #160]	; (8000728 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d13a      	bne.n	8000700 <HAL_UARTEx_RxEventCallback+0x184>
  {
	  state = MOTOR_LEFT_STATE;
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <HAL_UARTEx_RxEventCallback+0x198>)
 800068c:	2202      	movs	r2, #2
 800068e:	801a      	strh	r2, [r3, #0]
	  state_change = 0;
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <HAL_UARTEx_RxEventCallback+0x190>)
 8000692:	2200      	movs	r2, #0
 8000694:	801a      	strh	r2, [r3, #0]
      for (int b = 0; b <= 1; b++)
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	e00b      	b.n	80006b4 <HAL_UARTEx_RxEventCallback+0x138>
      {
        data_pwm[b] = rxbuf_2[b];
 800069c:	4a23      	ldr	r2, [pc, #140]	; (800072c <HAL_UARTEx_RxEventCallback+0x1b0>)
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	4413      	add	r3, r2
 80006a2:	7819      	ldrb	r1, [r3, #0]
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <HAL_UARTEx_RxEventCallback+0x19c>)
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	4413      	add	r3, r2
 80006aa:	460a      	mov	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
      for (int b = 0; b <= 1; b++)
 80006ae:	693b      	ldr	r3, [r7, #16]
 80006b0:	3301      	adds	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	ddf0      	ble.n	800069c <HAL_UARTEx_RxEventCallback+0x120>
      }
      pwm_t = atoi(data_pwm);
 80006ba:	4817      	ldr	r0, [pc, #92]	; (8000718 <HAL_UARTEx_RxEventCallback+0x19c>)
 80006bc:	f004 fa5e 	bl	8004b7c <atoi>
 80006c0:	4603      	mov	r3, r0
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_UARTEx_RxEventCallback+0x1a0>)
 80006c6:	801a      	strh	r2, [r3, #0]
      for (uint8_t i = 0U; i < Size; i++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	73fb      	strb	r3, [r7, #15]
 80006cc:	e006      	b.n	80006dc <HAL_UARTEx_RxEventCallback+0x160>
      {
        rxbuf_2[i] = '\0';
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0U; i < Size; i++)
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	3301      	adds	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	887a      	ldrh	r2, [r7, #2]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d8f3      	bhi.n	80006ce <HAL_UARTEx_RxEventCallback+0x152>
      }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxbuf_2, RXBUF_SIZE);
 80006e6:	2208      	movs	r2, #8
 80006e8:	4910      	ldr	r1, [pc, #64]	; (800072c <HAL_UARTEx_RxEventCallback+0x1b0>)
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80006ec:	f003 f8f1 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f022 0208 	bic.w	r2, r2, #8
 80006fe:	601a      	str	r2, [r3, #0]
  }
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40011000 	.word	0x40011000
 800070c:	20000324 	.word	0x20000324
 8000710:	20000310 	.word	0x20000310
 8000714:	20000322 	.word	0x20000322
 8000718:	20000328 	.word	0x20000328
 800071c:	20000320 	.word	0x20000320
 8000720:	20000108 	.word	0x20000108
 8000724:	20000190 	.word	0x20000190
 8000728:	40004400 	.word	0x40004400
 800072c:	20000318 	.word	0x20000318
 8000730:	2000014c 	.word	0x2000014c
 8000734:	20000250 	.word	0x20000250

08000738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073c:	f000 fe00 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000740:	f000 f8b4 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000744:	f000 facc 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000748:	f000 fa84 	bl	8000c54 <MX_DMA_Init>
  MX_TIM1_Init();
 800074c:	f000 f90e 	bl	800096c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000750:	f000 fa2c 	bl	8000bac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000754:	f000 f9b6 	bl	8000ac4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000758:	f000 fa52 	bl	8000c00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxbuf, RXBUF_SIZE);
 800075c:	2208      	movs	r2, #8
 800075e:	4946      	ldr	r1, [pc, #280]	; (8000878 <main+0x140>)
 8000760:	4846      	ldr	r0, [pc, #280]	; (800087c <main+0x144>)
 8000762:	f003 f8b6 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000766:	4b46      	ldr	r3, [pc, #280]	; (8000880 <main+0x148>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b44      	ldr	r3, [pc, #272]	; (8000880 <main+0x148>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f022 0208 	bic.w	r2, r2, #8
 8000774:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuf_2, RXBUF_SIZE);
 8000776:	2208      	movs	r2, #8
 8000778:	4942      	ldr	r1, [pc, #264]	; (8000884 <main+0x14c>)
 800077a:	4843      	ldr	r0, [pc, #268]	; (8000888 <main+0x150>)
 800077c:	f003 f8a9 	bl	80038d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000780:	4b42      	ldr	r3, [pc, #264]	; (800088c <main+0x154>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <main+0x154>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f022 0208 	bic.w	r2, r2, #8
 800078e:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000790:	2100      	movs	r1, #0
 8000792:	483f      	ldr	r0, [pc, #252]	; (8000890 <main+0x158>)
 8000794:	f002 f9f8 	bl	8002b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000798:	210c      	movs	r1, #12
 800079a:	483d      	ldr	r0, [pc, #244]	; (8000890 <main+0x158>)
 800079c:	f002 f9f4 	bl	8002b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007a0:	2104      	movs	r1, #4
 80007a2:	483c      	ldr	r0, [pc, #240]	; (8000894 <main+0x15c>)
 80007a4:	f002 f9f0 	bl	8002b88 <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  HAL_UART_Transmit(&huart2, (uint8_t *) "dungdeptrai", sizeof("hello dungdeptrai"), 100);

    switch (state)
 80007a8:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <main+0x160>)
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d84d      	bhi.n	800084c <main+0x114>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <main+0x80>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	080007ef 	.word	0x080007ef
 80007c0:	08000813 	.word	0x08000813
 80007c4:	08000831 	.word	0x08000831
    {
    case STOP_MOTOR_STATE:
    {
      pwm_t = 0;
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <main+0x164>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_t);
 80007ce:	4b33      	ldr	r3, [pc, #204]	; (800089c <main+0x164>)
 80007d0:	881a      	ldrh	r2, [r3, #0]
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <main+0x158>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_t);
 80007d8:	4b30      	ldr	r3, [pc, #192]	; (800089c <main+0x164>)
 80007da:	881a      	ldrh	r2, [r3, #0]
 80007dc:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <main+0x158>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_t);
 80007e2:	4b2e      	ldr	r3, [pc, #184]	; (800089c <main+0x164>)
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	4b2b      	ldr	r3, [pc, #172]	; (8000894 <main+0x15c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 80007ec:	e02e      	b.n	800084c <main+0x114>
    }
    case START_MOTOR_STATE:
    {
      pwm_t = 49;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <main+0x164>)
 80007f0:	2231      	movs	r2, #49	; 0x31
 80007f2:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_t);
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <main+0x164>)
 80007f6:	881a      	ldrh	r2, [r3, #0]
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <main+0x158>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <main+0x158>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_t);
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <main+0x164>)
 8000808:	881a      	ldrh	r2, [r3, #0]
 800080a:	4b22      	ldr	r3, [pc, #136]	; (8000894 <main+0x15c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000810:	e01c      	b.n	800084c <main+0x114>
    }
    case MOTOR_LEFT_STATE:
    {
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_t);
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <main+0x164>)
 8000814:	881a      	ldrh	r2, [r3, #0]
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <main+0x158>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <main+0x158>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2200      	movs	r2, #0
 8000822:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_t);
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <main+0x164>)
 8000826:	881a      	ldrh	r2, [r3, #0]
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <main+0x15c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 800082e:	e00d      	b.n	800084c <main+0x114>
    }
    case MOTOR_RIGHT_STATE:
    {
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <main+0x158>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2200      	movs	r2, #0
 8000836:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_t);
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <main+0x164>)
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <main+0x158>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <main+0x15c>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 800084a:	bf00      	nop
    }
    }

    if (state_change == 0)
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <main+0x168>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1a9      	bne.n	80007a8 <main+0x70>
    {
    	sprintf(duty_cycle_send, "%2d", pwm_t);
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <main+0x164>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4912      	ldr	r1, [pc, #72]	; (80008a4 <main+0x16c>)
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <main+0x170>)
 800085e:	f004 fa1d 	bl	8004c9c <siprintf>
		/* Transmit UART of Duty Cycle Polling */
        HAL_UART_Transmit(&huart2, (uint8_t *) duty_cycle_send, sizeof(duty_cycle_send), 100);
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	2202      	movs	r2, #2
 8000866:	4910      	ldr	r1, [pc, #64]	; (80008a8 <main+0x170>)
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <main+0x150>)
 800086a:	f002 ffa0 	bl	80037ae <HAL_UART_Transmit>
        state_change = 1;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <main+0x168>)
 8000870:	2201      	movs	r2, #1
 8000872:	801a      	strh	r2, [r3, #0]
    switch (state)
 8000874:	e798      	b.n	80007a8 <main+0x70>
 8000876:	bf00      	nop
 8000878:	20000310 	.word	0x20000310
 800087c:	20000108 	.word	0x20000108
 8000880:	20000190 	.word	0x20000190
 8000884:	20000318 	.word	0x20000318
 8000888:	2000014c 	.word	0x2000014c
 800088c:	20000250 	.word	0x20000250
 8000890:	20000078 	.word	0x20000078
 8000894:	200000c0 	.word	0x200000c0
 8000898:	20000322 	.word	0x20000322
 800089c:	20000320 	.word	0x20000320
 80008a0:	20000324 	.word	0x20000324
 80008a4:	080055fc 	.word	0x080055fc
 80008a8:	2000032c 	.word	0x2000032c

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0320 	add.w	r3, r7, #32
 80008b6:	2230      	movs	r2, #48	; 0x30
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fa0e 	bl	8004cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <SystemClock_Config+0xb8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <SystemClock_Config+0xb8>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <SystemClock_Config+0xb8>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ec:	2300      	movs	r3, #0
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <SystemClock_Config+0xbc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <SystemClock_Config+0xbc>)
 80008fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <SystemClock_Config+0xbc>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	2301      	movs	r3, #1
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fc31 	bl	8002188 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800092c:	f000 fa0a 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f001 fe94 	bl	8002678 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000956:	f000 f9f5 	bl	8000d44 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b096      	sub	sp, #88	; 0x58
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
 800099a:	615a      	str	r2, [r3, #20]
 800099c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2220      	movs	r2, #32
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f004 f999 	bl	8004cdc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009aa:	4b44      	ldr	r3, [pc, #272]	; (8000abc <MX_TIM1_Init+0x150>)
 80009ac:	4a44      	ldr	r2, [pc, #272]	; (8000ac0 <MX_TIM1_Init+0x154>)
 80009ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 80009b0:	4b42      	ldr	r3, [pc, #264]	; (8000abc <MX_TIM1_Init+0x150>)
 80009b2:	229f      	movs	r2, #159	; 0x9f
 80009b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <MX_TIM1_Init+0x150>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80009bc:	4b3f      	ldr	r3, [pc, #252]	; (8000abc <MX_TIM1_Init+0x150>)
 80009be:	2263      	movs	r2, #99	; 0x63
 80009c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b3e      	ldr	r3, [pc, #248]	; (8000abc <MX_TIM1_Init+0x150>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c8:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <MX_TIM1_Init+0x150>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009ce:	4b3b      	ldr	r3, [pc, #236]	; (8000abc <MX_TIM1_Init+0x150>)
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d4:	4839      	ldr	r0, [pc, #228]	; (8000abc <MX_TIM1_Init+0x150>)
 80009d6:	f002 f82f 	bl	8002a38 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80009e0:	f000 f9b0 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ee:	4619      	mov	r1, r3
 80009f0:	4832      	ldr	r0, [pc, #200]	; (8000abc <MX_TIM1_Init+0x150>)
 80009f2:	f002 fa3b 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80009fc:	f000 f9a2 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a00:	482e      	ldr	r0, [pc, #184]	; (8000abc <MX_TIM1_Init+0x150>)
 8000a02:	f002 f868 	bl	8002ad6 <HAL_TIM_PWM_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000a0c:	f000 f99a 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4827      	ldr	r0, [pc, #156]	; (8000abc <MX_TIM1_Init+0x150>)
 8000a20:	f002 fdb8 	bl	8003594 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000a2a:	f000 f98b 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2e:	2360      	movs	r3, #96	; 0x60
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	4619      	mov	r1, r3
 8000a52:	481a      	ldr	r0, [pc, #104]	; (8000abc <MX_TIM1_Init+0x150>)
 8000a54:	f002 f948 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000a5e:	f000 f971 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a66:	220c      	movs	r2, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_TIM1_Init+0x150>)
 8000a6c:	f002 f93c 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000a76:	f000 f965 	bl	8000d44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_TIM1_Init+0x150>)
 8000a9e:	f002 fde7 	bl	8003670 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000aa8:	f000 f94c 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <MX_TIM1_Init+0x150>)
 8000aae:	f000 f9b3 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3758      	adds	r7, #88	; 0x58
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000078 	.word	0x20000078
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af4:	4b2c      	ldr	r3, [pc, #176]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000afc:	4b2a      	ldr	r3, [pc, #168]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000afe:	229f      	movs	r2, #159	; 0x9f
 8000b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000b08:	4b27      	ldr	r3, [pc, #156]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b0a:	2263      	movs	r2, #99	; 0x63
 8000b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b1a:	4823      	ldr	r0, [pc, #140]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b1c:	f001 ff8c 	bl	8002a38 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b26:	f000 f90d 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b34:	4619      	mov	r1, r3
 8000b36:	481c      	ldr	r0, [pc, #112]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b38:	f002 f998 	bl	8002e6c <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b42:	f000 f8ff 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b46:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b48:	f001 ffc5 	bl	8002ad6 <HAL_TIM_PWM_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000b52:	f000 f8f7 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0320 	add.w	r3, r7, #32
 8000b62:	4619      	mov	r1, r3
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b66:	f002 fd15 	bl	8003594 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000b70:	f000 f8e8 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b74:	2360      	movs	r3, #96	; 0x60
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2204      	movs	r2, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b8c:	f002 f8ac 	bl	8002ce8 <HAL_TIM_PWM_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000b96:	f000 f8d5 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM2_Init+0xe4>)
 8000b9c:	f000 f93c 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000ba0:	bf00      	nop
 8000ba2:	3738      	adds	r7, #56	; 0x38
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000c0 	.word	0x200000c0

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f002 fd96 	bl	8003714 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f8a9 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000108 	.word	0x20000108
 8000bfc:	40011000 	.word	0x40011000

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f002 fd6c 	bl	8003714 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f000 f87f 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000014c 	.word	0x2000014c
 8000c50:	40004400 	.word	0x40004400

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_DMA_Init+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <MX_DMA_Init+0x88>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_DMA_Init+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_DMA_Init+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_DMA_Init+0x88>)
 8000c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_DMA_Init+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2010      	movs	r0, #16
 8000c98:	f000 fc9f 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c9c:	2010      	movs	r0, #16
 8000c9e:	f000 fcb8 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2011      	movs	r0, #17
 8000ca8:	f000 fc97 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cac:	2011      	movs	r0, #17
 8000cae:	f000 fcb0 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	203a      	movs	r0, #58	; 0x3a
 8000cb8:	f000 fc8f 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cbc:	203a      	movs	r0, #58	; 0x3a
 8000cbe:	f000 fca8 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2046      	movs	r0, #70	; 0x46
 8000cc8:	f000 fc87 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ccc:	2046      	movs	r0, #70	; 0x46
 8000cce:	f000 fca0 	bl	8001612 <HAL_NVIC_EnableIRQ>

}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_GPIO_Init+0x5c>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <MX_GPIO_Init+0x5c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_GPIO_Init+0x5c>)
 8000d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2160      	movs	r1, #96	; 0x60
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <MX_GPIO_Init+0x60>)
 8000d16:	f001 fa1d 	bl	8002154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d1a:	2360      	movs	r3, #96	; 0x60
 8000d1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_GPIO_Init+0x60>)
 8000d30:	f001 f88c 	bl	8001e4c <HAL_GPIO_Init>

}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_MspInit+0x58>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_MspInit+0x58>)
 8000d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d64:	6453      	str	r3, [r2, #68]	; 0x44
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_MspInit+0x58>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_MspInit+0x58>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_MspInit+0x58>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x58>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	2005      	movs	r0, #5
 8000d94:	f000 fc21 	bl	80015da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f000 fc3a 	bl	8001612 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <HAL_TIM_Base_MspInit+0x64>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10e      	bne.n	8000ddc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000dda:	e012      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de4:	d10d      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_Base_MspInit+0x68>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	68bb      	ldr	r3, [r7, #8]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40010000 	.word	0x40010000
 8000e14:	40023800 	.word	0x40023800

08000e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <HAL_TIM_MspPostInit+0xb0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d11f      	bne.n	8000e7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_TIM_MspPostInit+0xb4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <HAL_TIM_MspPostInit+0xb4>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_TIM_MspPostInit+0xb4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000e56:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4817      	ldr	r0, [pc, #92]	; (8000ed0 <HAL_TIM_MspPostInit+0xb8>)
 8000e74:	f000 ffea 	bl	8001e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e78:	e022      	b.n	8000ec0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e82:	d11d      	bne.n	8000ec0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <HAL_TIM_MspPostInit+0xb4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_TIM_MspPostInit+0xb4>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_TIM_MspPostInit+0xb4>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_TIM_MspPostInit+0xb8>)
 8000ebc:	f000 ffc6 	bl	8001e4c <HAL_GPIO_Init>
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010000 	.word	0x40010000
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a97      	ldr	r2, [pc, #604]	; (8001150 <HAL_UART_MspInit+0x27c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 8092 	bne.w	800101c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	4b95      	ldr	r3, [pc, #596]	; (8001154 <HAL_UART_MspInit+0x280>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a94      	ldr	r2, [pc, #592]	; (8001154 <HAL_UART_MspInit+0x280>)
 8000f02:	f043 0310 	orr.w	r3, r3, #16
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_UART_MspInit+0x280>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f003 0310 	and.w	r3, r3, #16
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	4b8e      	ldr	r3, [pc, #568]	; (8001154 <HAL_UART_MspInit+0x280>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a8d      	ldr	r2, [pc, #564]	; (8001154 <HAL_UART_MspInit+0x280>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b8b      	ldr	r3, [pc, #556]	; (8001154 <HAL_UART_MspInit+0x280>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f42:	2307      	movs	r3, #7
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 031c 	add.w	r3, r7, #28
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4882      	ldr	r0, [pc, #520]	; (8001158 <HAL_UART_MspInit+0x284>)
 8000f4e:	f000 ff7d 	bl	8001e4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f54:	4a82      	ldr	r2, [pc, #520]	; (8001160 <HAL_UART_MspInit+0x28c>)
 8000f56:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000f58:	4b80      	ldr	r3, [pc, #512]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f60:	4b7e      	ldr	r3, [pc, #504]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f66:	4b7d      	ldr	r3, [pc, #500]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6c:	4b7b      	ldr	r3, [pc, #492]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f72:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f74:	4b79      	ldr	r3, [pc, #484]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7a:	4b78      	ldr	r3, [pc, #480]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000f80:	4b76      	ldr	r3, [pc, #472]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f86:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f8c:	4b73      	ldr	r3, [pc, #460]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000f92:	4872      	ldr	r0, [pc, #456]	; (800115c <HAL_UART_MspInit+0x288>)
 8000f94:	f000 fb58 	bl	8001648 <HAL_DMA_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000f9e:	f7ff fed1 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a6d      	ldr	r2, [pc, #436]	; (800115c <HAL_UART_MspInit+0x288>)
 8000fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fa8:	4a6c      	ldr	r2, [pc, #432]	; (800115c <HAL_UART_MspInit+0x288>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000fae:	4b6d      	ldr	r3, [pc, #436]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fb0:	4a6d      	ldr	r2, [pc, #436]	; (8001168 <HAL_UART_MspInit+0x294>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000fb4:	4b6b      	ldr	r3, [pc, #428]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fba:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fbc:	4b69      	ldr	r3, [pc, #420]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc2:	4b68      	ldr	r3, [pc, #416]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc8:	4b66      	ldr	r3, [pc, #408]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd0:	4b64      	ldr	r3, [pc, #400]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd6:	4b63      	ldr	r3, [pc, #396]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000fdc:	4b61      	ldr	r3, [pc, #388]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fe8:	4b5e      	ldr	r3, [pc, #376]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fee:	485d      	ldr	r0, [pc, #372]	; (8001164 <HAL_UART_MspInit+0x290>)
 8000ff0:	f000 fb2a 	bl	8001648 <HAL_DMA_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000ffa:	f7ff fea3 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a58      	ldr	r2, [pc, #352]	; (8001164 <HAL_UART_MspInit+0x290>)
 8001002:	635a      	str	r2, [r3, #52]	; 0x34
 8001004:	4a57      	ldr	r2, [pc, #348]	; (8001164 <HAL_UART_MspInit+0x290>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	2025      	movs	r0, #37	; 0x25
 8001010:	f000 fae3 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001014:	2025      	movs	r0, #37	; 0x25
 8001016:	f000 fafc 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800101a:	e095      	b.n	8001148 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a52      	ldr	r2, [pc, #328]	; (800116c <HAL_UART_MspInit+0x298>)
 8001022:	4293      	cmp	r3, r2
 8001024:	f040 8090 	bne.w	8001148 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	4b49      	ldr	r3, [pc, #292]	; (8001154 <HAL_UART_MspInit+0x280>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a48      	ldr	r2, [pc, #288]	; (8001154 <HAL_UART_MspInit+0x280>)
 8001032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <HAL_UART_MspInit+0x280>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4b42      	ldr	r3, [pc, #264]	; (8001154 <HAL_UART_MspInit+0x280>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a41      	ldr	r2, [pc, #260]	; (8001154 <HAL_UART_MspInit+0x280>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_UART_MspInit+0x280>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001060:	230c      	movs	r3, #12
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001070:	2307      	movs	r3, #7
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4837      	ldr	r0, [pc, #220]	; (8001158 <HAL_UART_MspInit+0x284>)
 800107c:	f000 fee6 	bl	8001e4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001080:	4b3b      	ldr	r3, [pc, #236]	; (8001170 <HAL_UART_MspInit+0x29c>)
 8001082:	4a3c      	ldr	r2, [pc, #240]	; (8001174 <HAL_UART_MspInit+0x2a0>)
 8001084:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_UART_MspInit+0x29c>)
 8001088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800108c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_UART_MspInit+0x29c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001094:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_UART_MspInit+0x29c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800109a:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HAL_UART_MspInit+0x29c>)
 800109c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a8:	4b31      	ldr	r3, [pc, #196]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b4:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010c0:	482b      	ldr	r0, [pc, #172]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010c2:	f000 fac1 	bl	8001648 <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80010cc:	f7ff fe3a 	bl	8000d44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
 80010d6:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_UART_MspInit+0x29c>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_UART_MspInit+0x2a8>)
 80010e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010e2:	4b25      	ldr	r3, [pc, #148]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 80010e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010ea:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 80010f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010fc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001104:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800111c:	4816      	ldr	r0, [pc, #88]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 800111e:	f000 fa93 	bl	8001648 <HAL_DMA_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001128:	f7ff fe0c 	bl	8000d44 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x2a4>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2026      	movs	r0, #38	; 0x26
 800113e:	f000 fa4c 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 fa65 	bl	8001612 <HAL_NVIC_EnableIRQ>
}
 8001148:	bf00      	nop
 800114a:	3730      	adds	r7, #48	; 0x30
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40011000 	.word	0x40011000
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	20000190 	.word	0x20000190
 8001160:	40026440 	.word	0x40026440
 8001164:	200001f0 	.word	0x200001f0
 8001168:	400264b8 	.word	0x400264b8
 800116c:	40004400 	.word	0x40004400
 8001170:	20000250 	.word	0x20000250
 8001174:	40026088 	.word	0x40026088
 8001178:	200002b0 	.word	0x200002b0
 800117c:	400260a0 	.word	0x400260a0

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f90a 	bl	80013e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011e8:	4802      	ldr	r0, [pc, #8]	; (80011f4 <DMA1_Stream5_IRQHandler+0x10>)
 80011ea:	f000 fbc5 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000250 	.word	0x20000250

080011f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <DMA1_Stream6_IRQHandler+0x10>)
 80011fe:	f000 fbbb 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200002b0 	.word	0x200002b0

0800120c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <USART1_IRQHandler+0x10>)
 8001212:	f002 fbc3 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000108 	.word	0x20000108

08001220 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <USART2_IRQHandler+0x10>)
 8001226:	f002 fbb9 	bl	800399c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000014c 	.word	0x2000014c

08001234 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <DMA2_Stream2_IRQHandler+0x10>)
 800123a:	f000 fb9d 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000190 	.word	0x20000190

08001248 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <DMA2_Stream7_IRQHandler+0x10>)
 800124e:	f000 fb93 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001f0 	.word	0x200001f0

0800125c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001264:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <_sbrk+0x5c>)
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <_sbrk+0x60>)
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <_sbrk+0x64>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <_sbrk+0x64>)
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <_sbrk+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800128c:	f003 fd2e 	bl	8004cec <__errno>
 8001290:	4603      	mov	r3, r0
 8001292:	220c      	movs	r2, #12
 8001294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	e009      	b.n	80012b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <_sbrk+0x64>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <_sbrk+0x64>)
 80012ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20010000 	.word	0x20010000
 80012bc:	00000400 	.word	0x00000400
 80012c0:	20000330 	.word	0x20000330
 80012c4:	20000480 	.word	0x20000480

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <SystemInit+0x20>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <SystemInit+0x20>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001316:	f7ff ffd7 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f003 fced 	bl	8004cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fa0b 	bl	8000738 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001330:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 8001334:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001338:	20000480 	.word	0x20000480

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f92b 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f000 f808 	bl	8001384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fcec 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x54>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_InitTick+0x58>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139a:	fbb3 f3f1 	udiv	r3, r3, r1
 800139e:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 f943 	bl	800162e <HAL_SYSTICK_Config>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e00e      	b.n	80013d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	d80a      	bhi.n	80013ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b8:	2200      	movs	r2, #0
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 30ff 	mov.w	r0, #4294967295
 80013c0:	f000 f90b 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <HAL_InitTick+0x5c>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e000      	b.n	80013d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000008 	.word	0x20000008
 80013e0:	20000004 	.word	0x20000004

080013e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x20>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b06      	ldr	r3, [pc, #24]	; (8001408 <HAL_IncTick+0x24>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a04      	ldr	r2, [pc, #16]	; (8001408 <HAL_IncTick+0x24>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000008 	.word	0x20000008
 8001408:	20000334 	.word	0x20000334

0800140c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <HAL_GetTick+0x14>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000334 	.word	0x20000334

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	; (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	; (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff29 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff3e 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff31 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff feda 	bl	800140c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e099      	b.n	8001798 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001684:	e00f      	b.n	80016a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001686:	f7ff fec1 	bl	800140c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b05      	cmp	r3, #5
 8001692:	d908      	bls.n	80016a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2220      	movs	r2, #32
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2203      	movs	r2, #3
 800169e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e078      	b.n	8001798 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e8      	bne.n	8001686 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <HAL_DMA_Init+0x158>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d107      	bne.n	8001710 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4313      	orrs	r3, r2
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f023 0307 	bic.w	r3, r3, #7
 8001726:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4313      	orrs	r3, r2
 8001730:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	2b04      	cmp	r3, #4
 8001738:	d117      	bne.n	800176a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	4313      	orrs	r3, r2
 8001742:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00e      	beq.n	800176a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fb01 	bl	8001d54 <DMA_CheckFifoParam>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001766:	2301      	movs	r3, #1
 8001768:	e016      	b.n	8001798 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fab8 	bl	8001ce8 <DMA_CalcBaseAndBitshift>
 8001778:	4603      	mov	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001780:	223f      	movs	r2, #63	; 0x3f
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	f010803f 	.word	0xf010803f

080017a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d101      	bne.n	80017ca <HAL_DMA_Start_IT+0x26>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e040      	b.n	800184c <HAL_DMA_Start_IT+0xa8>
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d12f      	bne.n	800183e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2202      	movs	r2, #2
 80017e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fa4a 	bl	8001c8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	223f      	movs	r2, #63	; 0x3f
 80017fe:	409a      	lsls	r2, r3
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0216 	orr.w	r2, r2, #22
 8001812:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	2b00      	cmp	r3, #0
 800181a:	d007      	beq.n	800182c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f042 0208 	orr.w	r2, r2, #8
 800182a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0201 	orr.w	r2, r2, #1
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e005      	b.n	800184a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001846:	2302      	movs	r3, #2
 8001848:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800184a:	7dfb      	ldrb	r3, [r7, #23]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001862:	f7ff fdd3 	bl	800140c <HAL_GetTick>
 8001866:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d008      	beq.n	8001886 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2280      	movs	r2, #128	; 0x80
 8001878:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e052      	b.n	800192c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0216 	bic.w	r2, r2, #22
 8001894:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	695a      	ldr	r2, [r3, #20]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <HAL_DMA_Abort+0x62>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0201 	bic.w	r2, r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d6:	e013      	b.n	8001900 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d8:	f7ff fd98 	bl	800140c <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d90c      	bls.n	8001900 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2203      	movs	r2, #3
 80018f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e015      	b.n	800192c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e4      	bne.n	80018d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001912:	223f      	movs	r2, #63	; 0x3f
 8001914:	409a      	lsls	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d004      	beq.n	8001952 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00c      	b.n	800196c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2205      	movs	r2, #5
 8001956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0201 	bic.w	r2, r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001984:	4b8e      	ldr	r3, [pc, #568]	; (8001bc0 <HAL_DMA_IRQHandler+0x248>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a8e      	ldr	r2, [pc, #568]	; (8001bc4 <HAL_DMA_IRQHandler+0x24c>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	0a9b      	lsrs	r3, r3, #10
 8001990:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	2208      	movs	r2, #8
 80019a4:	409a      	lsls	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d013      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0204 	bic.w	r2, r2, #4
 80019ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d0:	2208      	movs	r2, #8
 80019d2:	409a      	lsls	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2201      	movs	r2, #1
 80019ea:	409a      	lsls	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d012      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a06:	2201      	movs	r2, #1
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a12:	f043 0202 	orr.w	r2, r3, #2
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2204      	movs	r2, #4
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d012      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f043 0204 	orr.w	r2, r3, #4
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	2210      	movs	r2, #16
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d043      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d03c      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	2210      	movs	r2, #16
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d018      	beq.n	8001aba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d024      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
 8001aa6:	e01f      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01b      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	4798      	blx	r3
 8001ab8:	e016      	b.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0208 	bic.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2220      	movs	r2, #32
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 808f 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f000 8087 	beq.w	8001c18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2220      	movs	r2, #32
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d136      	bne.n	8001b90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0216 	bic.w	r2, r2, #22
 8001b30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <HAL_DMA_IRQHandler+0x1da>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0208 	bic.w	r2, r2, #8
 8001b60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	223f      	movs	r2, #63	; 0x3f
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d07e      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
        }
        return;
 8001b8e:	e079      	b.n	8001c84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01d      	beq.n	8001bda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10d      	bne.n	8001bc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d031      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
 8001bbc:	e02c      	b.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
 8001bbe:	bf00      	nop
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	4798      	blx	r3
 8001bd8:	e01e      	b.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10f      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d032      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2205      	movs	r2, #5
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0201 	bic.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d307      	bcc.n	8001c60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f2      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x2cc>
 8001c5e:	e000      	b.n	8001c62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c84:	bf00      	nop
    }
  }
}
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d108      	bne.n	8001ccc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cca:	e007      	b.n	8001cdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	60da      	str	r2, [r3, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3b10      	subs	r3, #16
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <DMA_CalcBaseAndBitshift+0x64>)
 8001cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <DMA_CalcBaseAndBitshift+0x68>)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d909      	bls.n	8001d2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d1e:	f023 0303 	bic.w	r3, r3, #3
 8001d22:	1d1a      	adds	r2, r3, #4
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58
 8001d28:	e007      	b.n	8001d3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d32:	f023 0303 	bic.w	r3, r3, #3
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	aaaaaaab 	.word	0xaaaaaaab
 8001d50:	08005618 	.word	0x08005618

08001d54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d11f      	bne.n	8001dae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d856      	bhi.n	8001e22 <DMA_CheckFifoParam+0xce>
 8001d74:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <DMA_CheckFifoParam+0x28>)
 8001d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7a:	bf00      	nop
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001d9f 	.word	0x08001d9f
 8001d84:	08001d8d 	.word	0x08001d8d
 8001d88:	08001e23 	.word	0x08001e23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d046      	beq.n	8001e26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d9c:	e043      	b.n	8001e26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001da6:	d140      	bne.n	8001e2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dac:	e03d      	b.n	8001e2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001db6:	d121      	bne.n	8001dfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d837      	bhi.n	8001e2e <DMA_CheckFifoParam+0xda>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <DMA_CheckFifoParam+0x70>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001dd5 	.word	0x08001dd5
 8001dc8:	08001ddb 	.word	0x08001ddb
 8001dcc:	08001dd5 	.word	0x08001dd5
 8001dd0:	08001ded 	.word	0x08001ded
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd8:	e030      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d025      	beq.n	8001e32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dea:	e022      	b.n	8001e32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df4:	d11f      	bne.n	8001e36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dfa:	e01c      	b.n	8001e36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d903      	bls.n	8001e0a <DMA_CheckFifoParam+0xb6>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d003      	beq.n	8001e10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e08:	e018      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e0e:	e015      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00e      	beq.n	8001e3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e20:	e00b      	b.n	8001e3a <DMA_CheckFifoParam+0xe6>
      break;
 8001e22:	bf00      	nop
 8001e24:	e00a      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e008      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e006      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      break;
 8001e2e:	bf00      	nop
 8001e30:	e004      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      break;
 8001e32:	bf00      	nop
 8001e34:	e002      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e36:	bf00      	nop
 8001e38:	e000      	b.n	8001e3c <DMA_CheckFifoParam+0xe8>
      break;
 8001e3a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop

08001e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b089      	sub	sp, #36	; 0x24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	e159      	b.n	800211c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f040 8148 	bne.w	8002116 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d005      	beq.n	8001e9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d130      	bne.n	8001f00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0201 	and.w	r2, r3, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d017      	beq.n	8001f3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d123      	bne.n	8001f90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	08da      	lsrs	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3208      	adds	r2, #8
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80a2 	beq.w	8002116 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_GPIO_Init+0x2e8>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a56      	ldr	r2, [pc, #344]	; (8002134 <HAL_GPIO_Init+0x2e8>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_GPIO_Init+0x2e8>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fee:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_GPIO_Init+0x2ec>)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_GPIO_Init+0x2f0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x202>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a48      	ldr	r2, [pc, #288]	; (8002140 <HAL_GPIO_Init+0x2f4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x1fe>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a47      	ldr	r2, [pc, #284]	; (8002144 <HAL_GPIO_Init+0x2f8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x1fa>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a46      	ldr	r2, [pc, #280]	; (8002148 <HAL_GPIO_Init+0x2fc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x1f6>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a45      	ldr	r2, [pc, #276]	; (800214c <HAL_GPIO_Init+0x300>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x1f2>
 800203a:	2304      	movs	r3, #4
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x204>
 800203e:	2307      	movs	r3, #7
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x204>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x204>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x204>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x204>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	; (8002138 <HAL_GPIO_Init+0x2ec>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b38      	ldr	r3, [pc, #224]	; (8002150 <HAL_GPIO_Init+0x304>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <HAL_GPIO_Init+0x304>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b2d      	ldr	r3, [pc, #180]	; (8002150 <HAL_GPIO_Init+0x304>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_GPIO_Init+0x304>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b23      	ldr	r3, [pc, #140]	; (8002150 <HAL_GPIO_Init+0x304>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <HAL_GPIO_Init+0x304>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_GPIO_Init+0x304>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_GPIO_Init+0x304>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f aea2 	bls.w	8001e68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40013c00 	.word	0x40013c00

08002154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
 8002160:	4613      	mov	r3, r2
 8002162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002164:	787b      	ldrb	r3, [r7, #1]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216a:	887a      	ldrh	r2, [r7, #2]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002170:	e003      	b.n	800217a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	041a      	lsls	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	619a      	str	r2, [r3, #24]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e267      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d075      	beq.n	8002292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a6:	4b88      	ldr	r3, [pc, #544]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d00c      	beq.n	80021cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b2:	4b85      	ldr	r3, [pc, #532]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d112      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021be:	4b82      	ldr	r3, [pc, #520]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	4b7e      	ldr	r3, [pc, #504]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d05b      	beq.n	8002290 <HAL_RCC_OscConfig+0x108>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d157      	bne.n	8002290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e242      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d106      	bne.n	80021fc <HAL_RCC_OscConfig+0x74>
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e01d      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b70      	ldr	r3, [pc, #448]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a6f      	ldr	r2, [pc, #444]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b6d      	ldr	r3, [pc, #436]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6c      	ldr	r2, [pc, #432]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e00b      	b.n	8002238 <HAL_RCC_OscConfig+0xb0>
 8002220:	4b69      	ldr	r3, [pc, #420]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4b66      	ldr	r3, [pc, #408]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a65      	ldr	r2, [pc, #404]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7ff f8e4 	bl	800140c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff f8e0 	bl	800140c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e207      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225a:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0xc0>
 8002266:	e014      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7ff f8d0 	bl	800140c <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002270:	f7ff f8cc 	bl	800140c <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b64      	cmp	r3, #100	; 0x64
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e1f3      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002282:	4b51      	ldr	r3, [pc, #324]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f0      	bne.n	8002270 <HAL_RCC_OscConfig+0xe8>
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d11c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b6:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e1c7      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4937      	ldr	r1, [pc, #220]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ee:	e03a      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d020      	beq.n	800233a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f8:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HAL_RCC_OscConfig+0x244>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff f885 	bl	800140c <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002306:	f7ff f881 	bl	800140c <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1a8      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002318:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002324:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4925      	ldr	r1, [pc, #148]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 8002334:	4313      	orrs	r3, r2
 8002336:	600b      	str	r3, [r1, #0]
 8002338:	e015      	b.n	8002366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x244>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff f864 	bl	800140c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002348:	f7ff f860 	bl	800140c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e187      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235a:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d036      	beq.n	80023e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x248>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff f844 	bl	800140c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002388:	f7ff f840 	bl	800140c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e167      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_OscConfig+0x240>)
 800239c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x200>
 80023a6:	e01b      	b.n	80023e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_RCC_OscConfig+0x248>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7ff f82d 	bl	800140c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	e00e      	b.n	80023d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7ff f829 	bl	800140c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d907      	bls.n	80023d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e150      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000
 80023d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d4:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80023d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ea      	bne.n	80023b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 8097 	beq.w	800251c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2300      	movs	r3, #0
 80023f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f2:	4b81      	ldr	r3, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	4b7d      	ldr	r3, [pc, #500]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a7c      	ldr	r2, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b7a      	ldr	r3, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800241a:	2301      	movs	r3, #1
 800241c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241e:	4b77      	ldr	r3, [pc, #476]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002426:	2b00      	cmp	r3, #0
 8002428:	d118      	bne.n	800245c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800242a:	4b74      	ldr	r3, [pc, #464]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a73      	ldr	r2, [pc, #460]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 8002430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002436:	f7fe ffe9 	bl	800140c <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243e:	f7fe ffe5 	bl	800140c <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e10c      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002450:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <HAL_RCC_OscConfig+0x474>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x2ea>
 8002464:	4b64      	ldr	r3, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e01c      	b.n	80024ac <HAL_RCC_OscConfig+0x324>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b05      	cmp	r3, #5
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x30c>
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800247c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247e:	4a5e      	ldr	r2, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002480:	f043 0304 	orr.w	r3, r3, #4
 8002484:	6713      	str	r3, [r2, #112]	; 0x70
 8002486:	4b5c      	ldr	r3, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800248a:	4a5b      	ldr	r2, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6713      	str	r3, [r2, #112]	; 0x70
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0x324>
 8002494:	4b58      	ldr	r3, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002498:	4a57      	ldr	r2, [pc, #348]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800249a:	f023 0301 	bic.w	r3, r3, #1
 800249e:	6713      	str	r3, [r2, #112]	; 0x70
 80024a0:	4b55      	ldr	r3, [pc, #340]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024a6:	f023 0304 	bic.w	r3, r3, #4
 80024aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7fe ffaa 	bl	800140c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024bc:	f7fe ffa6 	bl	800140c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e0cb      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80024d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ee      	beq.n	80024bc <HAL_RCC_OscConfig+0x334>
 80024de:	e014      	b.n	800250a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7fe ff94 	bl	800140c <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e8:	f7fe ff90 	bl	800140c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0b5      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ee      	bne.n	80024e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b39      	ldr	r3, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	4a38      	ldr	r2, [pc, #224]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800251a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a1 	beq.w	8002668 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d05c      	beq.n	80025ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d141      	bne.n	80025be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7fe ff64 	bl	800140c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7fe ff60 	bl	800140c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e087      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69da      	ldr	r2, [r3, #28]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	019b      	lsls	r3, r3, #6
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	085b      	lsrs	r3, r3, #1
 800257e:	3b01      	subs	r3, #1
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe ff39 	bl	800140c <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe ff35 	bl	800140c <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e05c      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x416>
 80025bc:	e054      	b.n	8002668 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x478>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe ff22 	bl	800140c <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe ff1e 	bl	800140c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e045      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x444>
 80025ea:	e03d      	b.n	8002668 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e038      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_OscConfig+0x4ec>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d028      	beq.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d121      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11a      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263c:	4293      	cmp	r3, r2
 800263e:	d111      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0cc      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800268c:	4b68      	ldr	r3, [pc, #416]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d90c      	bls.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269a:	4b65      	ldr	r3, [pc, #404]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a2:	4b63      	ldr	r3, [pc, #396]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b8      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d020      	beq.n	8002702 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026cc:	4b59      	ldr	r3, [pc, #356]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b50      	ldr	r3, [pc, #320]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	494d      	ldr	r1, [pc, #308]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d044      	beq.n	8002798 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d119      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e07f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b02      	cmp	r3, #2
 800272c:	d003      	beq.n	8002736 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002732:	2b03      	cmp	r3, #3
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002736:	4b3f      	ldr	r3, [pc, #252]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e067      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4934      	ldr	r1, [pc, #208]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002768:	f7fe fe50 	bl	800140c <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	e00a      	b.n	8002786 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002770:	f7fe fe4c 	bl	800140c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04f      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 020c 	and.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	429a      	cmp	r2, r3
 8002796:	d1eb      	bne.n	8002770 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d20c      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b20      	ldr	r3, [pc, #128]	; (8002830 <HAL_RCC_ClockConfig+0x1b8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e032      	b.n	8002826 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4916      	ldr	r1, [pc, #88]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ea:	4b12      	ldr	r3, [pc, #72]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	490e      	ldr	r1, [pc, #56]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fe:	f000 f821 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002802:	4602      	mov	r2, r0
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	490a      	ldr	r1, [pc, #40]	; (8002838 <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	5ccb      	ldrb	r3, [r1, r3]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a09      	ldr	r2, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x1c8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fdb0 	bl	8001384 <HAL_InitTick>

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00
 8002834:	40023800 	.word	0x40023800
 8002838:	08005600 	.word	0x08005600
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b090      	sub	sp, #64	; 0x40
 800284a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
 8002850:	2300      	movs	r3, #0
 8002852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800285c:	4b59      	ldr	r3, [pc, #356]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d00d      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x40>
 8002868:	2b08      	cmp	r3, #8
 800286a:	f200 80a1 	bhi.w	80029b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_RCC_GetSysClockFreq+0x34>
 8002872:	2b04      	cmp	r3, #4
 8002874:	d003      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0x3a>
 8002876:	e09b      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002878:	4b53      	ldr	r3, [pc, #332]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800287a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800287c:	e09b      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287e:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002882:	e098      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002884:	4b4f      	ldr	r3, [pc, #316]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288e:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d028      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	099b      	lsrs	r3, r3, #6
 80028a0:	2200      	movs	r2, #0
 80028a2:	623b      	str	r3, [r7, #32]
 80028a4:	627a      	str	r2, [r7, #36]	; 0x24
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028ac:	2100      	movs	r1, #0
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_GetSysClockFreq+0x188>)
 80028b0:	fb03 f201 	mul.w	r2, r3, r1
 80028b4:	2300      	movs	r3, #0
 80028b6:	fb00 f303 	mul.w	r3, r0, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	4a43      	ldr	r2, [pc, #268]	; (80029cc <HAL_RCC_GetSysClockFreq+0x188>)
 80028be:	fba0 1202 	umull	r1, r2, r0, r2
 80028c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028c4:	460a      	mov	r2, r1
 80028c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80028c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ca:	4413      	add	r3, r2
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d0:	2200      	movs	r2, #0
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	61fa      	str	r2, [r7, #28]
 80028d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028de:	f7fd fccf 	bl	8000280 <__aeabi_uldivmod>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4613      	mov	r3, r2
 80028e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ea:	e053      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ec:	4b35      	ldr	r3, [pc, #212]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	099b      	lsrs	r3, r3, #6
 80028f2:	2200      	movs	r2, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	617a      	str	r2, [r7, #20]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028fe:	f04f 0b00 	mov.w	fp, #0
 8002902:	4652      	mov	r2, sl
 8002904:	465b      	mov	r3, fp
 8002906:	f04f 0000 	mov.w	r0, #0
 800290a:	f04f 0100 	mov.w	r1, #0
 800290e:	0159      	lsls	r1, r3, #5
 8002910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002914:	0150      	lsls	r0, r2, #5
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	ebb2 080a 	subs.w	r8, r2, sl
 800291e:	eb63 090b 	sbc.w	r9, r3, fp
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800292e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002932:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002936:	ebb2 0408 	subs.w	r4, r2, r8
 800293a:	eb63 0509 	sbc.w	r5, r3, r9
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	00eb      	lsls	r3, r5, #3
 8002948:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800294c:	00e2      	lsls	r2, r4, #3
 800294e:	4614      	mov	r4, r2
 8002950:	461d      	mov	r5, r3
 8002952:	eb14 030a 	adds.w	r3, r4, sl
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	eb45 030b 	adc.w	r3, r5, fp
 800295c:	607b      	str	r3, [r7, #4]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4500 	ldrd	r4, r5, [r7]
 800296a:	4629      	mov	r1, r5
 800296c:	028b      	lsls	r3, r1, #10
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002974:	4621      	mov	r1, r4
 8002976:	028a      	lsls	r2, r1, #10
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297e:	2200      	movs	r2, #0
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	60fa      	str	r2, [r7, #12]
 8002984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002988:	f7fd fc7a 	bl	8000280 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80029b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3740      	adds	r7, #64	; 0x40
 80029bc:	46bd      	mov	sp, r7
 80029be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
 80029c8:	00f42400 	.word	0x00f42400
 80029cc:	017d7840 	.word	0x017d7840

080029d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	20000000 	.word	0x20000000

080029e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029ec:	f7ff fff0 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 80029f0:	4602      	mov	r2, r0
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0a9b      	lsrs	r3, r3, #10
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	4903      	ldr	r1, [pc, #12]	; (8002a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80029fe:	5ccb      	ldrb	r3, [r1, r3]
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	08005610 	.word	0x08005610

08002a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a14:	f7ff ffdc 	bl	80029d0 <HAL_RCC_GetHCLKFreq>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	0b5b      	lsrs	r3, r3, #13
 8002a20:	f003 0307 	and.w	r3, r3, #7
 8002a24:	4903      	ldr	r1, [pc, #12]	; (8002a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a26:	5ccb      	ldrb	r3, [r1, r3]
 8002a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40023800 	.word	0x40023800
 8002a34:	08005610 	.word	0x08005610

08002a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e041      	b.n	8002ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f9a4 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 fac0 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e041      	b.n	8002b6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f839 	bl	8002b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f000 fa71 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_TIM_PWM_Start+0x24>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	e022      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x6a>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d109      	bne.n	8002bc6 <HAL_TIM_PWM_Start+0x3e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	bf14      	ite	ne
 8002bbe:	2301      	movne	r3, #1
 8002bc0:	2300      	moveq	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	e015      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x6a>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d109      	bne.n	8002be0 <HAL_TIM_PWM_Start+0x58>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf14      	ite	ne
 8002bd8:	2301      	movne	r3, #1
 8002bda:	2300      	moveq	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	e008      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x6a>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e068      	b.n	8002ccc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <HAL_TIM_PWM_Start+0x82>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c08:	e013      	b.n	8002c32 <HAL_TIM_PWM_Start+0xaa>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d104      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x92>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c18:	e00b      	b.n	8002c32 <HAL_TIM_PWM_Start+0xaa>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d104      	bne.n	8002c2a <HAL_TIM_PWM_Start+0xa2>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	e003      	b.n	8002c32 <HAL_TIM_PWM_Start+0xaa>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2201      	movs	r2, #1
 8002c38:	6839      	ldr	r1, [r7, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 fc84 	bl	8003548 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <HAL_TIM_PWM_Start+0x14c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d107      	bne.n	8002c5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_TIM_PWM_Start+0x14c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d018      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d013      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_TIM_PWM_Start+0x150>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00e      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <HAL_TIM_PWM_Start+0x154>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_TIM_PWM_Start+0x158>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d004      	beq.n	8002c96 <HAL_TIM_PWM_Start+0x10e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a14      	ldr	r2, [pc, #80]	; (8002ce4 <HAL_TIM_PWM_Start+0x15c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d010      	beq.n	8002cca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0201 	orr.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	e007      	b.n	8002cca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40010000 	.word	0x40010000
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	40014000 	.word	0x40014000

08002ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0ae      	b.n	8002e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	f200 809f 	bhi.w	8002e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d16:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002e55 	.word	0x08002e55
 8002d24:	08002e55 	.word	0x08002e55
 8002d28:	08002e55 	.word	0x08002e55
 8002d2c:	08002d91 	.word	0x08002d91
 8002d30:	08002e55 	.word	0x08002e55
 8002d34:	08002e55 	.word	0x08002e55
 8002d38:	08002e55 	.word	0x08002e55
 8002d3c:	08002dd3 	.word	0x08002dd3
 8002d40:	08002e55 	.word	0x08002e55
 8002d44:	08002e55 	.word	0x08002e55
 8002d48:	08002e55 	.word	0x08002e55
 8002d4c:	08002e13 	.word	0x08002e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 f9d0 	bl	80030fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0208 	orr.w	r2, r2, #8
 8002d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699a      	ldr	r2, [r3, #24]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0204 	bic.w	r2, r2, #4
 8002d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6999      	ldr	r1, [r3, #24]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	619a      	str	r2, [r3, #24]
      break;
 8002d8e:	e064      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fa16 	bl	80031c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	619a      	str	r2, [r3, #24]
      break;
 8002dd0:	e043      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fa61 	bl	80032a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	69da      	ldr	r2, [r3, #28]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0208 	orr.w	r2, r2, #8
 8002dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69d9      	ldr	r1, [r3, #28]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
      break;
 8002e10:	e023      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 faab 	bl	8003374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69da      	ldr	r2, [r3, #28]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	021a      	lsls	r2, r3, #8
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	61da      	str	r2, [r3, #28]
      break;
 8002e52:	e002      	b.n	8002e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIM_ConfigClockSource+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e0b4      	b.n	8002ff2 <HAL_TIM_ConfigClockSource+0x186>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec0:	d03e      	beq.n	8002f40 <HAL_TIM_ConfigClockSource+0xd4>
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec6:	f200 8087 	bhi.w	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ece:	f000 8086 	beq.w	8002fde <HAL_TIM_ConfigClockSource+0x172>
 8002ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed6:	d87f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b70      	cmp	r3, #112	; 0x70
 8002eda:	d01a      	beq.n	8002f12 <HAL_TIM_ConfigClockSource+0xa6>
 8002edc:	2b70      	cmp	r3, #112	; 0x70
 8002ede:	d87b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b60      	cmp	r3, #96	; 0x60
 8002ee2:	d050      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	d877      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b50      	cmp	r3, #80	; 0x50
 8002eea:	d03c      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0xfa>
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d873      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef0:	2b40      	cmp	r3, #64	; 0x40
 8002ef2:	d058      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d86f      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ef8:	2b30      	cmp	r3, #48	; 0x30
 8002efa:	d064      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d86b      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f00:	2b20      	cmp	r3, #32
 8002f02:	d060      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d867      	bhi.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d05c      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d05a      	beq.n	8002fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	e062      	b.n	8002fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f000 faf1 	bl	8003508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	609a      	str	r2, [r3, #8]
      break;
 8002f3e:	e04f      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f000 fada 	bl	8003508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f62:	609a      	str	r2, [r3, #8]
      break;
 8002f64:	e03c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 fa4e 	bl	8003414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2150      	movs	r1, #80	; 0x50
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 faa7 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002f84:	e02c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 fa6d 	bl	8003472 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2160      	movs	r1, #96	; 0x60
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fa97 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e01c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6859      	ldr	r1, [r3, #4]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f000 fa2e 	bl	8003414 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2140      	movs	r1, #64	; 0x40
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fa87 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002fc4:	e00c      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f000 fa7e 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002fd6:	e003      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      break;
 8002fdc:	e000      	b.n	8002fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a34      	ldr	r2, [pc, #208]	; (80030e0 <TIM_Base_SetConfig+0xe4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00f      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00b      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a31      	ldr	r2, [pc, #196]	; (80030e4 <TIM_Base_SetConfig+0xe8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a30      	ldr	r2, [pc, #192]	; (80030e8 <TIM_Base_SetConfig+0xec>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0x38>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a2f      	ldr	r2, [pc, #188]	; (80030ec <TIM_Base_SetConfig+0xf0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d108      	bne.n	8003046 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800303a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <TIM_Base_SetConfig+0xe4>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01b      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003054:	d017      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a22      	ldr	r2, [pc, #136]	; (80030e4 <TIM_Base_SetConfig+0xe8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a21      	ldr	r2, [pc, #132]	; (80030e8 <TIM_Base_SetConfig+0xec>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a20      	ldr	r2, [pc, #128]	; (80030ec <TIM_Base_SetConfig+0xf0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a1f      	ldr	r2, [pc, #124]	; (80030f0 <TIM_Base_SetConfig+0xf4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a1e      	ldr	r2, [pc, #120]	; (80030f4 <TIM_Base_SetConfig+0xf8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0x8a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <TIM_Base_SetConfig+0xfc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a08      	ldr	r2, [pc, #32]	; (80030e0 <TIM_Base_SetConfig+0xe4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d103      	bne.n	80030cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	615a      	str	r2, [r3, #20]
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40010000 	.word	0x40010000
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800
 80030ec:	40000c00 	.word	0x40000c00
 80030f0:	40014000 	.word	0x40014000
 80030f4:	40014400 	.word	0x40014400
 80030f8:	40014800 	.word	0x40014800

080030fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	f023 0201 	bic.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 0302 	bic.w	r3, r3, #2
 8003144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	4313      	orrs	r3, r2
 800314e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <TIM_OC1_SetConfig+0xc8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d10c      	bne.n	8003172 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f023 0308 	bic.w	r3, r3, #8
 800315e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f023 0304 	bic.w	r3, r3, #4
 8003170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <TIM_OC1_SetConfig+0xc8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d111      	bne.n	800319e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	621a      	str	r2, [r3, #32]
}
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40010000 	.word	0x40010000

080031c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0210 	bic.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0320 	bic.w	r3, r3, #32
 8003212:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a1e      	ldr	r2, [pc, #120]	; (800329c <TIM_OC2_SetConfig+0xd4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d10d      	bne.n	8003244 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800322e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4313      	orrs	r3, r2
 800323a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003242:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a15      	ldr	r2, [pc, #84]	; (800329c <TIM_OC2_SetConfig+0xd4>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d113      	bne.n	8003274 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800325a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000

080032a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b087      	sub	sp, #28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0303 	bic.w	r3, r3, #3
 80032d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	021b      	lsls	r3, r3, #8
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <TIM_OC3_SetConfig+0xd0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d10d      	bne.n	800331a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003304:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <TIM_OC3_SetConfig+0xd0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d113      	bne.n	800334a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	621a      	str	r2, [r3, #32]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40010000 	.word	0x40010000

08003374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	021b      	lsls	r3, r3, #8
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	031b      	lsls	r3, r3, #12
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a10      	ldr	r2, [pc, #64]	; (8003410 <TIM_OC4_SetConfig+0x9c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d109      	bne.n	80033e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	621a      	str	r2, [r3, #32]
}
 8003402:	bf00      	nop
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40010000 	.word	0x40010000

08003414 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0201 	bic.w	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800343e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4313      	orrs	r3, r2
 8003448:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f023 030a 	bic.w	r3, r3, #10
 8003450:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4313      	orrs	r3, r2
 8003458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003472:	b480      	push	{r7}
 8003474:	b087      	sub	sp, #28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0210 	bic.w	r2, r3, #16
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800349c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	031b      	lsls	r3, r3, #12
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f043 0307 	orr.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	021a      	lsls	r2, r3, #8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	431a      	orrs	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2201      	movs	r2, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	43db      	mvns	r3, r3
 800356a:	401a      	ands	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e050      	b.n	800364e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1c      	ldr	r2, [pc, #112]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d018      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d013      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a18      	ldr	r2, [pc, #96]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a15      	ldr	r2, [pc, #84]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d10c      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	4313      	orrs	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40010000 	.word	0x40010000
 8003660:	40000400 	.word	0x40000400
 8003664:	40000800 	.word	0x40000800
 8003668:	40000c00 	.word	0x40000c00
 800366c:	40014000 	.word	0x40014000

08003670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003688:	2302      	movs	r3, #2
 800368a:	e03d      	b.n	8003708 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e03f      	b.n	80037a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fbca 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2224      	movs	r2, #36	; 0x24
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003756:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 ff9b 	bl	8004694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800376c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800377c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800378c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08a      	sub	sp, #40	; 0x28
 80037b2:	af02      	add	r7, sp, #8
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d17c      	bne.n	80038c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_UART_Transmit+0x2c>
 80037d4:	88fb      	ldrh	r3, [r7, #6]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e075      	b.n	80038ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Transmit+0x3e>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e06e      	b.n	80038ca <HAL_UART_Transmit+0x11c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2221      	movs	r2, #33	; 0x21
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003802:	f7fd fe03 	bl	800140c <HAL_GetTick>
 8003806:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d108      	bne.n	8003830 <HAL_UART_Transmit+0x82>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e003      	b.n	8003838 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003840:	e02a      	b.n	8003898 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2200      	movs	r2, #0
 800384a:	2180      	movs	r1, #128	; 0x80
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fc53 	bl	80040f8 <UART_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e036      	b.n	80038ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10b      	bne.n	800387a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003870:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	3302      	adds	r3, #2
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e007      	b.n	800388a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	781a      	ldrb	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1cf      	bne.n	8003842 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2200      	movs	r2, #0
 80038aa:	2140      	movs	r1, #64	; 0x40
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fc23 	bl	80040f8 <UART_WaitOnFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e006      	b.n	80038ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08c      	sub	sp, #48	; 0x30
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	60b9      	str	r1, [r7, #8]
 80038dc:	4613      	mov	r3, r2
 80038de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d152      	bne.n	8003992 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04b      	b.n	8003994 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003906:	2302      	movs	r3, #2
 8003908:	e044      	b.n	8003994 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	461a      	mov	r2, r3
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fc58 	bl	80041d4 <UART_Start_Receive_DMA>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800392a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800392e:	2b00      	cmp	r3, #0
 8003930:	d12c      	bne.n	800398c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	2b01      	cmp	r3, #1
 8003938:	d125      	bne.n	8003986 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	617b      	str	r3, [r7, #20]
   return(result);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f043 0310 	orr.w	r3, r3, #16
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003970:	627a      	str	r2, [r7, #36]	; 0x24
 8003972:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6a39      	ldr	r1, [r7, #32]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	61fb      	str	r3, [r7, #28]
   return(result);
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8003984:	e002      	b.n	800398c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800398c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003990:	e000      	b.n	8003994 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3730      	adds	r7, #48	; 0x30
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b0ba      	sub	sp, #232	; 0xe8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10f      	bne.n	8003a02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_UART_IRQHandler+0x66>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fd8f 	bl	800451e <UART_Receive_IT>
      return;
 8003a00:	e256      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80de 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x22c>
 8003a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d106      	bne.n	8003a26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80d1 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_UART_IRQHandler+0xae>
 8003a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <HAL_UART_IRQHandler+0xd2>
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <HAL_UART_IRQHandler+0xf6>
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x126>
 8003a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d005      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f043 0208 	orr.w	r2, r3, #8
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 81ed 	beq.w	8003ea6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d008      	beq.n	8003aea <HAL_UART_IRQHandler+0x14e>
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 fd1a 	bl	800451e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_UART_IRQHandler+0x17a>
 8003b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d04f      	beq.n	8003bb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fc22 	bl	8004360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d141      	bne.n	8003bae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3314      	adds	r3, #20
 8003b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3314      	adds	r3, #20
 8003b52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b66:	e841 2300 	strex	r3, r2, [r1]
 8003b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1d9      	bne.n	8003b2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d013      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_UART_IRQHandler+0x3dc>)
 8003b84:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd fed2 	bl	8001934 <HAL_DMA_Abort_IT>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e00e      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f9a4 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e00a      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f9a0 	bl	8003ef4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb4:	e006      	b.n	8003bc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f99c 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003bc2:	e170      	b.n	8003ea6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc4:	bf00      	nop
    return;
 8003bc6:	e16e      	b.n	8003ea6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	f040 814a 	bne.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8143 	beq.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 813c 	beq.w	8003e66 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	60bb      	str	r3, [r7, #8]
 8003c02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b40      	cmp	r3, #64	; 0x40
 8003c10:	f040 80b4 	bne.w	8003d7c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 8140 	beq.w	8003eaa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c32:	429a      	cmp	r2, r3
 8003c34:	f080 8139 	bcs.w	8003eaa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	f000 8088 	beq.w	8003d5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	330c      	adds	r3, #12
 8003c54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c8a:	e841 2300 	strex	r3, r2, [r1]
 8003c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1d9      	bne.n	8003c4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca4:	e853 3f00 	ldrex	r3, [r3]
 8003ca8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cbe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003cc2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003cc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003cca:	e841 2300 	strex	r3, r2, [r1]
 8003cce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1e1      	bne.n	8003c9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3314      	adds	r3, #20
 8003cf6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cfc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d00:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e3      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	330c      	adds	r3, #12
 8003d22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d26:	e853 3f00 	ldrex	r3, [r3]
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d2e:	f023 0310 	bic.w	r3, r3, #16
 8003d32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d40:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1e3      	bne.n	8003d1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fd fd7b 	bl	8001854 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fc fc04 	bl	800057c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d74:	e099      	b.n	8003eaa <HAL_UART_IRQHandler+0x50e>
 8003d76:	bf00      	nop
 8003d78:	08004427 	.word	0x08004427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808b 	beq.w	8003eae <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003d98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8086 	beq.w	8003eae <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003dc6:	647a      	str	r2, [r7, #68]	; 0x44
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e3      	bne.n	8003da2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	623b      	str	r3, [r7, #32]
   return(result);
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0310 	bic.w	r3, r3, #16
 8003e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e44:	61fa      	str	r2, [r7, #28]
 8003e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	69b9      	ldr	r1, [r7, #24]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	617b      	str	r3, [r7, #20]
   return(result);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e3      	bne.n	8003e20 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fc fb8c 	bl	800057c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e64:	e023      	b.n	8003eae <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x4ea>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fae5 	bl	800444e <UART_Transmit_IT>
    return;
 8003e84:	e014      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x514>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb25 	bl	80044ee <UART_EndTransmit_IT>
    return;
 8003ea4:	e004      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
    return;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_UART_IRQHandler+0x514>
      return;
 8003eae:	bf00      	nop
  }
}
 8003eb0:	37e8      	adds	r7, #232	; 0xe8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop

08003eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b09c      	sub	sp, #112	; 0x70
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d172      	bne.n	800400a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	2200      	movs	r2, #0
 8003f28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f4a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e5      	bne.n	8003f2a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3314      	adds	r3, #20
 8003f64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	667b      	str	r3, [r7, #100]	; 0x64
 8003f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3314      	adds	r3, #20
 8003f7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003f7e:	647a      	str	r2, [r7, #68]	; 0x44
 8003f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	3314      	adds	r3, #20
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa8:	663b      	str	r3, [r7, #96]	; 0x60
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d119      	bne.n	800400a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 0310 	bic.w	r3, r3, #16
 8003fec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ff6:	61fa      	str	r2, [r7, #28]
 8003ff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	69b9      	ldr	r1, [r7, #24]
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	617b      	str	r3, [r7, #20]
   return(result);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e5      	bne.n	8003fd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	2b01      	cmp	r3, #1
 8004010:	d106      	bne.n	8004020 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004016:	4619      	mov	r1, r3
 8004018:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800401a:	f7fc faaf 	bl	800057c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800401e:	e002      	b.n	8004026 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004020:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004022:	f7ff ff53 	bl	8003ecc <HAL_UART_RxCpltCallback>
}
 8004026:	bf00      	nop
 8004028:	3770      	adds	r7, #112	; 0x70
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	d108      	bne.n	8004056 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	b29b      	uxth	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f7fc fa94 	bl	800057c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004054:	e002      	b.n	800405c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f7ff ff42 	bl	8003ee0 <HAL_UART_RxHalfCpltCallback>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b21      	cmp	r3, #33	; 0x21
 8004096:	d108      	bne.n	80040aa <UART_DMAError+0x46>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2200      	movs	r2, #0
 80040a2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80040a4:	68b8      	ldr	r0, [r7, #8]
 80040a6:	f000 f933 	bl	8004310 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b22      	cmp	r3, #34	; 0x22
 80040ca:	d108      	bne.n	80040de <UART_DMAError+0x7a>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80040d8:	68b8      	ldr	r0, [r7, #8]
 80040da:	f000 f941 	bl	8004360 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0210 	orr.w	r2, r3, #16
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ea:	68b8      	ldr	r0, [r7, #8]
 80040ec:	f7ff ff02 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b090      	sub	sp, #64	; 0x40
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004108:	e050      	b.n	80041ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d04c      	beq.n	80041ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <UART_WaitOnFlagUntilTimeout+0x30>
 8004118:	f7fd f978 	bl	800140c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004124:	429a      	cmp	r2, r3
 8004126:	d241      	bcs.n	80041ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800413e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004148:	637a      	str	r2, [r7, #52]	; 0x34
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800417c:	623a      	str	r2, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00f      	b.n	80041cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d09f      	beq.n	800410a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3740      	adds	r7, #64	; 0x40
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b098      	sub	sp, #96	; 0x60
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2222      	movs	r2, #34	; 0x22
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	4a40      	ldr	r2, [pc, #256]	; (8004304 <UART_Start_Receive_DMA+0x130>)
 8004202:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	4a3f      	ldr	r2, [pc, #252]	; (8004308 <UART_Start_Receive_DMA+0x134>)
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	4a3e      	ldr	r2, [pc, #248]	; (800430c <UART_Start_Receive_DMA+0x138>)
 8004212:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	2200      	movs	r2, #0
 800421a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800421c:	f107 0308 	add.w	r3, r7, #8
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3304      	adds	r3, #4
 800422c:	4619      	mov	r1, r3
 800422e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	f7fd fab6 	bl	80017a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d019      	beq.n	8004292 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800426e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004274:	65bb      	str	r3, [r7, #88]	; 0x58
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800427e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004280:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800428c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3314      	adds	r3, #20
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	e853 3f00 	ldrex	r3, [r3]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	657b      	str	r3, [r7, #84]	; 0x54
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042b2:	63ba      	str	r2, [r7, #56]	; 0x38
 80042b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e5      	bne.n	8004292 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	617b      	str	r3, [r7, #20]
   return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042dc:	653b      	str	r3, [r7, #80]	; 0x50
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3314      	adds	r3, #20
 80042e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042e6:	627a      	str	r2, [r7, #36]	; 0x24
 80042e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6a39      	ldr	r1, [r7, #32]
 80042ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e5      	bne.n	80042c6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3760      	adds	r7, #96	; 0x60
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	08003f09 	.word	0x08003f09
 8004308:	0800402f 	.word	0x0800402f
 800430c:	08004065 	.word	0x08004065

08004310 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	60bb      	str	r3, [r7, #8]
   return(result);
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800432e:	61fb      	str	r3, [r7, #28]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	330c      	adds	r3, #12
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	61ba      	str	r2, [r7, #24]
 800433a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	6979      	ldr	r1, [r7, #20]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	613b      	str	r3, [r7, #16]
   return(result);
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004354:	bf00      	nop
 8004356:	3724      	adds	r7, #36	; 0x24
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b095      	sub	sp, #84	; 0x54
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004388:	643a      	str	r2, [r7, #64]	; 0x40
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800438e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d119      	bne.n	800440c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	647b      	str	r3, [r7, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f8:	61ba      	str	r2, [r7, #24]
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800441a:	bf00      	nop
 800441c:	3754      	adds	r7, #84	; 0x54
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff fd57 	bl	8003ef4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b21      	cmp	r3, #33	; 0x21
 8004460:	d13e      	bne.n	80044e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d114      	bne.n	8004496 <UART_Transmit_IT+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	e008      	b.n	80044a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6211      	str	r1, [r2, #32]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fcd2 	bl	8003eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08c      	sub	sp, #48	; 0x30
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b22      	cmp	r3, #34	; 0x22
 8004530:	f040 80ab 	bne.w	800468a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d117      	bne.n	800456e <UART_Receive_IT+0x50>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	b29a      	uxth	r2, r3
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	1c9a      	adds	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
 800456c:	e026      	b.n	80045bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d007      	beq.n	8004592 <UART_Receive_IT+0x74>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <UART_Receive_IT+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e008      	b.n	80045b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4619      	mov	r1, r3
 80045ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d15a      	bne.n	8004686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0220 	bic.w	r2, r2, #32
 80045de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	d135      	bne.n	800467c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	613b      	str	r3, [r7, #16]
   return(result);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	623a      	str	r2, [r7, #32]
 8004638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	69f9      	ldr	r1, [r7, #28]
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	61bb      	str	r3, [r7, #24]
   return(result);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b10      	cmp	r3, #16
 8004656:	d10a      	bne.n	800466e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7fb ff81 	bl	800057c <HAL_UARTEx_RxEventCallback>
 800467a:	e002      	b.n	8004682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fc25 	bl	8003ecc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e002      	b.n	800468c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3730      	adds	r7, #48	; 0x30
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b0c0      	sub	sp, #256	; 0x100
 800469a:	af00      	add	r7, sp, #0
 800469c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	68d9      	ldr	r1, [r3, #12]
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	ea40 0301 	orr.w	r3, r0, r1
 80046bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046ec:	f021 010c 	bic.w	r1, r1, #12
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046fa:	430b      	orrs	r3, r1
 80046fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	6999      	ldr	r1, [r3, #24]
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	ea40 0301 	orr.w	r3, r0, r1
 800471a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8f      	ldr	r3, [pc, #572]	; (8004960 <UART_SetConfig+0x2cc>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d005      	beq.n	8004734 <UART_SetConfig+0xa0>
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <UART_SetConfig+0x2d0>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d104      	bne.n	800473e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fe f96c 	bl	8002a10 <HAL_RCC_GetPCLK2Freq>
 8004738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800473c:	e003      	b.n	8004746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800473e:	f7fe f953 	bl	80029e8 <HAL_RCC_GetPCLK1Freq>
 8004742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	f040 810c 	bne.w	800496c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800475e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	1891      	adds	r1, r2, r2
 800476c:	65b9      	str	r1, [r7, #88]	; 0x58
 800476e:	415b      	adcs	r3, r3
 8004770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004776:	4621      	mov	r1, r4
 8004778:	eb12 0801 	adds.w	r8, r2, r1
 800477c:	4629      	mov	r1, r5
 800477e:	eb43 0901 	adc.w	r9, r3, r1
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004796:	4690      	mov	r8, r2
 8004798:	4699      	mov	r9, r3
 800479a:	4623      	mov	r3, r4
 800479c:	eb18 0303 	adds.w	r3, r8, r3
 80047a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047a4:	462b      	mov	r3, r5
 80047a6:	eb49 0303 	adc.w	r3, r9, r3
 80047aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047c2:	460b      	mov	r3, r1
 80047c4:	18db      	adds	r3, r3, r3
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
 80047c8:	4613      	mov	r3, r2
 80047ca:	eb42 0303 	adc.w	r3, r2, r3
 80047ce:	657b      	str	r3, [r7, #84]	; 0x54
 80047d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047d8:	f7fb fd52 	bl	8000280 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <UART_SetConfig+0x2d4>)
 80047e2:	fba3 2302 	umull	r2, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	011c      	lsls	r4, r3, #4
 80047ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	64b9      	str	r1, [r7, #72]	; 0x48
 8004804:	415b      	adcs	r3, r3
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800480c:	4641      	mov	r1, r8
 800480e:	eb12 0a01 	adds.w	sl, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb43 0b01 	adc.w	fp, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800482c:	4692      	mov	sl, r2
 800482e:	469b      	mov	fp, r3
 8004830:	4643      	mov	r3, r8
 8004832:	eb1a 0303 	adds.w	r3, sl, r3
 8004836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800483a:	464b      	mov	r3, r9
 800483c:	eb4b 0303 	adc.w	r3, fp, r3
 8004840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004858:	460b      	mov	r3, r1
 800485a:	18db      	adds	r3, r3, r3
 800485c:	643b      	str	r3, [r7, #64]	; 0x40
 800485e:	4613      	mov	r3, r2
 8004860:	eb42 0303 	adc.w	r3, r2, r3
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
 8004866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800486a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800486e:	f7fb fd07 	bl	8000280 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4611      	mov	r1, r2
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <UART_SetConfig+0x2d4>)
 800487a:	fba3 2301 	umull	r2, r3, r3, r1
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2264      	movs	r2, #100	; 0x64
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	1acb      	subs	r3, r1, r3
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <UART_SetConfig+0x2d4>)
 8004890:	fba3 2302 	umull	r2, r3, r3, r2
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800489c:	441c      	add	r4, r3
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048b8:	415b      	adcs	r3, r3
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c0:	4641      	mov	r1, r8
 80048c2:	1851      	adds	r1, r2, r1
 80048c4:	6339      	str	r1, [r7, #48]	; 0x30
 80048c6:	4649      	mov	r1, r9
 80048c8:	414b      	adcs	r3, r1
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048d8:	4659      	mov	r1, fp
 80048da:	00cb      	lsls	r3, r1, #3
 80048dc:	4651      	mov	r1, sl
 80048de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e2:	4651      	mov	r1, sl
 80048e4:	00ca      	lsls	r2, r1, #3
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	4642      	mov	r2, r8
 80048ee:	189b      	adds	r3, r3, r2
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f4:	464b      	mov	r3, r9
 80048f6:	460a      	mov	r2, r1
 80048f8:	eb42 0303 	adc.w	r3, r2, r3
 80048fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800490c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800492a:	f7fb fca9 	bl	8000280 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <UART_SetConfig+0x2d4>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	; 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	3332      	adds	r3, #50	; 0x32
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <UART_SetConfig+0x2d4>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4422      	add	r2, r4
 800495a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800495c:	e106      	b.n	8004b6c <UART_SetConfig+0x4d8>
 800495e:	bf00      	nop
 8004960:	40011000 	.word	0x40011000
 8004964:	40011400 	.word	0x40011400
 8004968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800497a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	1891      	adds	r1, r2, r2
 8004984:	6239      	str	r1, [r7, #32]
 8004986:	415b      	adcs	r3, r3
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800498e:	4641      	mov	r1, r8
 8004990:	1854      	adds	r4, r2, r1
 8004992:	4649      	mov	r1, r9
 8004994:	eb43 0501 	adc.w	r5, r3, r1
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	00eb      	lsls	r3, r5, #3
 80049a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a6:	00e2      	lsls	r2, r4, #3
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049b4:	464b      	mov	r3, r9
 80049b6:	eb45 0303 	adc.w	r3, r5, r3
 80049ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049da:	4629      	mov	r1, r5
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	4621      	mov	r1, r4
 80049e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e4:	4621      	mov	r1, r4
 80049e6:	008a      	lsls	r2, r1, #2
 80049e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049ec:	f7fb fc48 	bl	8000280 <__aeabi_uldivmod>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4b60      	ldr	r3, [pc, #384]	; (8004b78 <UART_SetConfig+0x4e4>)
 80049f6:	fba3 2302 	umull	r2, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	011c      	lsls	r4, r3, #4
 80049fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a10:	4642      	mov	r2, r8
 8004a12:	464b      	mov	r3, r9
 8004a14:	1891      	adds	r1, r2, r2
 8004a16:	61b9      	str	r1, [r7, #24]
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a20:	4641      	mov	r1, r8
 8004a22:	1851      	adds	r1, r2, r1
 8004a24:	6139      	str	r1, [r7, #16]
 8004a26:	4649      	mov	r1, r9
 8004a28:	414b      	adcs	r3, r1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a38:	4659      	mov	r1, fp
 8004a3a:	00cb      	lsls	r3, r1, #3
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a42:	4651      	mov	r1, sl
 8004a44:	00ca      	lsls	r2, r1, #3
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a54:	464b      	mov	r3, r9
 8004a56:	460a      	mov	r2, r1
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a8a:	f7fb fbf9 	bl	8000280 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4611      	mov	r1, r2
 8004a94:	4b38      	ldr	r3, [pc, #224]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004a96:	fba3 2301 	umull	r2, r3, r3, r1
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2264      	movs	r2, #100	; 0x64
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	1acb      	subs	r3, r1, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a33      	ldr	r2, [pc, #204]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	673b      	str	r3, [r7, #112]	; 0x70
 8004abe:	677a      	str	r2, [r7, #116]	; 0x74
 8004ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	60b9      	str	r1, [r7, #8]
 8004acc:	415b      	adcs	r3, r3
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	1851      	adds	r1, r2, r1
 8004ad8:	6039      	str	r1, [r7, #0]
 8004ada:	4649      	mov	r1, r9
 8004adc:	414b      	adcs	r3, r1
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aec:	4659      	mov	r1, fp
 8004aee:	00cb      	lsls	r3, r1, #3
 8004af0:	4651      	mov	r1, sl
 8004af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af6:	4651      	mov	r1, sl
 8004af8:	00ca      	lsls	r2, r1, #3
 8004afa:	4610      	mov	r0, r2
 8004afc:	4619      	mov	r1, r3
 8004afe:	4603      	mov	r3, r0
 8004b00:	4642      	mov	r2, r8
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b06:	464b      	mov	r3, r9
 8004b08:	460a      	mov	r2, r1
 8004b0a:	eb42 0303 	adc.w	r3, r2, r3
 8004b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	663b      	str	r3, [r7, #96]	; 0x60
 8004b1a:	667a      	str	r2, [r7, #100]	; 0x64
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b28:	4649      	mov	r1, r9
 8004b2a:	008b      	lsls	r3, r1, #2
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b32:	4641      	mov	r1, r8
 8004b34:	008a      	lsls	r2, r1, #2
 8004b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b3a:	f7fb fba1 	bl	8000280 <__aeabi_uldivmod>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	460b      	mov	r3, r1
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	2164      	movs	r1, #100	; 0x64
 8004b4c:	fb01 f303 	mul.w	r3, r1, r3
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	3332      	adds	r3, #50	; 0x32
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004b58:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	f003 020f 	and.w	r2, r3, #15
 8004b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4422      	add	r2, r4
 8004b6a:	609a      	str	r2, [r3, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b72:	46bd      	mov	sp, r7
 8004b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b78:	51eb851f 	.word	0x51eb851f

08004b7c <atoi>:
 8004b7c:	220a      	movs	r2, #10
 8004b7e:	2100      	movs	r1, #0
 8004b80:	f000 b882 	b.w	8004c88 <strtol>

08004b84 <_strtol_l.constprop.0>:
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b8a:	d001      	beq.n	8004b90 <_strtol_l.constprop.0+0xc>
 8004b8c:	2b24      	cmp	r3, #36	; 0x24
 8004b8e:	d906      	bls.n	8004b9e <_strtol_l.constprop.0+0x1a>
 8004b90:	f000 f8ac 	bl	8004cec <__errno>
 8004b94:	2316      	movs	r3, #22
 8004b96:	6003      	str	r3, [r0, #0]
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004c84 <_strtol_l.constprop.0+0x100>
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	462e      	mov	r6, r5
 8004ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004baa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004bae:	f017 0708 	ands.w	r7, r7, #8
 8004bb2:	d1f7      	bne.n	8004ba4 <_strtol_l.constprop.0+0x20>
 8004bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8004bb6:	d132      	bne.n	8004c1e <_strtol_l.constprop.0+0x9a>
 8004bb8:	782c      	ldrb	r4, [r5, #0]
 8004bba:	2701      	movs	r7, #1
 8004bbc:	1cb5      	adds	r5, r6, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d05b      	beq.n	8004c7a <_strtol_l.constprop.0+0xf6>
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d109      	bne.n	8004bda <_strtol_l.constprop.0+0x56>
 8004bc6:	2c30      	cmp	r4, #48	; 0x30
 8004bc8:	d107      	bne.n	8004bda <_strtol_l.constprop.0+0x56>
 8004bca:	782c      	ldrb	r4, [r5, #0]
 8004bcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004bd0:	2c58      	cmp	r4, #88	; 0x58
 8004bd2:	d14d      	bne.n	8004c70 <_strtol_l.constprop.0+0xec>
 8004bd4:	786c      	ldrb	r4, [r5, #1]
 8004bd6:	2310      	movs	r3, #16
 8004bd8:	3502      	adds	r5, #2
 8004bda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004bde:	f108 38ff 	add.w	r8, r8, #4294967295
 8004be2:	f04f 0e00 	mov.w	lr, #0
 8004be6:	fbb8 f9f3 	udiv	r9, r8, r3
 8004bea:	4676      	mov	r6, lr
 8004bec:	fb03 8a19 	mls	sl, r3, r9, r8
 8004bf0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004bf4:	f1bc 0f09 	cmp.w	ip, #9
 8004bf8:	d816      	bhi.n	8004c28 <_strtol_l.constprop.0+0xa4>
 8004bfa:	4664      	mov	r4, ip
 8004bfc:	42a3      	cmp	r3, r4
 8004bfe:	dd24      	ble.n	8004c4a <_strtol_l.constprop.0+0xc6>
 8004c00:	f1be 3fff 	cmp.w	lr, #4294967295
 8004c04:	d008      	beq.n	8004c18 <_strtol_l.constprop.0+0x94>
 8004c06:	45b1      	cmp	r9, r6
 8004c08:	d31c      	bcc.n	8004c44 <_strtol_l.constprop.0+0xc0>
 8004c0a:	d101      	bne.n	8004c10 <_strtol_l.constprop.0+0x8c>
 8004c0c:	45a2      	cmp	sl, r4
 8004c0e:	db19      	blt.n	8004c44 <_strtol_l.constprop.0+0xc0>
 8004c10:	fb06 4603 	mla	r6, r6, r3, r4
 8004c14:	f04f 0e01 	mov.w	lr, #1
 8004c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c1c:	e7e8      	b.n	8004bf0 <_strtol_l.constprop.0+0x6c>
 8004c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c20:	bf04      	itt	eq
 8004c22:	782c      	ldrbeq	r4, [r5, #0]
 8004c24:	1cb5      	addeq	r5, r6, #2
 8004c26:	e7ca      	b.n	8004bbe <_strtol_l.constprop.0+0x3a>
 8004c28:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c2c:	f1bc 0f19 	cmp.w	ip, #25
 8004c30:	d801      	bhi.n	8004c36 <_strtol_l.constprop.0+0xb2>
 8004c32:	3c37      	subs	r4, #55	; 0x37
 8004c34:	e7e2      	b.n	8004bfc <_strtol_l.constprop.0+0x78>
 8004c36:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c3a:	f1bc 0f19 	cmp.w	ip, #25
 8004c3e:	d804      	bhi.n	8004c4a <_strtol_l.constprop.0+0xc6>
 8004c40:	3c57      	subs	r4, #87	; 0x57
 8004c42:	e7db      	b.n	8004bfc <_strtol_l.constprop.0+0x78>
 8004c44:	f04f 3eff 	mov.w	lr, #4294967295
 8004c48:	e7e6      	b.n	8004c18 <_strtol_l.constprop.0+0x94>
 8004c4a:	f1be 3fff 	cmp.w	lr, #4294967295
 8004c4e:	d105      	bne.n	8004c5c <_strtol_l.constprop.0+0xd8>
 8004c50:	2322      	movs	r3, #34	; 0x22
 8004c52:	6003      	str	r3, [r0, #0]
 8004c54:	4646      	mov	r6, r8
 8004c56:	b942      	cbnz	r2, 8004c6a <_strtol_l.constprop.0+0xe6>
 8004c58:	4630      	mov	r0, r6
 8004c5a:	e79e      	b.n	8004b9a <_strtol_l.constprop.0+0x16>
 8004c5c:	b107      	cbz	r7, 8004c60 <_strtol_l.constprop.0+0xdc>
 8004c5e:	4276      	negs	r6, r6
 8004c60:	2a00      	cmp	r2, #0
 8004c62:	d0f9      	beq.n	8004c58 <_strtol_l.constprop.0+0xd4>
 8004c64:	f1be 0f00 	cmp.w	lr, #0
 8004c68:	d000      	beq.n	8004c6c <_strtol_l.constprop.0+0xe8>
 8004c6a:	1e69      	subs	r1, r5, #1
 8004c6c:	6011      	str	r1, [r2, #0]
 8004c6e:	e7f3      	b.n	8004c58 <_strtol_l.constprop.0+0xd4>
 8004c70:	2430      	movs	r4, #48	; 0x30
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1b1      	bne.n	8004bda <_strtol_l.constprop.0+0x56>
 8004c76:	2308      	movs	r3, #8
 8004c78:	e7af      	b.n	8004bda <_strtol_l.constprop.0+0x56>
 8004c7a:	2c30      	cmp	r4, #48	; 0x30
 8004c7c:	d0a5      	beq.n	8004bca <_strtol_l.constprop.0+0x46>
 8004c7e:	230a      	movs	r3, #10
 8004c80:	e7ab      	b.n	8004bda <_strtol_l.constprop.0+0x56>
 8004c82:	bf00      	nop
 8004c84:	08005621 	.word	0x08005621

08004c88 <strtol>:
 8004c88:	4613      	mov	r3, r2
 8004c8a:	460a      	mov	r2, r1
 8004c8c:	4601      	mov	r1, r0
 8004c8e:	4802      	ldr	r0, [pc, #8]	; (8004c98 <strtol+0x10>)
 8004c90:	6800      	ldr	r0, [r0, #0]
 8004c92:	f7ff bf77 	b.w	8004b84 <_strtol_l.constprop.0>
 8004c96:	bf00      	nop
 8004c98:	20000058 	.word	0x20000058

08004c9c <siprintf>:
 8004c9c:	b40e      	push	{r1, r2, r3}
 8004c9e:	b500      	push	{lr}
 8004ca0:	b09c      	sub	sp, #112	; 0x70
 8004ca2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ca4:	9002      	str	r0, [sp, #8]
 8004ca6:	9006      	str	r0, [sp, #24]
 8004ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cac:	4809      	ldr	r0, [pc, #36]	; (8004cd4 <siprintf+0x38>)
 8004cae:	9107      	str	r1, [sp, #28]
 8004cb0:	9104      	str	r1, [sp, #16]
 8004cb2:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <siprintf+0x3c>)
 8004cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cb8:	9105      	str	r1, [sp, #20]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	a902      	add	r1, sp, #8
 8004cc0:	f000 f992 	bl	8004fe8 <_svfiprintf_r>
 8004cc4:	9b02      	ldr	r3, [sp, #8]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	b01c      	add	sp, #112	; 0x70
 8004ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cd0:	b003      	add	sp, #12
 8004cd2:	4770      	bx	lr
 8004cd4:	20000058 	.word	0x20000058
 8004cd8:	ffff0208 	.word	0xffff0208

08004cdc <memset>:
 8004cdc:	4402      	add	r2, r0
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d100      	bne.n	8004ce6 <memset+0xa>
 8004ce4:	4770      	bx	lr
 8004ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cea:	e7f9      	b.n	8004ce0 <memset+0x4>

08004cec <__errno>:
 8004cec:	4b01      	ldr	r3, [pc, #4]	; (8004cf4 <__errno+0x8>)
 8004cee:	6818      	ldr	r0, [r3, #0]
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000058 	.word	0x20000058

08004cf8 <__libc_init_array>:
 8004cf8:	b570      	push	{r4, r5, r6, lr}
 8004cfa:	4d0d      	ldr	r5, [pc, #52]	; (8004d30 <__libc_init_array+0x38>)
 8004cfc:	4c0d      	ldr	r4, [pc, #52]	; (8004d34 <__libc_init_array+0x3c>)
 8004cfe:	1b64      	subs	r4, r4, r5
 8004d00:	10a4      	asrs	r4, r4, #2
 8004d02:	2600      	movs	r6, #0
 8004d04:	42a6      	cmp	r6, r4
 8004d06:	d109      	bne.n	8004d1c <__libc_init_array+0x24>
 8004d08:	4d0b      	ldr	r5, [pc, #44]	; (8004d38 <__libc_init_array+0x40>)
 8004d0a:	4c0c      	ldr	r4, [pc, #48]	; (8004d3c <__libc_init_array+0x44>)
 8004d0c:	f000 fc6a 	bl	80055e4 <_init>
 8004d10:	1b64      	subs	r4, r4, r5
 8004d12:	10a4      	asrs	r4, r4, #2
 8004d14:	2600      	movs	r6, #0
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	d105      	bne.n	8004d26 <__libc_init_array+0x2e>
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
 8004d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d20:	4798      	blx	r3
 8004d22:	3601      	adds	r6, #1
 8004d24:	e7ee      	b.n	8004d04 <__libc_init_array+0xc>
 8004d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2a:	4798      	blx	r3
 8004d2c:	3601      	adds	r6, #1
 8004d2e:	e7f2      	b.n	8004d16 <__libc_init_array+0x1e>
 8004d30:	0800575c 	.word	0x0800575c
 8004d34:	0800575c 	.word	0x0800575c
 8004d38:	0800575c 	.word	0x0800575c
 8004d3c:	08005760 	.word	0x08005760

08004d40 <__retarget_lock_acquire_recursive>:
 8004d40:	4770      	bx	lr

08004d42 <__retarget_lock_release_recursive>:
 8004d42:	4770      	bx	lr

08004d44 <_free_r>:
 8004d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d46:	2900      	cmp	r1, #0
 8004d48:	d044      	beq.n	8004dd4 <_free_r+0x90>
 8004d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d4e:	9001      	str	r0, [sp, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f1a1 0404 	sub.w	r4, r1, #4
 8004d56:	bfb8      	it	lt
 8004d58:	18e4      	addlt	r4, r4, r3
 8004d5a:	f000 f8df 	bl	8004f1c <__malloc_lock>
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <_free_r+0x94>)
 8004d60:	9801      	ldr	r0, [sp, #4]
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	b933      	cbnz	r3, 8004d74 <_free_r+0x30>
 8004d66:	6063      	str	r3, [r4, #4]
 8004d68:	6014      	str	r4, [r2, #0]
 8004d6a:	b003      	add	sp, #12
 8004d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d70:	f000 b8da 	b.w	8004f28 <__malloc_unlock>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d908      	bls.n	8004d8a <_free_r+0x46>
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf01      	itttt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	1949      	addeq	r1, r1, r5
 8004d86:	6021      	streq	r1, [r4, #0]
 8004d88:	e7ed      	b.n	8004d66 <_free_r+0x22>
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	b10b      	cbz	r3, 8004d94 <_free_r+0x50>
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	d9fa      	bls.n	8004d8a <_free_r+0x46>
 8004d94:	6811      	ldr	r1, [r2, #0]
 8004d96:	1855      	adds	r5, r2, r1
 8004d98:	42a5      	cmp	r5, r4
 8004d9a:	d10b      	bne.n	8004db4 <_free_r+0x70>
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	4421      	add	r1, r4
 8004da0:	1854      	adds	r4, r2, r1
 8004da2:	42a3      	cmp	r3, r4
 8004da4:	6011      	str	r1, [r2, #0]
 8004da6:	d1e0      	bne.n	8004d6a <_free_r+0x26>
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	6053      	str	r3, [r2, #4]
 8004dae:	440c      	add	r4, r1
 8004db0:	6014      	str	r4, [r2, #0]
 8004db2:	e7da      	b.n	8004d6a <_free_r+0x26>
 8004db4:	d902      	bls.n	8004dbc <_free_r+0x78>
 8004db6:	230c      	movs	r3, #12
 8004db8:	6003      	str	r3, [r0, #0]
 8004dba:	e7d6      	b.n	8004d6a <_free_r+0x26>
 8004dbc:	6825      	ldr	r5, [r4, #0]
 8004dbe:	1961      	adds	r1, r4, r5
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf04      	itt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	6063      	str	r3, [r4, #4]
 8004dca:	bf04      	itt	eq
 8004dcc:	1949      	addeq	r1, r1, r5
 8004dce:	6021      	streq	r1, [r4, #0]
 8004dd0:	6054      	str	r4, [r2, #4]
 8004dd2:	e7ca      	b.n	8004d6a <_free_r+0x26>
 8004dd4:	b003      	add	sp, #12
 8004dd6:	bd30      	pop	{r4, r5, pc}
 8004dd8:	20000478 	.word	0x20000478

08004ddc <sbrk_aligned>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4e0e      	ldr	r6, [pc, #56]	; (8004e18 <sbrk_aligned+0x3c>)
 8004de0:	460c      	mov	r4, r1
 8004de2:	6831      	ldr	r1, [r6, #0]
 8004de4:	4605      	mov	r5, r0
 8004de6:	b911      	cbnz	r1, 8004dee <sbrk_aligned+0x12>
 8004de8:	f000 fba6 	bl	8005538 <_sbrk_r>
 8004dec:	6030      	str	r0, [r6, #0]
 8004dee:	4621      	mov	r1, r4
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 fba1 	bl	8005538 <_sbrk_r>
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	d00a      	beq.n	8004e10 <sbrk_aligned+0x34>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d007      	beq.n	8004e14 <sbrk_aligned+0x38>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4628      	mov	r0, r5
 8004e08:	f000 fb96 	bl	8005538 <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d101      	bne.n	8004e14 <sbrk_aligned+0x38>
 8004e10:	f04f 34ff 	mov.w	r4, #4294967295
 8004e14:	4620      	mov	r0, r4
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	2000047c 	.word	0x2000047c

08004e1c <_malloc_r>:
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	1ccd      	adds	r5, r1, #3
 8004e22:	f025 0503 	bic.w	r5, r5, #3
 8004e26:	3508      	adds	r5, #8
 8004e28:	2d0c      	cmp	r5, #12
 8004e2a:	bf38      	it	cc
 8004e2c:	250c      	movcc	r5, #12
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	4607      	mov	r7, r0
 8004e32:	db01      	blt.n	8004e38 <_malloc_r+0x1c>
 8004e34:	42a9      	cmp	r1, r5
 8004e36:	d905      	bls.n	8004e44 <_malloc_r+0x28>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	603b      	str	r3, [r7, #0]
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	4630      	mov	r0, r6
 8004e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f18 <_malloc_r+0xfc>
 8004e48:	f000 f868 	bl	8004f1c <__malloc_lock>
 8004e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e50:	461c      	mov	r4, r3
 8004e52:	bb5c      	cbnz	r4, 8004eac <_malloc_r+0x90>
 8004e54:	4629      	mov	r1, r5
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7ff ffc0 	bl	8004ddc <sbrk_aligned>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	4604      	mov	r4, r0
 8004e60:	d155      	bne.n	8004f0e <_malloc_r+0xf2>
 8004e62:	f8d8 4000 	ldr.w	r4, [r8]
 8004e66:	4626      	mov	r6, r4
 8004e68:	2e00      	cmp	r6, #0
 8004e6a:	d145      	bne.n	8004ef8 <_malloc_r+0xdc>
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	d048      	beq.n	8004f02 <_malloc_r+0xe6>
 8004e70:	6823      	ldr	r3, [r4, #0]
 8004e72:	4631      	mov	r1, r6
 8004e74:	4638      	mov	r0, r7
 8004e76:	eb04 0903 	add.w	r9, r4, r3
 8004e7a:	f000 fb5d 	bl	8005538 <_sbrk_r>
 8004e7e:	4581      	cmp	r9, r0
 8004e80:	d13f      	bne.n	8004f02 <_malloc_r+0xe6>
 8004e82:	6821      	ldr	r1, [r4, #0]
 8004e84:	1a6d      	subs	r5, r5, r1
 8004e86:	4629      	mov	r1, r5
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff ffa7 	bl	8004ddc <sbrk_aligned>
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d037      	beq.n	8004f02 <_malloc_r+0xe6>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	442b      	add	r3, r5
 8004e96:	6023      	str	r3, [r4, #0]
 8004e98:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d038      	beq.n	8004f12 <_malloc_r+0xf6>
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	42a2      	cmp	r2, r4
 8004ea4:	d12b      	bne.n	8004efe <_malloc_r+0xe2>
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e00f      	b.n	8004ecc <_malloc_r+0xb0>
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	1b52      	subs	r2, r2, r5
 8004eb0:	d41f      	bmi.n	8004ef2 <_malloc_r+0xd6>
 8004eb2:	2a0b      	cmp	r2, #11
 8004eb4:	d917      	bls.n	8004ee6 <_malloc_r+0xca>
 8004eb6:	1961      	adds	r1, r4, r5
 8004eb8:	42a3      	cmp	r3, r4
 8004eba:	6025      	str	r5, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	6059      	strne	r1, [r3, #4]
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	bf08      	it	eq
 8004ec4:	f8c8 1000 	streq.w	r1, [r8]
 8004ec8:	5162      	str	r2, [r4, r5]
 8004eca:	604b      	str	r3, [r1, #4]
 8004ecc:	4638      	mov	r0, r7
 8004ece:	f104 060b 	add.w	r6, r4, #11
 8004ed2:	f000 f829 	bl	8004f28 <__malloc_unlock>
 8004ed6:	f026 0607 	bic.w	r6, r6, #7
 8004eda:	1d23      	adds	r3, r4, #4
 8004edc:	1af2      	subs	r2, r6, r3
 8004ede:	d0ae      	beq.n	8004e3e <_malloc_r+0x22>
 8004ee0:	1b9b      	subs	r3, r3, r6
 8004ee2:	50a3      	str	r3, [r4, r2]
 8004ee4:	e7ab      	b.n	8004e3e <_malloc_r+0x22>
 8004ee6:	42a3      	cmp	r3, r4
 8004ee8:	6862      	ldr	r2, [r4, #4]
 8004eea:	d1dd      	bne.n	8004ea8 <_malloc_r+0x8c>
 8004eec:	f8c8 2000 	str.w	r2, [r8]
 8004ef0:	e7ec      	b.n	8004ecc <_malloc_r+0xb0>
 8004ef2:	4623      	mov	r3, r4
 8004ef4:	6864      	ldr	r4, [r4, #4]
 8004ef6:	e7ac      	b.n	8004e52 <_malloc_r+0x36>
 8004ef8:	4634      	mov	r4, r6
 8004efa:	6876      	ldr	r6, [r6, #4]
 8004efc:	e7b4      	b.n	8004e68 <_malloc_r+0x4c>
 8004efe:	4613      	mov	r3, r2
 8004f00:	e7cc      	b.n	8004e9c <_malloc_r+0x80>
 8004f02:	230c      	movs	r3, #12
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4638      	mov	r0, r7
 8004f08:	f000 f80e 	bl	8004f28 <__malloc_unlock>
 8004f0c:	e797      	b.n	8004e3e <_malloc_r+0x22>
 8004f0e:	6025      	str	r5, [r4, #0]
 8004f10:	e7dc      	b.n	8004ecc <_malloc_r+0xb0>
 8004f12:	605b      	str	r3, [r3, #4]
 8004f14:	deff      	udf	#255	; 0xff
 8004f16:	bf00      	nop
 8004f18:	20000478 	.word	0x20000478

08004f1c <__malloc_lock>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__malloc_lock+0x8>)
 8004f1e:	f7ff bf0f 	b.w	8004d40 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	20000474 	.word	0x20000474

08004f28 <__malloc_unlock>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__malloc_unlock+0x8>)
 8004f2a:	f7ff bf0a 	b.w	8004d42 <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	20000474 	.word	0x20000474

08004f34 <__ssputs_r>:
 8004f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	688e      	ldr	r6, [r1, #8]
 8004f3a:	461f      	mov	r7, r3
 8004f3c:	42be      	cmp	r6, r7
 8004f3e:	680b      	ldr	r3, [r1, #0]
 8004f40:	4682      	mov	sl, r0
 8004f42:	460c      	mov	r4, r1
 8004f44:	4690      	mov	r8, r2
 8004f46:	d82c      	bhi.n	8004fa2 <__ssputs_r+0x6e>
 8004f48:	898a      	ldrh	r2, [r1, #12]
 8004f4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f4e:	d026      	beq.n	8004f9e <__ssputs_r+0x6a>
 8004f50:	6965      	ldr	r5, [r4, #20]
 8004f52:	6909      	ldr	r1, [r1, #16]
 8004f54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f58:	eba3 0901 	sub.w	r9, r3, r1
 8004f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f60:	1c7b      	adds	r3, r7, #1
 8004f62:	444b      	add	r3, r9
 8004f64:	106d      	asrs	r5, r5, #1
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf38      	it	cc
 8004f6a:	461d      	movcc	r5, r3
 8004f6c:	0553      	lsls	r3, r2, #21
 8004f6e:	d527      	bpl.n	8004fc0 <__ssputs_r+0x8c>
 8004f70:	4629      	mov	r1, r5
 8004f72:	f7ff ff53 	bl	8004e1c <_malloc_r>
 8004f76:	4606      	mov	r6, r0
 8004f78:	b360      	cbz	r0, 8004fd4 <__ssputs_r+0xa0>
 8004f7a:	6921      	ldr	r1, [r4, #16]
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	f000 faeb 	bl	8005558 <memcpy>
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	6126      	str	r6, [r4, #16]
 8004f90:	6165      	str	r5, [r4, #20]
 8004f92:	444e      	add	r6, r9
 8004f94:	eba5 0509 	sub.w	r5, r5, r9
 8004f98:	6026      	str	r6, [r4, #0]
 8004f9a:	60a5      	str	r5, [r4, #8]
 8004f9c:	463e      	mov	r6, r7
 8004f9e:	42be      	cmp	r6, r7
 8004fa0:	d900      	bls.n	8004fa4 <__ssputs_r+0x70>
 8004fa2:	463e      	mov	r6, r7
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	4641      	mov	r1, r8
 8004faa:	f000 faab 	bl	8005504 <memmove>
 8004fae:	68a3      	ldr	r3, [r4, #8]
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	60a3      	str	r3, [r4, #8]
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	4433      	add	r3, r6
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	2000      	movs	r0, #0
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	462a      	mov	r2, r5
 8004fc2:	f000 fad7 	bl	8005574 <_realloc_r>
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d1e0      	bne.n	8004f8e <__ssputs_r+0x5a>
 8004fcc:	6921      	ldr	r1, [r4, #16]
 8004fce:	4650      	mov	r0, sl
 8004fd0:	f7ff feb8 	bl	8004d44 <_free_r>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	f8ca 3000 	str.w	r3, [sl]
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe0:	81a3      	strh	r3, [r4, #12]
 8004fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe6:	e7e9      	b.n	8004fbc <__ssputs_r+0x88>

08004fe8 <_svfiprintf_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4698      	mov	r8, r3
 8004fee:	898b      	ldrh	r3, [r1, #12]
 8004ff0:	061b      	lsls	r3, r3, #24
 8004ff2:	b09d      	sub	sp, #116	; 0x74
 8004ff4:	4607      	mov	r7, r0
 8004ff6:	460d      	mov	r5, r1
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	d50e      	bpl.n	800501a <_svfiprintf_r+0x32>
 8004ffc:	690b      	ldr	r3, [r1, #16]
 8004ffe:	b963      	cbnz	r3, 800501a <_svfiprintf_r+0x32>
 8005000:	2140      	movs	r1, #64	; 0x40
 8005002:	f7ff ff0b 	bl	8004e1c <_malloc_r>
 8005006:	6028      	str	r0, [r5, #0]
 8005008:	6128      	str	r0, [r5, #16]
 800500a:	b920      	cbnz	r0, 8005016 <_svfiprintf_r+0x2e>
 800500c:	230c      	movs	r3, #12
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	e0d0      	b.n	80051b8 <_svfiprintf_r+0x1d0>
 8005016:	2340      	movs	r3, #64	; 0x40
 8005018:	616b      	str	r3, [r5, #20]
 800501a:	2300      	movs	r3, #0
 800501c:	9309      	str	r3, [sp, #36]	; 0x24
 800501e:	2320      	movs	r3, #32
 8005020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005024:	f8cd 800c 	str.w	r8, [sp, #12]
 8005028:	2330      	movs	r3, #48	; 0x30
 800502a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80051d0 <_svfiprintf_r+0x1e8>
 800502e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005032:	f04f 0901 	mov.w	r9, #1
 8005036:	4623      	mov	r3, r4
 8005038:	469a      	mov	sl, r3
 800503a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503e:	b10a      	cbz	r2, 8005044 <_svfiprintf_r+0x5c>
 8005040:	2a25      	cmp	r2, #37	; 0x25
 8005042:	d1f9      	bne.n	8005038 <_svfiprintf_r+0x50>
 8005044:	ebba 0b04 	subs.w	fp, sl, r4
 8005048:	d00b      	beq.n	8005062 <_svfiprintf_r+0x7a>
 800504a:	465b      	mov	r3, fp
 800504c:	4622      	mov	r2, r4
 800504e:	4629      	mov	r1, r5
 8005050:	4638      	mov	r0, r7
 8005052:	f7ff ff6f 	bl	8004f34 <__ssputs_r>
 8005056:	3001      	adds	r0, #1
 8005058:	f000 80a9 	beq.w	80051ae <_svfiprintf_r+0x1c6>
 800505c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505e:	445a      	add	r2, fp
 8005060:	9209      	str	r2, [sp, #36]	; 0x24
 8005062:	f89a 3000 	ldrb.w	r3, [sl]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a1 	beq.w	80051ae <_svfiprintf_r+0x1c6>
 800506c:	2300      	movs	r3, #0
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005076:	f10a 0a01 	add.w	sl, sl, #1
 800507a:	9304      	str	r3, [sp, #16]
 800507c:	9307      	str	r3, [sp, #28]
 800507e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005082:	931a      	str	r3, [sp, #104]	; 0x68
 8005084:	4654      	mov	r4, sl
 8005086:	2205      	movs	r2, #5
 8005088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800508c:	4850      	ldr	r0, [pc, #320]	; (80051d0 <_svfiprintf_r+0x1e8>)
 800508e:	f7fb f8a7 	bl	80001e0 <memchr>
 8005092:	9a04      	ldr	r2, [sp, #16]
 8005094:	b9d8      	cbnz	r0, 80050ce <_svfiprintf_r+0xe6>
 8005096:	06d0      	lsls	r0, r2, #27
 8005098:	bf44      	itt	mi
 800509a:	2320      	movmi	r3, #32
 800509c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a0:	0711      	lsls	r1, r2, #28
 80050a2:	bf44      	itt	mi
 80050a4:	232b      	movmi	r3, #43	; 0x2b
 80050a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050aa:	f89a 3000 	ldrb.w	r3, [sl]
 80050ae:	2b2a      	cmp	r3, #42	; 0x2a
 80050b0:	d015      	beq.n	80050de <_svfiprintf_r+0xf6>
 80050b2:	9a07      	ldr	r2, [sp, #28]
 80050b4:	4654      	mov	r4, sl
 80050b6:	2000      	movs	r0, #0
 80050b8:	f04f 0c0a 	mov.w	ip, #10
 80050bc:	4621      	mov	r1, r4
 80050be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050c2:	3b30      	subs	r3, #48	; 0x30
 80050c4:	2b09      	cmp	r3, #9
 80050c6:	d94d      	bls.n	8005164 <_svfiprintf_r+0x17c>
 80050c8:	b1b0      	cbz	r0, 80050f8 <_svfiprintf_r+0x110>
 80050ca:	9207      	str	r2, [sp, #28]
 80050cc:	e014      	b.n	80050f8 <_svfiprintf_r+0x110>
 80050ce:	eba0 0308 	sub.w	r3, r0, r8
 80050d2:	fa09 f303 	lsl.w	r3, r9, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	9304      	str	r3, [sp, #16]
 80050da:	46a2      	mov	sl, r4
 80050dc:	e7d2      	b.n	8005084 <_svfiprintf_r+0x9c>
 80050de:	9b03      	ldr	r3, [sp, #12]
 80050e0:	1d19      	adds	r1, r3, #4
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	9103      	str	r1, [sp, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	bfbb      	ittet	lt
 80050ea:	425b      	neglt	r3, r3
 80050ec:	f042 0202 	orrlt.w	r2, r2, #2
 80050f0:	9307      	strge	r3, [sp, #28]
 80050f2:	9307      	strlt	r3, [sp, #28]
 80050f4:	bfb8      	it	lt
 80050f6:	9204      	strlt	r2, [sp, #16]
 80050f8:	7823      	ldrb	r3, [r4, #0]
 80050fa:	2b2e      	cmp	r3, #46	; 0x2e
 80050fc:	d10c      	bne.n	8005118 <_svfiprintf_r+0x130>
 80050fe:	7863      	ldrb	r3, [r4, #1]
 8005100:	2b2a      	cmp	r3, #42	; 0x2a
 8005102:	d134      	bne.n	800516e <_svfiprintf_r+0x186>
 8005104:	9b03      	ldr	r3, [sp, #12]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfb8      	it	lt
 8005110:	f04f 33ff 	movlt.w	r3, #4294967295
 8005114:	3402      	adds	r4, #2
 8005116:	9305      	str	r3, [sp, #20]
 8005118:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80051e0 <_svfiprintf_r+0x1f8>
 800511c:	7821      	ldrb	r1, [r4, #0]
 800511e:	2203      	movs	r2, #3
 8005120:	4650      	mov	r0, sl
 8005122:	f7fb f85d 	bl	80001e0 <memchr>
 8005126:	b138      	cbz	r0, 8005138 <_svfiprintf_r+0x150>
 8005128:	9b04      	ldr	r3, [sp, #16]
 800512a:	eba0 000a 	sub.w	r0, r0, sl
 800512e:	2240      	movs	r2, #64	; 0x40
 8005130:	4082      	lsls	r2, r0
 8005132:	4313      	orrs	r3, r2
 8005134:	3401      	adds	r4, #1
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	4825      	ldr	r0, [pc, #148]	; (80051d4 <_svfiprintf_r+0x1ec>)
 800513e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005142:	2206      	movs	r2, #6
 8005144:	f7fb f84c 	bl	80001e0 <memchr>
 8005148:	2800      	cmp	r0, #0
 800514a:	d038      	beq.n	80051be <_svfiprintf_r+0x1d6>
 800514c:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <_svfiprintf_r+0x1f0>)
 800514e:	bb1b      	cbnz	r3, 8005198 <_svfiprintf_r+0x1b0>
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	3307      	adds	r3, #7
 8005154:	f023 0307 	bic.w	r3, r3, #7
 8005158:	3308      	adds	r3, #8
 800515a:	9303      	str	r3, [sp, #12]
 800515c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515e:	4433      	add	r3, r6
 8005160:	9309      	str	r3, [sp, #36]	; 0x24
 8005162:	e768      	b.n	8005036 <_svfiprintf_r+0x4e>
 8005164:	fb0c 3202 	mla	r2, ip, r2, r3
 8005168:	460c      	mov	r4, r1
 800516a:	2001      	movs	r0, #1
 800516c:	e7a6      	b.n	80050bc <_svfiprintf_r+0xd4>
 800516e:	2300      	movs	r3, #0
 8005170:	3401      	adds	r4, #1
 8005172:	9305      	str	r3, [sp, #20]
 8005174:	4619      	mov	r1, r3
 8005176:	f04f 0c0a 	mov.w	ip, #10
 800517a:	4620      	mov	r0, r4
 800517c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005180:	3a30      	subs	r2, #48	; 0x30
 8005182:	2a09      	cmp	r2, #9
 8005184:	d903      	bls.n	800518e <_svfiprintf_r+0x1a6>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0c6      	beq.n	8005118 <_svfiprintf_r+0x130>
 800518a:	9105      	str	r1, [sp, #20]
 800518c:	e7c4      	b.n	8005118 <_svfiprintf_r+0x130>
 800518e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005192:	4604      	mov	r4, r0
 8005194:	2301      	movs	r3, #1
 8005196:	e7f0      	b.n	800517a <_svfiprintf_r+0x192>
 8005198:	ab03      	add	r3, sp, #12
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	462a      	mov	r2, r5
 800519e:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <_svfiprintf_r+0x1f4>)
 80051a0:	a904      	add	r1, sp, #16
 80051a2:	4638      	mov	r0, r7
 80051a4:	f3af 8000 	nop.w
 80051a8:	1c42      	adds	r2, r0, #1
 80051aa:	4606      	mov	r6, r0
 80051ac:	d1d6      	bne.n	800515c <_svfiprintf_r+0x174>
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	065b      	lsls	r3, r3, #25
 80051b2:	f53f af2d 	bmi.w	8005010 <_svfiprintf_r+0x28>
 80051b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051b8:	b01d      	add	sp, #116	; 0x74
 80051ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051be:	ab03      	add	r3, sp, #12
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	462a      	mov	r2, r5
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <_svfiprintf_r+0x1f4>)
 80051c6:	a904      	add	r1, sp, #16
 80051c8:	4638      	mov	r0, r7
 80051ca:	f000 f879 	bl	80052c0 <_printf_i>
 80051ce:	e7eb      	b.n	80051a8 <_svfiprintf_r+0x1c0>
 80051d0:	08005721 	.word	0x08005721
 80051d4:	0800572b 	.word	0x0800572b
 80051d8:	00000000 	.word	0x00000000
 80051dc:	08004f35 	.word	0x08004f35
 80051e0:	08005727 	.word	0x08005727

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	6922      	ldr	r2, [r4, #16]
 800524e:	f003 0306 	and.w	r3, r3, #6
 8005252:	2b04      	cmp	r3, #4
 8005254:	bf02      	ittt	eq
 8005256:	68e5      	ldreq	r5, [r4, #12]
 8005258:	6833      	ldreq	r3, [r6, #0]
 800525a:	1aed      	subeq	r5, r5, r3
 800525c:	68a3      	ldr	r3, [r4, #8]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4649      	mov	r1, r9
 8005280:	4638      	mov	r0, r7
 8005282:	47c0      	blx	r8
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d4 	beq.w	800548a <_printf_i+0x1ca>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80c0 	beq.w	8005468 <_printf_i+0x1a8>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005471 	.word	0x08005471
 8005330:	08005399 	.word	0x08005399
 8005334:	0800542b 	.word	0x0800542b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	08005493 	.word	0x08005493
 8005344:	080052e9 	.word	0x080052e9
 8005348:	08005399 	.word	0x08005399
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005433 	.word	0x08005433
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e09f      	b.n	80054ac <_printf_i+0x1ec>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	0607      	lsls	r7, r0, #24
 8005372:	f103 0104 	add.w	r1, r3, #4
 8005376:	6029      	str	r1, [r5, #0]
 8005378:	d501      	bpl.n	800537e <_printf_i+0xbe>
 800537a:	681e      	ldr	r6, [r3, #0]
 800537c:	e003      	b.n	8005386 <_printf_i+0xc6>
 800537e:	0646      	lsls	r6, r0, #25
 8005380:	d5fb      	bpl.n	800537a <_printf_i+0xba>
 8005382:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005386:	2e00      	cmp	r6, #0
 8005388:	da03      	bge.n	8005392 <_printf_i+0xd2>
 800538a:	232d      	movs	r3, #45	; 0x2d
 800538c:	4276      	negs	r6, r6
 800538e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005392:	485a      	ldr	r0, [pc, #360]	; (80054fc <_printf_i+0x23c>)
 8005394:	230a      	movs	r3, #10
 8005396:	e012      	b.n	80053be <_printf_i+0xfe>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	6029      	str	r1, [r5, #0]
 80053a0:	0605      	lsls	r5, r0, #24
 80053a2:	d501      	bpl.n	80053a8 <_printf_i+0xe8>
 80053a4:	681e      	ldr	r6, [r3, #0]
 80053a6:	e002      	b.n	80053ae <_printf_i+0xee>
 80053a8:	0641      	lsls	r1, r0, #25
 80053aa:	d5fb      	bpl.n	80053a4 <_printf_i+0xe4>
 80053ac:	881e      	ldrh	r6, [r3, #0]
 80053ae:	4853      	ldr	r0, [pc, #332]	; (80054fc <_printf_i+0x23c>)
 80053b0:	2f6f      	cmp	r7, #111	; 0x6f
 80053b2:	bf0c      	ite	eq
 80053b4:	2308      	moveq	r3, #8
 80053b6:	230a      	movne	r3, #10
 80053b8:	2100      	movs	r1, #0
 80053ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053be:	6865      	ldr	r5, [r4, #4]
 80053c0:	60a5      	str	r5, [r4, #8]
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	bfa2      	ittt	ge
 80053c6:	6821      	ldrge	r1, [r4, #0]
 80053c8:	f021 0104 	bicge.w	r1, r1, #4
 80053cc:	6021      	strge	r1, [r4, #0]
 80053ce:	b90e      	cbnz	r6, 80053d4 <_printf_i+0x114>
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	d04b      	beq.n	800546c <_printf_i+0x1ac>
 80053d4:	4615      	mov	r5, r2
 80053d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80053da:	fb03 6711 	mls	r7, r3, r1, r6
 80053de:	5dc7      	ldrb	r7, [r0, r7]
 80053e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e4:	4637      	mov	r7, r6
 80053e6:	42bb      	cmp	r3, r7
 80053e8:	460e      	mov	r6, r1
 80053ea:	d9f4      	bls.n	80053d6 <_printf_i+0x116>
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d10b      	bne.n	8005408 <_printf_i+0x148>
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	07de      	lsls	r6, r3, #31
 80053f4:	d508      	bpl.n	8005408 <_printf_i+0x148>
 80053f6:	6923      	ldr	r3, [r4, #16]
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	4299      	cmp	r1, r3
 80053fc:	bfde      	ittt	le
 80053fe:	2330      	movle	r3, #48	; 0x30
 8005400:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005404:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005408:	1b52      	subs	r2, r2, r5
 800540a:	6122      	str	r2, [r4, #16]
 800540c:	f8cd a000 	str.w	sl, [sp]
 8005410:	464b      	mov	r3, r9
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4640      	mov	r0, r8
 8005418:	f7ff fee4 	bl	80051e4 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14a      	bne.n	80054b6 <_printf_i+0x1f6>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295
 8005424:	b004      	add	sp, #16
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	f043 0320 	orr.w	r3, r3, #32
 8005430:	6023      	str	r3, [r4, #0]
 8005432:	4833      	ldr	r0, [pc, #204]	; (8005500 <_printf_i+0x240>)
 8005434:	2778      	movs	r7, #120	; 0x78
 8005436:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	6829      	ldr	r1, [r5, #0]
 800543e:	061f      	lsls	r7, r3, #24
 8005440:	f851 6b04 	ldr.w	r6, [r1], #4
 8005444:	d402      	bmi.n	800544c <_printf_i+0x18c>
 8005446:	065f      	lsls	r7, r3, #25
 8005448:	bf48      	it	mi
 800544a:	b2b6      	uxthmi	r6, r6
 800544c:	07df      	lsls	r7, r3, #31
 800544e:	bf48      	it	mi
 8005450:	f043 0320 	orrmi.w	r3, r3, #32
 8005454:	6029      	str	r1, [r5, #0]
 8005456:	bf48      	it	mi
 8005458:	6023      	strmi	r3, [r4, #0]
 800545a:	b91e      	cbnz	r6, 8005464 <_printf_i+0x1a4>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	2310      	movs	r3, #16
 8005466:	e7a7      	b.n	80053b8 <_printf_i+0xf8>
 8005468:	4824      	ldr	r0, [pc, #144]	; (80054fc <_printf_i+0x23c>)
 800546a:	e7e4      	b.n	8005436 <_printf_i+0x176>
 800546c:	4615      	mov	r5, r2
 800546e:	e7bd      	b.n	80053ec <_printf_i+0x12c>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6826      	ldr	r6, [r4, #0]
 8005474:	6961      	ldr	r1, [r4, #20]
 8005476:	1d18      	adds	r0, r3, #4
 8005478:	6028      	str	r0, [r5, #0]
 800547a:	0635      	lsls	r5, r6, #24
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	d501      	bpl.n	8005484 <_printf_i+0x1c4>
 8005480:	6019      	str	r1, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0x1ca>
 8005484:	0670      	lsls	r0, r6, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0x1c0>
 8005488:	8019      	strh	r1, [r3, #0]
 800548a:	2300      	movs	r3, #0
 800548c:	6123      	str	r3, [r4, #16]
 800548e:	4615      	mov	r5, r2
 8005490:	e7bc      	b.n	800540c <_printf_i+0x14c>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	1d1a      	adds	r2, r3, #4
 8005496:	602a      	str	r2, [r5, #0]
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	2100      	movs	r1, #0
 800549e:	4628      	mov	r0, r5
 80054a0:	f7fa fe9e 	bl	80001e0 <memchr>
 80054a4:	b108      	cbz	r0, 80054aa <_printf_i+0x1ea>
 80054a6:	1b40      	subs	r0, r0, r5
 80054a8:	6060      	str	r0, [r4, #4]
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	6123      	str	r3, [r4, #16]
 80054ae:	2300      	movs	r3, #0
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b4:	e7aa      	b.n	800540c <_printf_i+0x14c>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	462a      	mov	r2, r5
 80054ba:	4649      	mov	r1, r9
 80054bc:	4640      	mov	r0, r8
 80054be:	47d0      	blx	sl
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0ad      	beq.n	8005420 <_printf_i+0x160>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	079b      	lsls	r3, r3, #30
 80054c8:	d413      	bmi.n	80054f2 <_printf_i+0x232>
 80054ca:	68e0      	ldr	r0, [r4, #12]
 80054cc:	9b03      	ldr	r3, [sp, #12]
 80054ce:	4298      	cmp	r0, r3
 80054d0:	bfb8      	it	lt
 80054d2:	4618      	movlt	r0, r3
 80054d4:	e7a6      	b.n	8005424 <_printf_i+0x164>
 80054d6:	2301      	movs	r3, #1
 80054d8:	4632      	mov	r2, r6
 80054da:	4649      	mov	r1, r9
 80054dc:	4640      	mov	r0, r8
 80054de:	47d0      	blx	sl
 80054e0:	3001      	adds	r0, #1
 80054e2:	d09d      	beq.n	8005420 <_printf_i+0x160>
 80054e4:	3501      	adds	r5, #1
 80054e6:	68e3      	ldr	r3, [r4, #12]
 80054e8:	9903      	ldr	r1, [sp, #12]
 80054ea:	1a5b      	subs	r3, r3, r1
 80054ec:	42ab      	cmp	r3, r5
 80054ee:	dcf2      	bgt.n	80054d6 <_printf_i+0x216>
 80054f0:	e7eb      	b.n	80054ca <_printf_i+0x20a>
 80054f2:	2500      	movs	r5, #0
 80054f4:	f104 0619 	add.w	r6, r4, #25
 80054f8:	e7f5      	b.n	80054e6 <_printf_i+0x226>
 80054fa:	bf00      	nop
 80054fc:	08005732 	.word	0x08005732
 8005500:	08005743 	.word	0x08005743

08005504 <memmove>:
 8005504:	4288      	cmp	r0, r1
 8005506:	b510      	push	{r4, lr}
 8005508:	eb01 0402 	add.w	r4, r1, r2
 800550c:	d902      	bls.n	8005514 <memmove+0x10>
 800550e:	4284      	cmp	r4, r0
 8005510:	4623      	mov	r3, r4
 8005512:	d807      	bhi.n	8005524 <memmove+0x20>
 8005514:	1e43      	subs	r3, r0, #1
 8005516:	42a1      	cmp	r1, r4
 8005518:	d008      	beq.n	800552c <memmove+0x28>
 800551a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800551e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005522:	e7f8      	b.n	8005516 <memmove+0x12>
 8005524:	4402      	add	r2, r0
 8005526:	4601      	mov	r1, r0
 8005528:	428a      	cmp	r2, r1
 800552a:	d100      	bne.n	800552e <memmove+0x2a>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005536:	e7f7      	b.n	8005528 <memmove+0x24>

08005538 <_sbrk_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d06      	ldr	r5, [pc, #24]	; (8005554 <_sbrk_r+0x1c>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	f7fb fe8a 	bl	800125c <_sbrk>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_sbrk_r+0x1a>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_sbrk_r+0x1a>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	20000470 	.word	0x20000470

08005558 <memcpy>:
 8005558:	440a      	add	r2, r1
 800555a:	4291      	cmp	r1, r2
 800555c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005560:	d100      	bne.n	8005564 <memcpy+0xc>
 8005562:	4770      	bx	lr
 8005564:	b510      	push	{r4, lr}
 8005566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800556e:	4291      	cmp	r1, r2
 8005570:	d1f9      	bne.n	8005566 <memcpy+0xe>
 8005572:	bd10      	pop	{r4, pc}

08005574 <_realloc_r>:
 8005574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005578:	4680      	mov	r8, r0
 800557a:	4614      	mov	r4, r2
 800557c:	460e      	mov	r6, r1
 800557e:	b921      	cbnz	r1, 800558a <_realloc_r+0x16>
 8005580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005584:	4611      	mov	r1, r2
 8005586:	f7ff bc49 	b.w	8004e1c <_malloc_r>
 800558a:	b92a      	cbnz	r2, 8005598 <_realloc_r+0x24>
 800558c:	f7ff fbda 	bl	8004d44 <_free_r>
 8005590:	4625      	mov	r5, r4
 8005592:	4628      	mov	r0, r5
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005598:	f000 f81b 	bl	80055d2 <_malloc_usable_size_r>
 800559c:	4284      	cmp	r4, r0
 800559e:	4607      	mov	r7, r0
 80055a0:	d802      	bhi.n	80055a8 <_realloc_r+0x34>
 80055a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055a6:	d812      	bhi.n	80055ce <_realloc_r+0x5a>
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f7ff fc36 	bl	8004e1c <_malloc_r>
 80055b0:	4605      	mov	r5, r0
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0ed      	beq.n	8005592 <_realloc_r+0x1e>
 80055b6:	42bc      	cmp	r4, r7
 80055b8:	4622      	mov	r2, r4
 80055ba:	4631      	mov	r1, r6
 80055bc:	bf28      	it	cs
 80055be:	463a      	movcs	r2, r7
 80055c0:	f7ff ffca 	bl	8005558 <memcpy>
 80055c4:	4631      	mov	r1, r6
 80055c6:	4640      	mov	r0, r8
 80055c8:	f7ff fbbc 	bl	8004d44 <_free_r>
 80055cc:	e7e1      	b.n	8005592 <_realloc_r+0x1e>
 80055ce:	4635      	mov	r5, r6
 80055d0:	e7df      	b.n	8005592 <_realloc_r+0x1e>

080055d2 <_malloc_usable_size_r>:
 80055d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d6:	1f18      	subs	r0, r3, #4
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bfbc      	itt	lt
 80055dc:	580b      	ldrlt	r3, [r1, r0]
 80055de:	18c0      	addlt	r0, r0, r3
 80055e0:	4770      	bx	lr
	...

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
