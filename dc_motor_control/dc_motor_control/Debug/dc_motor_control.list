
dc_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d4c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08005eec  08005eec  00015eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006044  08006044  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800604c  0800604c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000005c  080060b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080060b0  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d64c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9d  00000000  00000000  0002d71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d12  00000000  00000000  00030b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7f7  00000000  00000000  0003284a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7d6  00000000  00000000  00041041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a9c  00000000  00000000  000ce818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d22b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ed4 	.word	0x08005ed4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005ed4 	.word	0x08005ed4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if (interrupt_timer_state == RUNNING_INTERRUPT_TIMER_STATUS)
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d125      	bne.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
  {
    if (otherwise_state == START_OTHERWISE_STATUS)
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d112      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      classify_state = classify_state == LEFT_CLASSIFY_STATE ? RIGHT_CLASSIFY_STATE : LEFT_CLASSIFY_STATE;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d101      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x24>
 800059c:	2201      	movs	r2, #1
 800059e:	e000      	b.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80005a0:	2202      	movs	r2, #2
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005a4:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = START_INTERRUPT_TIMER_STATUS;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
      otherwise_state = STOP_OTHERWISE_STATUS;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim3);
 80005b2:	480e      	ldr	r0, [pc, #56]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005b4:	f002 fd94 	bl	80030e0 <HAL_TIM_Base_Stop_IT>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80005b8:	e00e      	b.n	80005d8 <HAL_TIM_PeriodElapsedCallback+0x5c>
      run_classify = STOP_CLASSIFY_STATE;
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
      classify_state = ORIGINAL_CLASSIFY_STATE;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = STOP_INTERRUPT_TIMER_STATUS;
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	701a      	strb	r2, [r3, #0]
      otherwise_state = START_OTHERWISE_STATUS;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim3);
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005d4:	f002 fd84 	bl	80030e0 <HAL_TIM_Base_Stop_IT>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200003b4 	.word	0x200003b4
 80005e4:	200003b5 	.word	0x200003b5
 80005e8:	200003b3 	.word	0x200003b3
 80005ec:	20000108 	.word	0x20000108
 80005f0:	200003b6 	.word	0x200003b6

080005f4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a70      	ldr	r2, [pc, #448]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d176      	bne.n	80006f8 <HAL_UARTEx_RxEventCallback+0x104>
  {
    state_change = UART_VARIABLE_RX_STATUS_OK;
 800060a:	4b70      	ldr	r3, [pc, #448]	; (80007cc <HAL_UARTEx_RxEventCallback+0x1d8>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]
    switch (rxbuf[0])
 8000610:	4b6f      	ldr	r3, [pc, #444]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	3b4c      	subs	r3, #76	; 0x4c
 8000616:	2b07      	cmp	r3, #7
 8000618:	d852      	bhi.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
 800061a:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <HAL_UARTEx_RxEventCallback+0x2c>)
 800061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000620:	08000651 	.word	0x08000651
 8000624:	080006c1 	.word	0x080006c1
 8000628:	080006c1 	.word	0x080006c1
 800062c:	080006c1 	.word	0x080006c1
 8000630:	08000649 	.word	0x08000649
 8000634:	080006c1 	.word	0x080006c1
 8000638:	08000689 	.word	0x08000689
 800063c:	08000641 	.word	0x08000641
    {
    case 'S':
    {
      state = START_MOTOR_STATE;
 8000640:	4b64      	ldr	r3, [pc, #400]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000642:	2201      	movs	r2, #1
 8000644:	701a      	strb	r2, [r3, #0]
      break;
 8000646:	e03b      	b.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'P':
    {
      state = STOP_MOTOR_STATE;
 8000648:	4b62      	ldr	r3, [pc, #392]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
      break;
 800064e:	e037      	b.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'L':
    {
      state = MOTOR_LEFT_STATE;
 8000650:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000652:	2202      	movs	r2, #2
 8000654:	701a      	strb	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 8000656:	2301      	movs	r3, #1
 8000658:	61fb      	str	r3, [r7, #28]
 800065a:	e00a      	b.n	8000672 <HAL_UARTEx_RxEventCallback+0x7e>
      {
        data_pwm[b - 1] = rxbuf[b];
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	3b01      	subs	r3, #1
 8000660:	495b      	ldr	r1, [pc, #364]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000662:	69fa      	ldr	r2, [r7, #28]
 8000664:	440a      	add	r2, r1
 8000666:	7811      	ldrb	r1, [r2, #0]
 8000668:	4a5b      	ldr	r2, [pc, #364]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800066a:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	3301      	adds	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	2b02      	cmp	r3, #2
 8000676:	ddf1      	ble.n	800065c <HAL_UARTEx_RxEventCallback+0x68>
      }
      pwm_t = atoi(data_pwm);
 8000678:	4857      	ldr	r0, [pc, #348]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800067a:	f004 fef7 	bl	800546c <atoi>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b56      	ldr	r3, [pc, #344]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000684:	801a      	strh	r2, [r3, #0]
      break;
 8000686:	e01b      	b.n	80006c0 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'R':
    {
      state = MOTOR_RIGHT_STATE;
 8000688:	4b52      	ldr	r3, [pc, #328]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800068a:	2203      	movs	r2, #3
 800068c:	701a      	strb	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 800068e:	2301      	movs	r3, #1
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	e00a      	b.n	80006aa <HAL_UARTEx_RxEventCallback+0xb6>
      {
        data_pwm[b - 1] = rxbuf[b];
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	3b01      	subs	r3, #1
 8000698:	494d      	ldr	r1, [pc, #308]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 800069a:	69ba      	ldr	r2, [r7, #24]
 800069c:	440a      	add	r2, r1
 800069e:	7811      	ldrb	r1, [r2, #0]
 80006a0:	4a4d      	ldr	r2, [pc, #308]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006a2:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	3301      	adds	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	ddf1      	ble.n	8000694 <HAL_UARTEx_RxEventCallback+0xa0>
      }
      pwm_t = atoi(data_pwm);
 80006b0:	4849      	ldr	r0, [pc, #292]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006b2:	f004 fedb 	bl	800546c <atoi>
 80006b6:	4603      	mov	r3, r0
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b48      	ldr	r3, [pc, #288]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1e8>)
 80006bc:	801a      	strh	r2, [r3, #0]
      break;
 80006be:	bf00      	nop
    }
    }
    /* Clear the rxbuf */
    for (uint8_t i = 0U; i < Size; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	e006      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0xe0>
    {
      rxbuf[i] = '\0';
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
 80006c8:	4a41      	ldr	r2, [pc, #260]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	3301      	adds	r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	887a      	ldrh	r2, [r7, #2]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d8f3      	bhi.n	80006c6 <HAL_UARTEx_RxEventCallback+0xd2>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) rxbuf, RXBUF_SIZE);
 80006de:	2208      	movs	r2, #8
 80006e0:	493b      	ldr	r1, [pc, #236]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006e2:	483f      	ldr	r0, [pc, #252]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80006e4:	f003 fd6d 	bl	80041c2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f022 0208 	bic.w	r2, r2, #8
 80006f6:	601a      	str	r2, [r3, #0]
  }

  if (huart->Instance == USART2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d15e      	bne.n	80007c0 <HAL_UARTEx_RxEventCallback+0x1cc>
  {
    for (int b = 0; b < Size; b++)
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	e00b      	b.n	8000720 <HAL_UARTEx_RxEventCallback+0x12c>
    {
      data_pwm[b] = rxbuf_2[b];
 8000708:	4a38      	ldr	r2, [pc, #224]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1f8>)
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	4413      	add	r3, r2
 800070e:	7819      	ldrb	r1, [r3, #0]
 8000710:	4a31      	ldr	r2, [pc, #196]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4413      	add	r3, r2
 8000716:	460a      	mov	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]
    for (int b = 0; b < Size; b++)
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	3301      	adds	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	887b      	ldrh	r3, [r7, #2]
 8000722:	693a      	ldr	r2, [r7, #16]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbef      	blt.n	8000708 <HAL_UARTEx_RxEventCallback+0x114>
    }

    if (data_pwm[0] != 'L' || data_pwm[0] != 'R')
 8000728:	4b2b      	ldr	r3, [pc, #172]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b4c      	cmp	r3, #76	; 0x4c
 800072e:	d103      	bne.n	8000738 <HAL_UARTEx_RxEventCallback+0x144>
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	2b52      	cmp	r3, #82	; 0x52
 8000736:	d00c      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x15e>
    {
      state = MOTOR_LEFT_STATE;
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800073a:	2202      	movs	r2, #2
 800073c:	701a      	strb	r2, [r3, #0]
      state_change = UART_VARIABLE_RX_STATUS_OK;
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]
      pwm_t = atoi(data_pwm);
 8000744:	4824      	ldr	r0, [pc, #144]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000746:	f004 fe91 	bl	800546c <atoi>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000750:	801a      	strh	r2, [r3, #0]
    }

    if (data_pwm[0] == 'L' || data_pwm[0] == 'R')
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b4c      	cmp	r3, #76	; 0x4c
 8000758:	d003      	beq.n	8000762 <HAL_UARTEx_RxEventCallback+0x16e>
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b52      	cmp	r3, #82	; 0x52
 8000760:	d10e      	bne.n	8000780 <HAL_UARTEx_RxEventCallback+0x18c>
    {
      run_classify = START_CLASSIFY_STATE;
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = START_INTERRUPT_TIMER_STATUS;
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x200>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
      classify_state = data_pwm[0] == 'L' ? LEFT_CLASSIFY_STATE : RIGHT_CLASSIFY_STATE;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b4c      	cmp	r3, #76	; 0x4c
 8000774:	d101      	bne.n	800077a <HAL_UARTEx_RxEventCallback+0x186>
 8000776:	2202      	movs	r2, #2
 8000778:	e000      	b.n	800077c <HAL_UARTEx_RxEventCallback+0x188>
 800077a:	2201      	movs	r2, #1
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x204>)
 800077e:	701a      	strb	r2, [r3, #0]
    }

    for (uint8_t i = 0U; i < Size; i++)
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
 8000784:	e00a      	b.n	800079c <HAL_UARTEx_RxEventCallback+0x1a8>
    {
      data_pwm[i] = '\0';
 8000786:	7bfb      	ldrb	r3, [r7, #15]
 8000788:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800078a:	2100      	movs	r1, #0
 800078c:	54d1      	strb	r1, [r2, r3]
      rxbuf_2[i] = '\0';
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000792:	2100      	movs	r1, #0
 8000794:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 8000796:	7bfb      	ldrb	r3, [r7, #15]
 8000798:	3301      	adds	r3, #1
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	887a      	ldrh	r2, [r7, #2]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d8ef      	bhi.n	8000786 <HAL_UARTEx_RxEventCallback+0x192>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxbuf_2, RXBUF_SIZE);
 80007a6:	2208      	movs	r2, #8
 80007a8:	4910      	ldr	r1, [pc, #64]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1f8>)
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <HAL_UARTEx_RxEventCallback+0x208>)
 80007ac:	f003 fd09 	bl	80041c2 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <HAL_UARTEx_RxEventCallback+0x20c>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_UARTEx_RxEventCallback+0x20c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f022 0208 	bic.w	r2, r2, #8
 80007be:	601a      	str	r2, [r3, #0]
  }
}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40011000 	.word	0x40011000
 80007cc:	200003b8 	.word	0x200003b8
 80007d0:	200003a0 	.word	0x200003a0
 80007d4:	200003b2 	.word	0x200003b2
 80007d8:	200003bc 	.word	0x200003bc
 80007dc:	200003b0 	.word	0x200003b0
 80007e0:	20000198 	.word	0x20000198
 80007e4:	20000220 	.word	0x20000220
 80007e8:	40004400 	.word	0x40004400
 80007ec:	200003a8 	.word	0x200003a8
 80007f0:	200003b6 	.word	0x200003b6
 80007f4:	200003b4 	.word	0x200003b4
 80007f8:	200003b3 	.word	0x200003b3
 80007fc:	200001dc 	.word	0x200001dc
 8000800:	200002e0 	.word	0x200002e0

08000804 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000808:	f001 f83c 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080c:	f000 f8d4 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000810:	f000 fbe6 	bl	8000fe0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000814:	f000 fb9e 	bl	8000f54 <MX_DMA_Init>
  MX_TIM1_Init();
 8000818:	f000 f92e 	bl	8000a78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800081c:	f000 fb46 	bl	8000eac <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000820:	f000 f9d6 	bl	8000bd0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000824:	f000 fb6c 	bl	8000f00 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000828:	f000 fa5c 	bl	8000ce4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800082c:	f000 faa8 	bl	8000d80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxbuf, RXBUF_SIZE);
 8000830:	2208      	movs	r2, #8
 8000832:	494f      	ldr	r1, [pc, #316]	; (8000970 <main+0x16c>)
 8000834:	484f      	ldr	r0, [pc, #316]	; (8000974 <main+0x170>)
 8000836:	f003 fcc4 	bl	80041c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800083a:	4b4f      	ldr	r3, [pc, #316]	; (8000978 <main+0x174>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b4d      	ldr	r3, [pc, #308]	; (8000978 <main+0x174>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f022 0208 	bic.w	r2, r2, #8
 8000848:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuf_2, RXBUF_SIZE);
 800084a:	2208      	movs	r2, #8
 800084c:	494b      	ldr	r1, [pc, #300]	; (800097c <main+0x178>)
 800084e:	484c      	ldr	r0, [pc, #304]	; (8000980 <main+0x17c>)
 8000850:	f003 fcb7 	bl	80041c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000854:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <main+0x180>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b4a      	ldr	r3, [pc, #296]	; (8000984 <main+0x180>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f022 0208 	bic.w	r2, r2, #8
 8000862:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000864:	2100      	movs	r1, #0
 8000866:	4848      	ldr	r0, [pc, #288]	; (8000988 <main+0x184>)
 8000868:	f002 fcc2 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800086c:	210c      	movs	r1, #12
 800086e:	4846      	ldr	r0, [pc, #280]	; (8000988 <main+0x184>)
 8000870:	f002 fcbe 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000874:	2104      	movs	r1, #4
 8000876:	4845      	ldr	r0, [pc, #276]	; (800098c <main+0x188>)
 8000878:	f002 fcba 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800087c:	2100      	movs	r1, #0
 800087e:	4843      	ldr	r0, [pc, #268]	; (800098c <main+0x188>)
 8000880:	f002 fcb6 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000884:	2108      	movs	r1, #8
 8000886:	4841      	ldr	r0, [pc, #260]	; (800098c <main+0x188>)
 8000888:	f002 fcb2 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	4840      	ldr	r0, [pc, #256]	; (8000990 <main+0x18c>)
 8000890:	f002 fcae 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000894:	2104      	movs	r1, #4
 8000896:	483e      	ldr	r0, [pc, #248]	; (8000990 <main+0x18c>)
 8000898:	f002 fcaa 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800089c:	2108      	movs	r1, #8
 800089e:	483c      	ldr	r0, [pc, #240]	; (8000990 <main+0x18c>)
 80008a0:	f002 fca6 	bl	80031f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008a4:	210c      	movs	r1, #12
 80008a6:	483a      	ldr	r0, [pc, #232]	; (8000990 <main+0x18c>)
 80008a8:	f002 fca2 	bl	80031f0 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (conveyor_control(state, pwm_t) != CONVEYOR_STATUS_OK)
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <main+0x190>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4a39      	ldr	r2, [pc, #228]	; (8000998 <main+0x194>)
 80008b2:	8812      	ldrh	r2, [r2, #0]
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 fbed 	bl	8001098 <conveyor_control>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <main+0xc4>
    {
      Error_Handler();
 80008c4:	f000 fc6a 	bl	800119c <Error_Handler>
    }

    if (state_change == UART_TRANSMIT_STATUS_OK)
 80008c8:	4b34      	ldr	r3, [pc, #208]	; (800099c <main+0x198>)
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d109      	bne.n	80008e4 <main+0xe0>
    {
      if (uart_transmit() != UART_TRANSMIT_STATUS_OK)
 80008d0:	f000 fbc8 	bl	8001064 <uart_transmit>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <main+0xda>
      {
        Error_Handler();
 80008da:	f000 fc5f 	bl	800119c <Error_Handler>
      }
      state_change = UART_VARIABLE_RX_STATUS_DONE;
 80008de:	4b2f      	ldr	r3, [pc, #188]	; (800099c <main+0x198>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	801a      	strh	r2, [r3, #0]
    }

    if (run_classify == START_CLASSIFY_STATE)
 80008e4:	4b2e      	ldr	r3, [pc, #184]	; (80009a0 <main+0x19c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d114      	bne.n	8000916 <main+0x112>
    {
      if (interrupt_timer_state == START_INTERRUPT_TIMER_STATUS)
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <main+0x1a0>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d105      	bne.n	8000900 <main+0xfc>
      {
        HAL_TIM_Base_Start_IT(&htim3);
 80008f4:	482c      	ldr	r0, [pc, #176]	; (80009a8 <main+0x1a4>)
 80008f6:	f002 fb91 	bl	800301c <HAL_TIM_Base_Start_IT>
        interrupt_timer_state = RUNNING_INTERRUPT_TIMER_STATUS;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <main+0x1a0>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
      }
      if (classify_control(classify_state, CLASSIFY_PWM_T) != CLASSIFY_STATUS_OK)
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <main+0x1a8>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2132      	movs	r1, #50	; 0x32
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fc10 	bl	800112c <classify_control>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <main+0x112>
      {
        Error_Handler();
 8000912:	f000 fc43 	bl	800119c <Error_Handler>
      }
      // run_classify = STOP_CLASSIFY_STATE;
    }

    if (test_state)
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <main+0x1ac>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0c6      	beq.n	80008ac <main+0xa8>
    {
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_test_1);
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <main+0x1b0>)
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <main+0x188>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_test_1);
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <main+0x1b0>)
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <main+0x188>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_test_1);
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <main+0x1b0>)
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <main+0x18c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm_test_1);
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <main+0x1b0>)
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <main+0x18c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm_test_1);
 8000946:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <main+0x1b0>)
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <main+0x18c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_test_1);
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <main+0x1b0>)
 8000952:	781a      	ldrb	r2, [r3, #0]
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <main+0x18c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pwm_test_1);
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <main+0x1b0>)
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <main+0x184>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_test_1);
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <main+0x1b0>)
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <main+0x188>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	639a      	str	r2, [r3, #56]	; 0x38
    if (conveyor_control(state, pwm_t) != CONVEYOR_STATUS_OK)
 800096e:	e79d      	b.n	80008ac <main+0xa8>
 8000970:	200003a0 	.word	0x200003a0
 8000974:	20000198 	.word	0x20000198
 8000978:	20000220 	.word	0x20000220
 800097c:	200003a8 	.word	0x200003a8
 8000980:	200001dc 	.word	0x200001dc
 8000984:	200002e0 	.word	0x200002e0
 8000988:	20000078 	.word	0x20000078
 800098c:	200000c0 	.word	0x200000c0
 8000990:	20000150 	.word	0x20000150
 8000994:	200003b2 	.word	0x200003b2
 8000998:	200003b0 	.word	0x200003b0
 800099c:	200003b8 	.word	0x200003b8
 80009a0:	200003b6 	.word	0x200003b6
 80009a4:	200003b4 	.word	0x200003b4
 80009a8:	20000108 	.word	0x20000108
 80009ac:	200003b3 	.word	0x200003b3
 80009b0:	200003bb 	.word	0x200003bb
 80009b4:	200003ba 	.word	0x200003ba

080009b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fe00 	bl	80055cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <SystemClock_Config+0xb8>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <SystemClock_Config+0xb8>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <SystemClock_Config+0xb8>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <SystemClock_Config+0xbc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <SystemClock_Config+0xbc>)
 8000a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <SystemClock_Config+0xbc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fe4d 	bl	80026cc <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a38:	f000 fbb0 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
    RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 f8b0 	bl	8002bbc <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a62:	f000 fb9b 	bl	800119c <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3750      	adds	r7, #80	; 0x50
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b096      	sub	sp, #88	; 0x58
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
 8000aa6:	615a      	str	r2, [r3, #20]
 8000aa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2220      	movs	r2, #32
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f004 fd8b 	bl	80055cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ab6:	4b44      	ldr	r3, [pc, #272]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <MX_TIM1_Init+0x154>)
 8000aba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000abc:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000abe:	229f      	movs	r2, #159	; 0x9f
 8000ac0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac2:	4b41      	ldr	r3, [pc, #260]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000aca:	2263      	movs	r2, #99	; 0x63
 8000acc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ada:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ae0:	4839      	ldr	r0, [pc, #228]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000ae2:	f002 fa4b 	bl	8002f7c <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000aec:	f000 fb56 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000af6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000afa:	4619      	mov	r1, r3
 8000afc:	4832      	ldr	r0, [pc, #200]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000afe:	f002 fdf1 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b08:	f000 fb48 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b0c:	482e      	ldr	r0, [pc, #184]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000b0e:	f002 fb16 	bl	800313e <HAL_TIM_PWM_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b18:	f000 fb40 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4827      	ldr	r0, [pc, #156]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000b2c:	f003 f996 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000b36:	f000 fb31 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3a:	2360      	movs	r3, #96	; 0x60
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481a      	ldr	r0, [pc, #104]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000b60:	f002 fcfe 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b6a:	f000 fb17 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	220c      	movs	r2, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000b78:	f002 fcf2 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b82:	f000 fb0b 	bl	800119c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000baa:	f003 f9c5 	bl	8003f38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000bb4:	f000 faf2 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <MX_TIM1_Init+0x150>)
 8000bba:	f000 fb85 	bl	80012c8 <HAL_TIM_MspPostInit>
}
 8000bbe:	bf00      	nop
 8000bc0:	3758      	adds	r7, #88	; 0x58
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000078 	.word	0x20000078
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
 8000bfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000c08:	4b35      	ldr	r3, [pc, #212]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c0a:	229f      	movs	r2, #159	; 0x9f
 8000c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0e:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c14:	4b32      	ldr	r3, [pc, #200]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c16:	2263      	movs	r2, #99	; 0x63
 8000c18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c20:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c22:	2280      	movs	r2, #128	; 0x80
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c26:	482e      	ldr	r0, [pc, #184]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c28:	f002 f9a8 	bl	8002f7c <HAL_TIM_Base_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000c32:	f000 fab3 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4827      	ldr	r0, [pc, #156]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c44:	f002 fd4e 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c4e:	f000 faa5 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c54:	f002 fa73 	bl	800313e <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c5e:	f000 fa9d 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481b      	ldr	r0, [pc, #108]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c72:	f003 f8f3 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c7c:	f000 fa8e 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	; 0x60
 8000c82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	4619      	mov	r1, r3
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000c98:	f002 fc62 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000ca2:	f000 fa7b 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2204      	movs	r2, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000cae:	f002 fc57 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000cb8:	f000 fa70 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000cc4:	f002 fc4c 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000cce:	f000 fa65 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM2_Init+0x110>)
 8000cd4:	f000 faf8 	bl	80012c8 <HAL_TIM_MspPostInit>
}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	200000c0 	.word	0x200000c0

08000ce4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <MX_TIM3_Init+0x98>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d08:	f240 623f 	movw	r2, #1599	; 0x63f
 8000d0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000d14:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d16:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d2a:	f002 f927 	bl	8002f7c <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d34:	f000 fa32 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d46:	f002 fccd 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d50:	f000 fa24 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM3_Init+0x94>)
 8000d62:	f003 f87b 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d6c:	f000 fa16 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000108 	.word	0x20000108
 8000d7c:	40000400 	.word	0x40000400

08000d80 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	615a      	str	r2, [r3, #20]
 8000dae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000db2:	4a3d      	ldr	r2, [pc, #244]	; (8000ea8 <MX_TIM4_Init+0x128>)
 8000db4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000db8:	229f      	movs	r2, #159	; 0x9f
 8000dba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbc:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000dc4:	2263      	movs	r2, #99	; 0x63
 8000dc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dd4:	4833      	ldr	r0, [pc, #204]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000dd6:	f002 f8d1 	bl	8002f7c <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000de0:	f000 f9dc 	bl	800119c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dee:	4619      	mov	r1, r3
 8000df0:	482c      	ldr	r0, [pc, #176]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000df2:	f002 fc77 	bl	80036e4 <HAL_TIM_ConfigClockSource>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000dfc:	f000 f9ce 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e00:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e02:	f002 f99c 	bl	800313e <HAL_TIM_PWM_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000e0c:	f000 f9c6 	bl	800119c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e20:	f003 f81c 	bl	8003e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000e2a:	f000 f9b7 	bl	800119c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2e:	2360      	movs	r3, #96	; 0x60
 8000e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	4619      	mov	r1, r3
 8000e44:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e46:	f002 fb8b 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000e50:	f000 f9a4 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2204      	movs	r2, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e5c:	f002 fb80 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000e66:	f000 f999 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2208      	movs	r2, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e72:	f002 fb75 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000e7c:	f000 f98e 	bl	800119c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	220c      	movs	r2, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e88:	f002 fb6a 	bl	8003560 <HAL_TIM_PWM_ConfigChannel>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000e92:	f000 f983 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <MX_TIM4_Init+0x124>)
 8000e98:	f000 fa16 	bl	80012c8 <HAL_TIM_MspPostInit>
}
 8000e9c:	bf00      	nop
 8000e9e:	3738      	adds	r7, #56	; 0x38
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000150 	.word	0x20000150
 8000ea8:	40000800 	.word	0x40000800

08000eac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <MX_USART1_UART_Init+0x50>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000eb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f003 f88e 	bl	8004004 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000eee:	f000 f955 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000198 	.word	0x20000198
 8000efc:	40011000 	.word	0x40011000

08000f00 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_USART2_UART_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_USART2_UART_Init+0x4c>)
 8000f38:	f003 f864 	bl	8004004 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f42:	f000 f92b 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	200001dc 	.word	0x200001dc
 8000f50:	40004400 	.word	0x40004400

08000f54 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <MX_DMA_Init+0x88>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MX_DMA_Init+0x88>)
 8000f64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_DMA_Init+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_DMA_Init+0x88>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <MX_DMA_Init+0x88>)
 8000f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_DMA_Init+0x88>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2010      	movs	r0, #16
 8000f98:	f000 fdc1 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f9c:	2010      	movs	r0, #16
 8000f9e:	f000 fdda 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2011      	movs	r0, #17
 8000fa8:	f000 fdb9 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fac:	2011      	movs	r0, #17
 8000fae:	f000 fdd2 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	203a      	movs	r0, #58	; 0x3a
 8000fb8:	f000 fdb1 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000fbc:	203a      	movs	r0, #58	; 0x3a
 8000fbe:	f000 fdca 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2046      	movs	r0, #70	; 0x46
 8000fc8:	f000 fda9 	bl	8001b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fcc:	2046      	movs	r0, #70	; 0x46
 8000fce:	f000 fdc2 	bl	8001b56 <HAL_NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_GPIO_Init+0x7c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <MX_GPIO_Init+0x7c>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_GPIO_Init+0x7c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_GPIO_Init+0x7c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <MX_GPIO_Init+0x7c>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_GPIO_Init+0x7c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2160      	movs	r1, #96	; 0x60
 8001032:	480b      	ldr	r0, [pc, #44]	; (8001060 <MX_GPIO_Init+0x80>)
 8001034:	f001 fb30 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_GPIO_Init+0x80>)
 8001050:	f001 f99e 	bl	8002390 <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000

08001064 <uart_transmit>:

/* USER CODE BEGIN 4 */
static uart_transmit_status_t uart_transmit()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  sprintf(duty_cycle_send, "%2d", pwm_t);
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <uart_transmit+0x24>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4907      	ldr	r1, [pc, #28]	; (800108c <uart_transmit+0x28>)
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <uart_transmit+0x2c>)
 8001072:	f004 fa8b 	bl	800558c <siprintf>
  /* Transmit UART of Duty Cycle Polling */
  HAL_UART_Transmit(&huart2, (uint8_t *) duty_cycle_send, sizeof(duty_cycle_send), 100);
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	2202      	movs	r2, #2
 800107a:	4905      	ldr	r1, [pc, #20]	; (8001090 <uart_transmit+0x2c>)
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <uart_transmit+0x30>)
 800107e:	f003 f80e 	bl	800409e <HAL_UART_Transmit>
  return UART_TRANSMIT_STATUS_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200003b0 	.word	0x200003b0
 800108c:	08005eec 	.word	0x08005eec
 8001090:	200003c4 	.word	0x200003c4
 8001094:	200001dc 	.word	0x200001dc

08001098 <conveyor_control>:
static conveyor_status_t conveyor_control(uint8_t state, uint8_t pwm_t)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
  switch (state)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d832      	bhi.n	8001114 <conveyor_control+0x7c>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <conveyor_control+0x1c>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080010c5 	.word	0x080010c5
 80010b8:	080010db 	.word	0x080010db
 80010bc:	080010f1 	.word	0x080010f1
 80010c0:	08001103 	.word	0x08001103
  {
  case STOP_MOTOR_STATE:
  {
    pwm_t = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	71bb      	strb	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_t);
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <conveyor_control+0x8c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	79ba      	ldrb	r2, [r7, #6]
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <conveyor_control+0x90>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	79ba      	ldrb	r2, [r7, #6]
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010d8:	e01c      	b.n	8001114 <conveyor_control+0x7c>
  }
  case START_MOTOR_STATE:
  {
    pwm_t = 49;
 80010da:	2331      	movs	r3, #49	; 0x31
 80010dc:	71bb      	strb	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <conveyor_control+0x8c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <conveyor_control+0x90>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	79ba      	ldrb	r2, [r7, #6]
 80010ec:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010ee:	e011      	b.n	8001114 <conveyor_control+0x7c>
  }
  case MOTOR_LEFT_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <conveyor_control+0x8c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <conveyor_control+0x90>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	79ba      	ldrb	r2, [r7, #6]
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8001100:	e008      	b.n	8001114 <conveyor_control+0x7c>
  }
  case MOTOR_RIGHT_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_t);
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <conveyor_control+0x8c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	79ba      	ldrb	r2, [r7, #6]
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <conveyor_control+0x90>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 8001112:	bf00      	nop
  }
  }
  return CONVEYOR_STATUS_OK;
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	200000c0 	.word	0x200000c0
 8001128:	20000150 	.word	0x20000150

0800112c <classify_control>:

static classify_status_t classify_control(uint8_t classify_state, uint8_t pwm_classify)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	460a      	mov	r2, r1
 8001136:	71fb      	strb	r3, [r7, #7]
 8001138:	4613      	mov	r3, r2
 800113a:	71bb      	strb	r3, [r7, #6]
  switch (classify_state)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d00f      	beq.n	8001162 <classify_control+0x36>
 8001142:	2b02      	cmp	r3, #2
 8001144:	dc1f      	bgt.n	8001186 <classify_control+0x5a>
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <classify_control+0x24>
 800114a:	2b01      	cmp	r3, #1
 800114c:	d012      	beq.n	8001174 <classify_control+0x48>
 800114e:	e01a      	b.n	8001186 <classify_control+0x5a>
  {
  case ORIGINAL_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <classify_control+0x68>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <classify_control+0x6c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001160:	e011      	b.n	8001186 <classify_control+0x5a>
  }
  case LEFT_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_classify);
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <classify_control+0x68>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	79ba      	ldrb	r2, [r7, #6]
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <classify_control+0x6c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2200      	movs	r2, #0
 8001170:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001172:	e008      	b.n	8001186 <classify_control+0x5a>
  }
  case RIGHT_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <classify_control+0x68>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_classify);
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <classify_control+0x6c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	79ba      	ldrb	r2, [r7, #6]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001184:	bf00      	nop
  }
  }
  return CLASSIFY_STATUS_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	200000c0 	.word	0x200000c0
 8001198:	20000150 	.word	0x20000150

0800119c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
}
 80011a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <Error_Handler+0x8>
	...

080011a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a0f      	ldr	r2, [pc, #60]	; (80011f4 <HAL_MspInit+0x4c>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_MspInit+0x4c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x4c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x4c>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a2c      	ldr	r2, [pc, #176]	; (80012b8 <HAL_TIM_Base_MspInit+0xc0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10e      	bne.n	8001228 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	4a2a      	ldr	r2, [pc, #168]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6453      	str	r3, [r2, #68]	; 0x44
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001226:	e042      	b.n	80012ae <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001230:	d10e      	bne.n	8001250 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a20      	ldr	r2, [pc, #128]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]
}
 800124e:	e02e      	b.n	80012ae <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <HAL_TIM_Base_MspInit+0xc8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d116      	bne.n	8001288 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a16      	ldr	r2, [pc, #88]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	201d      	movs	r0, #29
 800127c:	f000 fc4f 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001280:	201d      	movs	r0, #29
 8001282:	f000 fc68 	bl	8001b56 <HAL_NVIC_EnableIRQ>
}
 8001286:	e012      	b.n	80012ae <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <HAL_TIM_Base_MspInit+0xcc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10d      	bne.n	80012ae <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_TIM_Base_MspInit+0xc4>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40000400 	.word	0x40000400
 80012c4:	40000800 	.word	0x40000800

080012c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08c      	sub	sp, #48	; 0x30
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_TIM_MspPostInit+0x138>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d11f      	bne.n	800132a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	61bb      	str	r3, [r7, #24]
 80012ee:	4b45      	ldr	r3, [pc, #276]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a44      	ldr	r2, [pc, #272]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b42      	ldr	r3, [pc, #264]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001306:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800130a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001318:	2301      	movs	r3, #1
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4839      	ldr	r0, [pc, #228]	; (8001408 <HAL_TIM_MspPostInit+0x140>)
 8001324:	f001 f834 	bl	8002390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001328:	e066      	b.n	80013f8 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001332:	d13d      	bne.n	80013b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	4b32      	ldr	r3, [pc, #200]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a31      	ldr	r2, [pc, #196]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b2f      	ldr	r3, [pc, #188]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a2a      	ldr	r2, [pc, #168]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b28      	ldr	r3, [pc, #160]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800136c:	2303      	movs	r3, #3
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800137c:	2301      	movs	r3, #1
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4820      	ldr	r0, [pc, #128]	; (8001408 <HAL_TIM_MspPostInit+0x140>)
 8001388:	f001 f802 	bl	8002390 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800139e:	2301      	movs	r3, #1
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <HAL_TIM_MspPostInit+0x144>)
 80013aa:	f000 fff1 	bl	8002390 <HAL_GPIO_Init>
}
 80013ae:	e023      	b.n	80013f8 <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM4)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_TIM_MspPostInit+0x148>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d11e      	bne.n	80013f8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_TIM_MspPostInit+0x13c>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013d6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013e8:	2302      	movs	r3, #2
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	; (800140c <HAL_TIM_MspPostInit+0x144>)
 80013f4:	f000 ffcc 	bl	8002390 <HAL_GPIO_Init>
}
 80013f8:	bf00      	nop
 80013fa:	3730      	adds	r7, #48	; 0x30
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40010000 	.word	0x40010000
 8001404:	40023800 	.word	0x40023800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40000800 	.word	0x40000800

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	; 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a97      	ldr	r2, [pc, #604]	; (8001690 <HAL_UART_MspInit+0x27c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	f040 8092 	bne.w	800155c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	4b95      	ldr	r3, [pc, #596]	; (8001694 <HAL_UART_MspInit+0x280>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	4a94      	ldr	r2, [pc, #592]	; (8001694 <HAL_UART_MspInit+0x280>)
 8001442:	f043 0310 	orr.w	r3, r3, #16
 8001446:	6453      	str	r3, [r2, #68]	; 0x44
 8001448:	4b92      	ldr	r3, [pc, #584]	; (8001694 <HAL_UART_MspInit+0x280>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	61bb      	str	r3, [r7, #24]
 8001452:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	4b8e      	ldr	r3, [pc, #568]	; (8001694 <HAL_UART_MspInit+0x280>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a8d      	ldr	r2, [pc, #564]	; (8001694 <HAL_UART_MspInit+0x280>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b8b      	ldr	r3, [pc, #556]	; (8001694 <HAL_UART_MspInit+0x280>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001470:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001482:	2307      	movs	r3, #7
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4882      	ldr	r0, [pc, #520]	; (8001698 <HAL_UART_MspInit+0x284>)
 800148e:	f000 ff7f 	bl	8002390 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001492:	4b82      	ldr	r3, [pc, #520]	; (800169c <HAL_UART_MspInit+0x288>)
 8001494:	4a82      	ldr	r2, [pc, #520]	; (80016a0 <HAL_UART_MspInit+0x28c>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001498:	4b80      	ldr	r3, [pc, #512]	; (800169c <HAL_UART_MspInit+0x288>)
 800149a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a0:	4b7e      	ldr	r3, [pc, #504]	; (800169c <HAL_UART_MspInit+0x288>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_UART_MspInit+0x288>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b7b      	ldr	r3, [pc, #492]	; (800169c <HAL_UART_MspInit+0x288>)
 80014ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b4:	4b79      	ldr	r3, [pc, #484]	; (800169c <HAL_UART_MspInit+0x288>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ba:	4b78      	ldr	r3, [pc, #480]	; (800169c <HAL_UART_MspInit+0x288>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014c0:	4b76      	ldr	r3, [pc, #472]	; (800169c <HAL_UART_MspInit+0x288>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b75      	ldr	r3, [pc, #468]	; (800169c <HAL_UART_MspInit+0x288>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b73      	ldr	r3, [pc, #460]	; (800169c <HAL_UART_MspInit+0x288>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014d2:	4872      	ldr	r0, [pc, #456]	; (800169c <HAL_UART_MspInit+0x288>)
 80014d4:	f000 fb5a 	bl	8001b8c <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80014de:	f7ff fe5d 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a6d      	ldr	r2, [pc, #436]	; (800169c <HAL_UART_MspInit+0x288>)
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
 80014e8:	4a6c      	ldr	r2, [pc, #432]	; (800169c <HAL_UART_MspInit+0x288>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80014ee:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <HAL_UART_MspInit+0x290>)
 80014f0:	4a6d      	ldr	r2, [pc, #436]	; (80016a8 <HAL_UART_MspInit+0x294>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80014f4:	4b6b      	ldr	r3, [pc, #428]	; (80016a4 <HAL_UART_MspInit+0x290>)
 80014f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014fc:	4b69      	ldr	r3, [pc, #420]	; (80016a4 <HAL_UART_MspInit+0x290>)
 80014fe:	2240      	movs	r2, #64	; 0x40
 8001500:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001502:	4b68      	ldr	r3, [pc, #416]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	4b66      	ldr	r3, [pc, #408]	; (80016a4 <HAL_UART_MspInit+0x290>)
 800150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800151c:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <HAL_UART_MspInit+0x290>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001528:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <HAL_UART_MspInit+0x290>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800152e:	485d      	ldr	r0, [pc, #372]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001530:	f000 fb2c 	bl	8001b8c <HAL_DMA_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800153a:	f7ff fe2f 	bl	800119c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001542:	635a      	str	r2, [r3, #52]	; 0x34
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_UART_MspInit+0x290>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2025      	movs	r0, #37	; 0x25
 8001550:	f000 fae5 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001554:	2025      	movs	r0, #37	; 0x25
 8001556:	f000 fafe 	bl	8001b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800155a:	e095      	b.n	8001688 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_UART_MspInit+0x298>)
 8001562:	4293      	cmp	r3, r2
 8001564:	f040 8090 	bne.w	8001688 <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	4b49      	ldr	r3, [pc, #292]	; (8001694 <HAL_UART_MspInit+0x280>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a48      	ldr	r2, [pc, #288]	; (8001694 <HAL_UART_MspInit+0x280>)
 8001572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b46      	ldr	r3, [pc, #280]	; (8001694 <HAL_UART_MspInit+0x280>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b42      	ldr	r3, [pc, #264]	; (8001694 <HAL_UART_MspInit+0x280>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a41      	ldr	r2, [pc, #260]	; (8001694 <HAL_UART_MspInit+0x280>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <HAL_UART_MspInit+0x280>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015a0:	230c      	movs	r3, #12
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b0:	2307      	movs	r3, #7
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4837      	ldr	r0, [pc, #220]	; (8001698 <HAL_UART_MspInit+0x284>)
 80015bc:	f000 fee8 	bl	8002390 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015c0:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015c2:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <HAL_UART_MspInit+0x2a0>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015c6:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001600:	482b      	ldr	r0, [pc, #172]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 8001602:	f000 fac3 	bl	8001b8c <HAL_DMA_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800160c:	f7ff fdc6 	bl	800119c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
 8001616:	4a26      	ldr	r2, [pc, #152]	; (80016b0 <HAL_UART_MspInit+0x29c>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_UART_MspInit+0x2a8>)
 8001620:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001624:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001628:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001644:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001658:	2200      	movs	r2, #0
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800165c:	4816      	ldr	r0, [pc, #88]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 800165e:	f000 fa95 	bl	8001b8c <HAL_DMA_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <HAL_UART_MspInit+0x258>
      Error_Handler();
 8001668:	f7ff fd98 	bl	800119c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
 8001672:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_UART_MspInit+0x2a4>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2026      	movs	r0, #38	; 0x26
 800167e:	f000 fa4e 	bl	8001b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001682:	2026      	movs	r0, #38	; 0x26
 8001684:	f000 fa67 	bl	8001b56 <HAL_NVIC_EnableIRQ>
}
 8001688:	bf00      	nop
 800168a:	3730      	adds	r7, #48	; 0x30
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40011000 	.word	0x40011000
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000
 800169c:	20000220 	.word	0x20000220
 80016a0:	40026440 	.word	0x40026440
 80016a4:	20000280 	.word	0x20000280
 80016a8:	400264b8 	.word	0x400264b8
 80016ac:	40004400 	.word	0x40004400
 80016b0:	200002e0 	.word	0x200002e0
 80016b4:	40026088 	.word	0x40026088
 80016b8:	20000340 	.word	0x20000340
 80016bc:	400260a0 	.word	0x400260a0

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <NMI_Handler+0x4>

080016c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <HardFault_Handler+0x4>

080016cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <MemManage_Handler+0x4>

080016d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <UsageFault_Handler+0x4>

080016de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170c:	f000 f90c 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA1_Stream5_IRQHandler+0x10>)
 800171a:	f000 fbcf 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002e0 	.word	0x200002e0

08001728 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA1_Stream6_IRQHandler+0x10>)
 800172e:	f000 fbc5 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000340 	.word	0x20000340

0800173c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <TIM3_IRQHandler+0x10>)
 8001742:	f001 fe05 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000108 	.word	0x20000108

08001750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <USART1_IRQHandler+0x10>)
 8001756:	f002 fd99 	bl	800428c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000198 	.word	0x20000198

08001764 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <USART2_IRQHandler+0x10>)
 800176a:	f002 fd8f 	bl	800428c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200001dc 	.word	0x200001dc

08001778 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA2_Stream2_IRQHandler+0x10>)
 800177e:	f000 fb9d 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000220 	.word	0x20000220

0800178c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <DMA2_Stream7_IRQHandler+0x10>)
 8001792:	f000 fb93 	bl	8001ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000280 	.word	0x20000280

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f003 ff04 	bl	80055dc <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20010000 	.word	0x20010000
 8001800:	00000400 	.word	0x00000400
 8001804:	200003c8 	.word	0x200003c8
 8001808:	20000518 	.word	0x20000518

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001836:	490e      	ldr	r1, [pc, #56]	; (8001870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800184c:	4c0b      	ldr	r4, [pc, #44]	; (800187c <LoopFillZerobss+0x26>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185a:	f7ff ffd7 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 fec3 	bl	80055e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001862:	f7fe ffcf 	bl	8000804 <main>
  bx  lr    
 8001866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001868:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001874:	08006054 	.word	0x08006054
  ldr r2, =_sbss
 8001878:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800187c:	20000518 	.word	0x20000518

08001880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_Init+0x40>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_Init+0x40>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x40>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 f92b 	bl	8001b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fc76 	bl	80011a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f943 	bl	8001b72 <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f000 f90b 	bl	8001b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000000 	.word	0x20000000
 8001920:	20000008 	.word	0x20000008
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	200003cc 	.word	0x200003cc

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200003cc 	.word	0x200003cc

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <__NVIC_EnableIRQ+0x38>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	db0a      	blt.n	8001a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	490c      	ldr	r1, [pc, #48]	; (8001a54 <__NVIC_SetPriority+0x4c>)
 8001a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a26:	0112      	lsls	r2, r2, #4
 8001a28:	b2d2      	uxtb	r2, r2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a30:	e00a      	b.n	8001a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4908      	ldr	r1, [pc, #32]	; (8001a58 <__NVIC_SetPriority+0x50>)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	3b04      	subs	r3, #4
 8001a40:	0112      	lsls	r2, r2, #4
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	440b      	add	r3, r1
 8001a46:	761a      	strb	r2, [r3, #24]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000e100 	.word	0xe000e100
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f1c3 0307 	rsb	r3, r3, #7
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	bf28      	it	cs
 8001a7a:	2304      	movcs	r3, #4
 8001a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3304      	adds	r3, #4
 8001a82:	2b06      	cmp	r3, #6
 8001a84:	d902      	bls.n	8001a8c <NVIC_EncodePriority+0x30>
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3b03      	subs	r3, #3
 8001a8a:	e000      	b.n	8001a8e <NVIC_EncodePriority+0x32>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	43d9      	mvns	r1, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	4313      	orrs	r3, r2
         );
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3724      	adds	r7, #36	; 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad4:	d301      	bcc.n	8001ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e00f      	b.n	8001afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <SysTick_Config+0x40>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f7ff ff8e 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <SysTick_Config+0x40>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001af2:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <SysTick_Config+0x40>)
 8001af4:	2207      	movs	r2, #7
 8001af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	e000e010 	.word	0xe000e010

08001b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ff29 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	4603      	mov	r3, r0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b30:	f7ff ff3e 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	6978      	ldr	r0, [r7, #20]
 8001b3c:	f7ff ff8e 	bl	8001a5c <NVIC_EncodePriority>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	bf00      	nop
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff31 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffa2 	bl	8001ac4 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff feda 	bl	8001950 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e099      	b.n	8001cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc8:	e00f      	b.n	8001bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bca:	f7ff fec1 	bl	8001950 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d908      	bls.n	8001bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2203      	movs	r2, #3
 8001be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e078      	b.n	8001cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e8      	bne.n	8001bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <HAL_DMA_Init+0x158>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d107      	bne.n	8001c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0307 	bic.w	r3, r3, #7
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d117      	bne.n	8001cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00e      	beq.n	8001cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fb01 	bl	8002298 <DMA_CheckFifoParam>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2240      	movs	r2, #64	; 0x40
 8001ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001caa:	2301      	movs	r3, #1
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 fab8 	bl	800222c <DMA_CalcBaseAndBitshift>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	f010803f 	.word	0xf010803f

08001ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_DMA_Start_IT+0x26>
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	e040      	b.n	8001d90 <HAL_DMA_Start_IT+0xa8>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d12f      	bne.n	8001d82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2202      	movs	r2, #2
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fa4a 	bl	80021d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	223f      	movs	r2, #63	; 0x3f
 8001d42:	409a      	lsls	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0216 	orr.w	r2, r2, #22
 8001d56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	e005      	b.n	8001d8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da6:	f7ff fdd3 	bl	8001950 <HAL_GetTick>
 8001daa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d008      	beq.n	8001dca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2280      	movs	r2, #128	; 0x80
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e052      	b.n	8001e70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0216 	bic.w	r2, r2, #22
 8001dd8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_DMA_Abort+0x62>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d007      	beq.n	8001e0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0208 	bic.w	r2, r2, #8
 8001e08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1a:	e013      	b.n	8001e44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1c:	f7ff fd98 	bl	8001950 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d90c      	bls.n	8001e44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2203      	movs	r2, #3
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e015      	b.n	8001e70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1e4      	bne.n	8001e1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	223f      	movs	r2, #63	; 0x3f
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d004      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00c      	b.n	8001eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec8:	4b8e      	ldr	r3, [pc, #568]	; (8002104 <HAL_DMA_IRQHandler+0x248>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8e      	ldr	r2, [pc, #568]	; (8002108 <HAL_DMA_IRQHandler+0x24c>)
 8001ece:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed2:	0a9b      	lsrs	r3, r3, #10
 8001ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01a      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2208      	movs	r2, #8
 8001f16:	409a      	lsls	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d012      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2204      	movs	r2, #4
 8001f64:	409a      	lsls	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d012      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2204      	movs	r2, #4
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2210      	movs	r2, #16
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d043      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d03c      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2210      	movs	r2, #16
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d018      	beq.n	8001ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d108      	bne.n	8001fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d024      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	4798      	blx	r3
 8001fea:	e01f      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
 8001ffc:	e016      	b.n	800202c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d107      	bne.n	800201c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0208 	bic.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002030:	2220      	movs	r2, #32
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 808f 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8087 	beq.w	800215c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	2220      	movs	r2, #32
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b05      	cmp	r3, #5
 8002064:	d136      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0216 	bic.w	r2, r2, #22
 8002074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695a      	ldr	r2, [r3, #20]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_DMA_IRQHandler+0x1da>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0208 	bic.w	r2, r2, #8
 80020a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020aa:	223f      	movs	r2, #63	; 0x3f
 80020ac:	409a      	lsls	r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d07e      	beq.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	4798      	blx	r3
        }
        return;
 80020d2:	e079      	b.n	80021c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d01d      	beq.n	800211e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d031      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e02c      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
 8002102:	bf00      	nop
 8002104:	20000000 	.word	0x20000000
 8002108:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	2b00      	cmp	r3, #0
 8002112:	d023      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e01e      	b.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10f      	bne.n	800214c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0210 	bic.w	r2, r2, #16
 800213a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d032      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d022      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2205      	movs	r2, #5
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	d307      	bcc.n	80021a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f2      	bne.n	8002188 <HAL_DMA_IRQHandler+0x2cc>
 80021a2:	e000      	b.n	80021a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
 80021c6:	e000      	b.n	80021ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c8:	bf00      	nop
    }
  }
}
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b40      	cmp	r3, #64	; 0x40
 80021fc:	d108      	bne.n	8002210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800220e:	e007      	b.n	8002220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	60da      	str	r2, [r3, #12]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	3b10      	subs	r3, #16
 800223c:	4a14      	ldr	r2, [pc, #80]	; (8002290 <DMA_CalcBaseAndBitshift+0x64>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <DMA_CalcBaseAndBitshift+0x68>)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d909      	bls.n	800226e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	1d1a      	adds	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	659a      	str	r2, [r3, #88]	; 0x58
 800226c:	e007      	b.n	800227e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002276:	f023 0303 	bic.w	r3, r3, #3
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	aaaaaaab 	.word	0xaaaaaaab
 8002294:	08005f08 	.word	0x08005f08

08002298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d11f      	bne.n	80022f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d856      	bhi.n	8002366 <DMA_CheckFifoParam+0xce>
 80022b8:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <DMA_CheckFifoParam+0x28>)
 80022ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022be:	bf00      	nop
 80022c0:	080022d1 	.word	0x080022d1
 80022c4:	080022e3 	.word	0x080022e3
 80022c8:	080022d1 	.word	0x080022d1
 80022cc:	08002367 	.word	0x08002367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d046      	beq.n	800236a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e0:	e043      	b.n	800236a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ea:	d140      	bne.n	800236e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f0:	e03d      	b.n	800236e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fa:	d121      	bne.n	8002340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d837      	bhi.n	8002372 <DMA_CheckFifoParam+0xda>
 8002302:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <DMA_CheckFifoParam+0x70>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	08002319 	.word	0x08002319
 800230c:	0800231f 	.word	0x0800231f
 8002310:	08002319 	.word	0x08002319
 8002314:	08002331 	.word	0x08002331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
      break;
 800231c:	e030      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d025      	beq.n	8002376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800232e:	e022      	b.n	8002376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002338:	d11f      	bne.n	800237a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800233e:	e01c      	b.n	800237a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d903      	bls.n	800234e <DMA_CheckFifoParam+0xb6>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d003      	beq.n	8002354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800234c:	e018      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
      break;
 8002352:	e015      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00e      	beq.n	800237e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
      break;
 8002364:	e00b      	b.n	800237e <DMA_CheckFifoParam+0xe6>
      break;
 8002366:	bf00      	nop
 8002368:	e00a      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800236a:	bf00      	nop
 800236c:	e008      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e006      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 8002372:	bf00      	nop
 8002374:	e004      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e002      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;   
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
    }
  } 
  
  return status; 
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800239e:	2300      	movs	r3, #0
 80023a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	e159      	b.n	8002660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	f040 8148 	bne.w	800265a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d005      	beq.n	80023e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d130      	bne.n	8002444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	69b9      	ldr	r1, [r7, #24]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80a2 	beq.w	800265a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	60fb      	str	r3, [r7, #12]
 800251a:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 8002520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b54      	ldr	r3, [pc, #336]	; (8002678 <HAL_GPIO_Init+0x2e8>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002532:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x2ec>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a49      	ldr	r2, [pc, #292]	; (8002680 <HAL_GPIO_Init+0x2f0>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x202>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_GPIO_Init+0x2f4>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x1fe>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_GPIO_Init+0x2f8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x1fa>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a46      	ldr	r2, [pc, #280]	; (800268c <HAL_GPIO_Init+0x2fc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x1f6>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a45      	ldr	r2, [pc, #276]	; (8002690 <HAL_GPIO_Init+0x300>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x1f2>
 800257e:	2304      	movs	r3, #4
 8002580:	e008      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002582:	2307      	movs	r3, #7
 8002584:	e006      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002586:	2303      	movs	r3, #3
 8002588:	e004      	b.n	8002594 <HAL_GPIO_Init+0x204>
 800258a:	2302      	movs	r3, #2
 800258c:	e002      	b.n	8002594 <HAL_GPIO_Init+0x204>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_GPIO_Init+0x204>
 8002592:	2300      	movs	r3, #0
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f002 0203 	and.w	r2, r2, #3
 800259a:	0092      	lsls	r2, r2, #2
 800259c:	4093      	lsls	r3, r2
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025a4:	4935      	ldr	r1, [pc, #212]	; (800267c <HAL_GPIO_Init+0x2ec>)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	3302      	adds	r3, #2
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d6:	4a2f      	ldr	r2, [pc, #188]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_GPIO_Init+0x304>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262a:	4a1a      	ldr	r2, [pc, #104]	; (8002694 <HAL_GPIO_Init+0x304>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002654:	4a0f      	ldr	r2, [pc, #60]	; (8002694 <HAL_GPIO_Init+0x304>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3301      	adds	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	2b0f      	cmp	r3, #15
 8002664:	f67f aea2 	bls.w	80023ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	40013800 	.word	0x40013800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020400 	.word	0x40020400
 8002688:	40020800 	.word	0x40020800
 800268c:	40020c00 	.word	0x40020c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40013c00 	.word	0x40013c00

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
 80026a4:	4613      	mov	r3, r2
 80026a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a8:	787b      	ldrb	r3, [r7, #1]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ae:	887a      	ldrh	r2, [r7, #2]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026b4:	e003      	b.n	80026be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	041a      	lsls	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	619a      	str	r2, [r3, #24]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e267      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d075      	beq.n	80027d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ea:	4b88      	ldr	r3, [pc, #544]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d00c      	beq.n	8002710 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d112      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002702:	4b82      	ldr	r3, [pc, #520]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800270e:	d10b      	bne.n	8002728 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002710:	4b7e      	ldr	r3, [pc, #504]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d05b      	beq.n	80027d4 <HAL_RCC_OscConfig+0x108>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d157      	bne.n	80027d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e242      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002730:	d106      	bne.n	8002740 <HAL_RCC_OscConfig+0x74>
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	e01d      	b.n	800277c <HAL_RCC_OscConfig+0xb0>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002748:	d10c      	bne.n	8002764 <HAL_RCC_OscConfig+0x98>
 800274a:	4b70      	ldr	r3, [pc, #448]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6f      	ldr	r2, [pc, #444]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6c      	ldr	r2, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800275c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	e00b      	b.n	800277c <HAL_RCC_OscConfig+0xb0>
 8002764:	4b69      	ldr	r3, [pc, #420]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a68      	ldr	r2, [pc, #416]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800276a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b66      	ldr	r3, [pc, #408]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a65      	ldr	r2, [pc, #404]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800277a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d013      	beq.n	80027ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7ff f8e4 	bl	8001950 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800278c:	f7ff f8e0 	bl	8001950 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e207      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b5b      	ldr	r3, [pc, #364]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0xc0>
 80027aa:	e014      	b.n	80027d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff f8d0 	bl	8001950 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027b4:	f7ff f8cc 	bl	8001950 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b64      	cmp	r3, #100	; 0x64
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1f3      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027c6:	4b51      	ldr	r3, [pc, #324]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0xe8>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d063      	beq.n	80028aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027e2:	4b4a      	ldr	r3, [pc, #296]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b44      	ldr	r3, [pc, #272]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b41      	ldr	r3, [pc, #260]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x152>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1c7      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b3b      	ldr	r3, [pc, #236]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4937      	ldr	r1, [pc, #220]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e03a      	b.n	80028aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b34      	ldr	r3, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x244>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7ff f885 	bl	8001950 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7ff f881 	bl	8001950 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1a8      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b2b      	ldr	r3, [pc, #172]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b28      	ldr	r3, [pc, #160]	; (800290c <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4925      	ldr	r1, [pc, #148]	; (800290c <HAL_RCC_OscConfig+0x240>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x244>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7ff f864 	bl	8001950 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7ff f860 	bl	8001950 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e187      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d036      	beq.n	8002924 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <HAL_RCC_OscConfig+0x248>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7ff f844 	bl	8001950 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff f840 	bl	8001950 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e167      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_RCC_OscConfig+0x240>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x200>
 80028ea:	e01b      	b.n	8002924 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x248>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f2:	f7ff f82d 	bl	8001950 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00e      	b.n	8002918 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fa:	f7ff f829 	bl	8001950 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e150      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
 800290c:	40023800 	.word	0x40023800
 8002910:	42470000 	.word	0x42470000
 8002914:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ea      	bne.n	80028fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b81      	ldr	r3, [pc, #516]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b7d      	ldr	r3, [pc, #500]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a7c      	ldr	r2, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b7a      	ldr	r3, [pc, #488]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b74      	ldr	r3, [pc, #464]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a73      	ldr	r2, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7fe ffe9 	bl	8001950 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe ffe5 	bl	8001950 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e10c      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b6a      	ldr	r3, [pc, #424]	; (8002b40 <HAL_RCC_OscConfig+0x474>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2ea>
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e01c      	b.n	80029f0 <HAL_RCC_OscConfig+0x324>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x30c>
 80029be:	4b5f      	ldr	r3, [pc, #380]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a5e      	ldr	r2, [pc, #376]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b5c      	ldr	r3, [pc, #368]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a5b      	ldr	r2, [pc, #364]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0x324>
 80029d8:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029dc:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	; 0x70
 80029e4:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a54      	ldr	r2, [pc, #336]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe ffaa 	bl	8001950 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe ffa6 	bl	8001950 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0cb      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	4b49      	ldr	r3, [pc, #292]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ee      	beq.n	8002a00 <HAL_RCC_OscConfig+0x334>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a24:	f7fe ff94 	bl	8001950 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fe ff90 	bl	8001950 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0b5      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	4a38      	ldr	r2, [pc, #224]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80a1 	beq.w	8002bac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d05c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d141      	bne.n	8002b02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_OscConfig+0x478>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe ff64 	bl	8001950 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe ff60 	bl	8001950 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e087      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	491b      	ldr	r1, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_OscConfig+0x478>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ada:	f7fe ff39 	bl	8001950 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe ff35 	bl	8001950 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e05c      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x416>
 8002b00:	e054      	b.n	8002bac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b02:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <HAL_RCC_OscConfig+0x478>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe ff22 	bl	8001950 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe ff1e 	bl	8001950 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e045      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x470>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x444>
 8002b2e:	e03d      	b.n	8002bac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e038      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000
 8002b44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x4ec>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d028      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d121      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d11a      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b78:	4013      	ands	r3, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d111      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	085b      	lsrs	r3, r3, #1
 8002b90:	3b01      	subs	r3, #1
 8002b92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0cc      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b68      	ldr	r3, [pc, #416]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d90c      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b63      	ldr	r3, [pc, #396]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b8      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c10:	4b59      	ldr	r3, [pc, #356]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a58      	ldr	r2, [pc, #352]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c28:	4b53      	ldr	r3, [pc, #332]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a52      	ldr	r2, [pc, #328]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4b50      	ldr	r3, [pc, #320]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	494d      	ldr	r1, [pc, #308]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d044      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5a:	4b47      	ldr	r3, [pc, #284]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e07f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3b      	ldr	r3, [pc, #236]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e067      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4934      	ldr	r1, [pc, #208]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cac:	f7fe fe50 	bl	8001950 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fe4c 	bl	8001950 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04f      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d20c      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e032      	b.n	8002d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4916      	ldr	r1, [pc, #88]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d009      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d2e:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	490e      	ldr	r1, [pc, #56]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d42:	f000 f821 	bl	8002d88 <HAL_RCC_GetSysClockFreq>
 8002d46:	4602      	mov	r2, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	490a      	ldr	r1, [pc, #40]	; (8002d7c <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_ClockConfig+0x1c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe fdb0 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40023c00 	.word	0x40023c00
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08005ef0 	.word	0x08005ef0
 8002d80:	20000000 	.word	0x20000000
 8002d84:	20000004 	.word	0x20000004

08002d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b090      	sub	sp, #64	; 0x40
 8002d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
 8002d94:	2300      	movs	r3, #0
 8002d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d98:	2300      	movs	r3, #0
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 030c 	and.w	r3, r3, #12
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d00d      	beq.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	f200 80a1 	bhi.w	8002ef4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0x34>
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dba:	e09b      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002dc0:	e09b      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dc2:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dc6:	e098      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d028      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dde:	4b4a      	ldr	r3, [pc, #296]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	099b      	lsrs	r3, r3, #6
 8002de4:	2200      	movs	r2, #0
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	627a      	str	r2, [r7, #36]	; 0x24
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002df0:	2100      	movs	r1, #0
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002df4:	fb03 f201 	mul.w	r2, r3, r1
 8002df8:	2300      	movs	r3, #0
 8002dfa:	fb00 f303 	mul.w	r3, r0, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a43      	ldr	r2, [pc, #268]	; (8002f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002e02:	fba0 1202 	umull	r1, r2, r0, r2
 8002e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e08:	460a      	mov	r2, r1
 8002e0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e0e:	4413      	add	r3, r2
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	2200      	movs	r2, #0
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	61fa      	str	r2, [r7, #28]
 8002e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002e22:	f7fd fa2d 	bl	8000280 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2e:	e053      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	2200      	movs	r2, #0
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	617a      	str	r2, [r7, #20]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002e42:	f04f 0b00 	mov.w	fp, #0
 8002e46:	4652      	mov	r2, sl
 8002e48:	465b      	mov	r3, fp
 8002e4a:	f04f 0000 	mov.w	r0, #0
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	0159      	lsls	r1, r3, #5
 8002e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e58:	0150      	lsls	r0, r2, #5
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	ebb2 080a 	subs.w	r8, r2, sl
 8002e62:	eb63 090b 	sbc.w	r9, r3, fp
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e7a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e7e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	00eb      	lsls	r3, r5, #3
 8002e8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e90:	00e2      	lsls	r2, r4, #3
 8002e92:	4614      	mov	r4, r2
 8002e94:	461d      	mov	r5, r3
 8002e96:	eb14 030a 	adds.w	r3, r4, sl
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	eb45 030b 	adc.w	r3, r5, fp
 8002ea0:	607b      	str	r3, [r7, #4]
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eae:	4629      	mov	r1, r5
 8002eb0:	028b      	lsls	r3, r1, #10
 8002eb2:	4621      	mov	r1, r4
 8002eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eb8:	4621      	mov	r1, r4
 8002eba:	028a      	lsls	r2, r1, #10
 8002ebc:	4610      	mov	r0, r2
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	60fa      	str	r2, [r7, #12]
 8002ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ecc:	f7fd f9d8 	bl	8000280 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	0c1b      	lsrs	r3, r3, #16
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3740      	adds	r7, #64	; 0x40
 8002f00:	46bd      	mov	sp, r7
 8002f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f06:	bf00      	nop
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	00f42400 	.word	0x00f42400
 8002f10:	017d7840 	.word	0x017d7840

08002f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000000 	.word	0x20000000

08002f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f30:	f7ff fff0 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f34:	4602      	mov	r2, r0
 8002f36:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	0a9b      	lsrs	r3, r3, #10
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	4903      	ldr	r1, [pc, #12]	; (8002f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f42:	5ccb      	ldrb	r3, [r1, r3]
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	08005f00 	.word	0x08005f00

08002f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f58:	f7ff ffdc 	bl	8002f14 <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	0b5b      	lsrs	r3, r3, #13
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08005f00 	.word	0x08005f00

08002f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e041      	b.n	8003012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fe f928 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2202      	movs	r2, #2
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f000 fc82 	bl	80038c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d001      	beq.n	8003034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e044      	b.n	80030be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305e:	d013      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x6c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d010      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e007      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	40014000 	.word	0x40014000

080030e0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a1a      	ldr	r2, [r3, #32]
 80030fe:	f241 1311 	movw	r3, #4369	; 0x1111
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10f      	bne.n	8003128 <HAL_TIM_Base_Stop_IT+0x48>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	f240 4344 	movw	r3, #1092	; 0x444
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_TIM_Base_Stop_IT+0x48>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e041      	b.n	80031d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f839 	bl	80031dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f000 fba1 	bl	80038c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_TIM_PWM_Start+0x24>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e022      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d109      	bne.n	800322e <HAL_TIM_PWM_Start+0x3e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e015      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d109      	bne.n	8003248 <HAL_TIM_PWM_Start+0x58>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e008      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e068      	b.n	8003334 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0x82>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	e013      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x92>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003280:	e00b      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xa2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	e003      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fdb4 	bl	8003e10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_TIM_PWM_Start+0x14c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_TIM_PWM_Start+0x14c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d013      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_TIM_PWM_Start+0x150>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIM_PWM_Start+0x154>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_TIM_PWM_Start+0x158>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIM_PWM_Start+0x15c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d010      	beq.n	8003332 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	e007      	b.n	8003332 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40014000 	.word	0x40014000

08003350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0202 	mvn.w	r2, #2
 800337c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fa77 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa69 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fa7a 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0204 	mvn.w	r2, #4
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa4d 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa3f 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fa50 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa23 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fa15 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fa26 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9f9 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f9eb 	bl	8003872 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f9fc 	bl	800389a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0201 	mvn.w	r2, #1
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd f854 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fd78 	bl	8003ff0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9c1 	bl	80038ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0220 	mvn.w	r2, #32
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fd42 	bl	8003fdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800357a:	2302      	movs	r3, #2
 800357c:	e0ae      	b.n	80036dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	f200 809f 	bhi.w	80036cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800358e:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080036cd 	.word	0x080036cd
 800359c:	080036cd 	.word	0x080036cd
 80035a0:	080036cd 	.word	0x080036cd
 80035a4:	08003609 	.word	0x08003609
 80035a8:	080036cd 	.word	0x080036cd
 80035ac:	080036cd 	.word	0x080036cd
 80035b0:	080036cd 	.word	0x080036cd
 80035b4:	0800364b 	.word	0x0800364b
 80035b8:	080036cd 	.word	0x080036cd
 80035bc:	080036cd 	.word	0x080036cd
 80035c0:	080036cd 	.word	0x080036cd
 80035c4:	0800368b 	.word	0x0800368b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f9f8 	bl	80039c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0208 	orr.w	r2, r2, #8
 80035e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699a      	ldr	r2, [r3, #24]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0204 	bic.w	r2, r2, #4
 80035f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6999      	ldr	r1, [r3, #24]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	619a      	str	r2, [r3, #24]
      break;
 8003606:	e064      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa3e 	bl	8003a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699a      	ldr	r2, [r3, #24]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699a      	ldr	r2, [r3, #24]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6999      	ldr	r1, [r3, #24]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	619a      	str	r2, [r3, #24]
      break;
 8003648:	e043      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fa89 	bl	8003b68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0208 	orr.w	r2, r2, #8
 8003664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0204 	bic.w	r2, r2, #4
 8003674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	61da      	str	r2, [r3, #28]
      break;
 8003688:	e023      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fad3 	bl	8003c3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	61da      	str	r2, [r3, #28]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	75fb      	strb	r3, [r7, #23]
      break;
 80036d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036da:	7dfb      	ldrb	r3, [r7, #23]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIM_ConfigClockSource+0x1c>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0b4      	b.n	800386a <HAL_TIM_ConfigClockSource+0x186>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800371e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d03e      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0xd4>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	f200 8087 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	f000 8086 	beq.w	8003856 <HAL_TIM_ConfigClockSource+0x172>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d87f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d01a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xa6>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d87b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d050      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x11a>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d877      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d03c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0xfa>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d873      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d058      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x13a>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d86f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d064      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d86b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d060      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d867      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d05a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x15a>
 8003788:	e062      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f000 fb19 	bl	8003dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04f      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f000 fb02 	bl	8003dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e03c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fa76 	bl	8003cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 facf 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 80037fc:	e02c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fa95 	bl	8003d3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	; 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fabf 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 800381c:	e01c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 fa56 	bl	8003cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 faaf 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 800383c:	e00c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 faa6 	bl	8003d9a <TIM_ITRx_SetConfig>
      break;
 800384e:	e003      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e000      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <TIM_Base_SetConfig+0xe4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d00f      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d00b      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a31      	ldr	r2, [pc, #196]	; (80039ac <TIM_Base_SetConfig+0xe8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d007      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <TIM_Base_SetConfig+0xec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d003      	beq.n	80038fc <TIM_Base_SetConfig+0x38>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a2f      	ldr	r2, [pc, #188]	; (80039b4 <TIM_Base_SetConfig+0xf0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <TIM_Base_SetConfig+0xe4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01b      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391c:	d017      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a22      	ldr	r2, [pc, #136]	; (80039ac <TIM_Base_SetConfig+0xe8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d013      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <TIM_Base_SetConfig+0xec>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <TIM_Base_SetConfig+0xf0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1f      	ldr	r2, [pc, #124]	; (80039b8 <TIM_Base_SetConfig+0xf4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <TIM_Base_SetConfig+0xf8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_Base_SetConfig+0x8a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <TIM_Base_SetConfig+0xfc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d108      	bne.n	8003960 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4313      	orrs	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <TIM_Base_SetConfig+0xe4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d103      	bne.n	8003994 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	615a      	str	r2, [r3, #20]
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800

080039c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f023 0201 	bic.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f023 0302 	bic.w	r3, r3, #2
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <TIM_OC1_SetConfig+0xc8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10c      	bne.n	8003a3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f023 0308 	bic.w	r3, r3, #8
 8003a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <TIM_OC1_SetConfig+0xc8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d111      	bne.n	8003a66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	621a      	str	r2, [r3, #32]
}
 8003a80:	bf00      	nop
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40010000 	.word	0x40010000

08003a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	f023 0210 	bic.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f023 0320 	bic.w	r3, r3, #32
 8003ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <TIM_OC2_SetConfig+0xd4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10d      	bne.n	8003b0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <TIM_OC2_SetConfig+0xd4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d113      	bne.n	8003b3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000

08003b68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <TIM_OC3_SetConfig+0xd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d10d      	bne.n	8003be2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <TIM_OC3_SetConfig+0xd0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d113      	bne.n	8003c12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	621a      	str	r2, [r3, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40010000 	.word	0x40010000

08003c3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	031b      	lsls	r3, r3, #12
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <TIM_OC4_SetConfig+0x9c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d109      	bne.n	8003cb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	019b      	lsls	r3, r3, #6
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40010000 	.word	0x40010000

08003cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f023 030a 	bic.w	r3, r3, #10
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b087      	sub	sp, #28
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f023 0210 	bic.w	r2, r3, #16
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	031b      	lsls	r3, r3, #12
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b085      	sub	sp, #20
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
 8003da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f043 0307 	orr.w	r3, r3, #7
 8003dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	021a      	lsls	r2, r3, #8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	609a      	str	r2, [r3, #8]
}
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	2201      	movs	r2, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1a      	ldr	r2, [r3, #32]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	43db      	mvns	r3, r3
 8003e32:	401a      	ands	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	621a      	str	r2, [r3, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
	...

08003e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e050      	b.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d018      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d013      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00e      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d009      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a15      	ldr	r2, [pc, #84]	; (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d004      	beq.n	8003eea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10c      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40014000 	.word	0x40014000

08003f38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e03d      	b.n	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e03f      	b.n	8004096 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd f9f2 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2224      	movs	r2, #36	; 0x24
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004046:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 ff9b 	bl	8004f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800405c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800406c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b08a      	sub	sp, #40	; 0x28
 80040a2:	af02      	add	r7, sp, #8
 80040a4:	60f8      	str	r0, [r7, #12]
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d17c      	bne.n	80041b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <HAL_UART_Transmit+0x2c>
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e075      	b.n	80041ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_UART_Transmit+0x3e>
 80040d8:	2302      	movs	r3, #2
 80040da:	e06e      	b.n	80041ba <HAL_UART_Transmit+0x11c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2221      	movs	r2, #33	; 0x21
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040f2:	f7fd fc2d 	bl	8001950 <HAL_GetTick>
 80040f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410c:	d108      	bne.n	8004120 <HAL_UART_Transmit+0x82>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	e003      	b.n	8004128 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004130:	e02a      	b.n	8004188 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fc53 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e036      	b.n	80041ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	3302      	adds	r3, #2
 8004166:	61bb      	str	r3, [r7, #24]
 8004168:	e007      	b.n	800417a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	3301      	adds	r3, #1
 8004178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1cf      	bne.n	8004132 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	2140      	movs	r1, #64	; 0x40
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 fc23 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d001      	beq.n	80041ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e006      	b.n	80041ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	e000      	b.n	80041ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041b8:	2302      	movs	r3, #2
  }
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08c      	sub	sp, #48	; 0x30
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	4613      	mov	r3, r2
 80041ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d152      	bne.n	8004282 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04b      	b.n	8004284 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e044      	b.n	8004284 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004208:	88fb      	ldrh	r3, [r7, #6]
 800420a:	461a      	mov	r2, r3
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 fc58 	bl	8004ac4 <UART_Start_Receive_DMA>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800421a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800421e:	2b00      	cmp	r3, #0
 8004220:	d12c      	bne.n	800427c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	2b01      	cmp	r3, #1
 8004228:	d125      	bne.n	8004276 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	e853 3f00 	ldrex	r3, [r3]
 800424e:	617b      	str	r3, [r7, #20]
   return(result);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f043 0310 	orr.w	r3, r3, #16
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004260:	627a      	str	r2, [r7, #36]	; 0x24
 8004262:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004264:	6a39      	ldr	r1, [r7, #32]
 8004266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004268:	e841 2300 	strex	r3, r2, [r1]
 800426c:	61fb      	str	r3, [r7, #28]
   return(result);
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1e5      	bne.n	8004240 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004274:	e002      	b.n	800427c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800427c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004280:	e000      	b.n	8004284 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	4618      	mov	r0, r3
 8004286:	3730      	adds	r7, #48	; 0x30
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b0ba      	sub	sp, #232	; 0xe8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80042ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_UART_IRQHandler+0x66>
 80042de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fd8f 	bl	8004e0e <UART_Receive_IT>
      return;
 80042f0:	e256      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80de 	beq.w	80044b8 <HAL_UART_IRQHandler+0x22c>
 80042fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800430c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80d1 	beq.w	80044b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_UART_IRQHandler+0xae>
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_UART_IRQHandler+0xd2>
 8004346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xf6>
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f043 0204 	orr.w	r2, r3, #4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d011      	beq.n	80043b2 <HAL_UART_IRQHandler+0x126>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f043 0208 	orr.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 81ed 	beq.w	8004796 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_UART_IRQHandler+0x14e>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fd1a 	bl	8004e0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e4:	2b40      	cmp	r3, #64	; 0x40
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_UART_IRQHandler+0x17a>
 80043fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04f      	beq.n	80044a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fc22 	bl	8004c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b40      	cmp	r3, #64	; 0x40
 8004418:	d141      	bne.n	800449e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004446:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800444a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800445e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1d9      	bne.n	800441a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	4a7d      	ldr	r2, [pc, #500]	; (8004668 <HAL_UART_IRQHandler+0x3dc>)
 8004474:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fcfc 	bl	8001e78 <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	e00e      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f9a4 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00a      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9a0 	bl	80047e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e006      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f99c 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044b2:	e170      	b.n	8004796 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	bf00      	nop
    return;
 80044b6:	e16e      	b.n	8004796 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 814a 	bne.w	8004756 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8143 	beq.w	8004756 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 813c 	beq.w	8004756 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	f040 80b4 	bne.w	800466c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8140 	beq.w	800479a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800451e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004522:	429a      	cmp	r2, r3
 8004524:	f080 8139 	bcs.w	800479a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800452e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453a:	f000 8088 	beq.w	800464e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800456a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800456e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004576:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1d9      	bne.n	800453e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800459a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80045c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e1      	bne.n	800458a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80045d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80045ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	f023 0310 	bic.w	r3, r3, #16
 8004622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004630:	65ba      	str	r2, [r7, #88]	; 0x58
 8004632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800463e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e3      	bne.n	800460c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd fba5 	bl	8001d98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004656:	b29b      	uxth	r3, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	b29b      	uxth	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fb ffc8 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004664:	e099      	b.n	800479a <HAL_UART_IRQHandler+0x50e>
 8004666:	bf00      	nop
 8004668:	08004d17 	.word	0x08004d17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004674:	b29b      	uxth	r3, r3
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 808b 	beq.w	800479e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8086 	beq.w	800479e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	330c      	adds	r3, #12
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046b6:	647a      	str	r2, [r7, #68]	; 0x44
 80046b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e3      	bne.n	8004692 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	623b      	str	r3, [r7, #32]
   return(result);
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046ee:	633a      	str	r2, [r7, #48]	; 0x30
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e3      	bne.n	80046ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0310 	bic.w	r3, r3, #16
 8004726:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004734:	61fa      	str	r2, [r7, #28]
 8004736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004738:	69b9      	ldr	r1, [r7, #24]
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	617b      	str	r3, [r7, #20]
   return(result);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e3      	bne.n	8004710 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004748:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7fb ff50 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004754:	e023      	b.n	800479e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_UART_IRQHandler+0x4ea>
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fae5 	bl	8004d3e <UART_Transmit_IT>
    return;
 8004774:	e014      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <HAL_UART_IRQHandler+0x514>
 8004782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fb25 	bl	8004dde <UART_EndTransmit_IT>
    return;
 8004794:	e004      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
    return;
 8004796:	bf00      	nop
 8004798:	e002      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
      return;
 800479a:	bf00      	nop
 800479c:	e000      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
      return;
 800479e:	bf00      	nop
  }
}
 80047a0:	37e8      	adds	r7, #232	; 0xe8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop

080047a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b09c      	sub	sp, #112	; 0x70
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004804:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004810:	2b00      	cmp	r3, #0
 8004812:	d172      	bne.n	80048fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	2200      	movs	r2, #0
 8004818:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004830:	66bb      	str	r3, [r7, #104]	; 0x68
 8004832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800483a:	65ba      	str	r2, [r7, #88]	; 0x58
 800483c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e5      	bne.n	800481a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004860:	f023 0301 	bic.w	r3, r3, #1
 8004864:	667b      	str	r3, [r7, #100]	; 0x64
 8004866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800486e:	647a      	str	r2, [r7, #68]	; 0x44
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800487c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	3314      	adds	r3, #20
 8004888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	e853 3f00 	ldrex	r3, [r3]
 8004890:	623b      	str	r3, [r7, #32]
   return(result);
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004898:	663b      	str	r3, [r7, #96]	; 0x60
 800489a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048a2:	633a      	str	r2, [r7, #48]	; 0x30
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	e841 2300 	strex	r3, r2, [r1]
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1e5      	bne.n	8004882 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d119      	bne.n	80048fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0310 	bic.w	r3, r3, #16
 80048dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	330c      	adds	r3, #12
 80048e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048e6:	61fa      	str	r2, [r7, #28]
 80048e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	69b9      	ldr	r1, [r7, #24]
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	e841 2300 	strex	r3, r2, [r1]
 80048f2:	617b      	str	r3, [r7, #20]
   return(result);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1e5      	bne.n	80048c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d106      	bne.n	8004910 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004906:	4619      	mov	r1, r3
 8004908:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800490a:	f7fb fe73 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800490e:	e002      	b.n	8004916 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004910:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004912:	f7ff ff53 	bl	80047bc <HAL_UART_RxCpltCallback>
}
 8004916:	bf00      	nop
 8004918:	3770      	adds	r7, #112	; 0x70
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	2b01      	cmp	r3, #1
 8004932:	d108      	bne.n	8004946 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	4619      	mov	r1, r3
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7fb fe58 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004944:	e002      	b.n	800494c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f7ff ff42 	bl	80047d0 <HAL_UART_RxHalfCpltCallback>
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	bf0c      	ite	eq
 8004974:	2301      	moveq	r3, #1
 8004976:	2300      	movne	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b21      	cmp	r3, #33	; 0x21
 8004986:	d108      	bne.n	800499a <UART_DMAError+0x46>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004994:	68b8      	ldr	r0, [r7, #8]
 8004996:	f000 f933 	bl	8004c00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b22      	cmp	r3, #34	; 0x22
 80049ba:	d108      	bne.n	80049ce <UART_DMAError+0x7a>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2200      	movs	r2, #0
 80049c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80049c8:	68b8      	ldr	r0, [r7, #8]
 80049ca:	f000 f941 	bl	8004c50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f7ff ff02 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049e0:	bf00      	nop
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b090      	sub	sp, #64	; 0x40
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	e050      	b.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d04c      	beq.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d007      	beq.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a08:	f7fc ffa2 	bl	8001950 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d241      	bcs.n	8004a9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a38:	637a      	str	r2, [r7, #52]	; 0x34
 8004a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e5      	bne.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3314      	adds	r3, #20
 8004a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a6c:	623a      	str	r2, [r7, #32]
 8004a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e00f      	b.n	8004abc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d09f      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3740      	adds	r7, #64	; 0x40
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b098      	sub	sp, #96	; 0x60
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2222      	movs	r2, #34	; 0x22
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	4a40      	ldr	r2, [pc, #256]	; (8004bf4 <UART_Start_Receive_DMA+0x130>)
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <UART_Start_Receive_DMA+0x134>)
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	4a3e      	ldr	r2, [pc, #248]	; (8004bfc <UART_Start_Receive_DMA+0x138>)
 8004b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	2200      	movs	r2, #0
 8004b0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	f7fd f8e0 	bl	8001ce8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d019      	beq.n	8004b82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b64:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e5      	bne.n	8004b4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	657b      	str	r3, [r7, #84]	; 0x54
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3314      	adds	r3, #20
 8004ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ba2:	63ba      	str	r2, [r7, #56]	; 0x38
 8004ba4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e5      	bne.n	8004b82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3314      	adds	r3, #20
 8004bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bd6:	627a      	str	r2, [r7, #36]	; 0x24
 8004bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6a39      	ldr	r1, [r7, #32]
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e5      	bne.n	8004bb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3760      	adds	r7, #96	; 0x60
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	080047f9 	.word	0x080047f9
 8004bf8:	0800491f 	.word	0x0800491f
 8004bfc:	08004955 	.word	0x08004955

08004c00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b089      	sub	sp, #36	; 0x24
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	e853 3f00 	ldrex	r3, [r3]
 8004c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	61ba      	str	r2, [r7, #24]
 8004c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2c:	6979      	ldr	r1, [r7, #20]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	e841 2300 	strex	r3, r2, [r1]
 8004c34:	613b      	str	r3, [r7, #16]
   return(result);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e5      	bne.n	8004c08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004c44:	bf00      	nop
 8004c46:	3724      	adds	r7, #36	; 0x24
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b095      	sub	sp, #84	; 0x54
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c62:	e853 3f00 	ldrex	r3, [r3]
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c78:	643a      	str	r2, [r7, #64]	; 0x40
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c80:	e841 2300 	strex	r3, r2, [r1]
 8004c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e5      	bne.n	8004c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3314      	adds	r3, #20
 8004c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3314      	adds	r3, #20
 8004caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e5      	bne.n	8004c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d119      	bne.n	8004cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f023 0310 	bic.w	r3, r3, #16
 8004cde:	647b      	str	r3, [r7, #68]	; 0x44
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	330c      	adds	r3, #12
 8004ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce8:	61ba      	str	r2, [r7, #24]
 8004cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6979      	ldr	r1, [r7, #20]
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e5      	bne.n	8004cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d0a:	bf00      	nop
 8004d0c:	3754      	adds	r7, #84	; 0x54
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fd57 	bl	80047e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b21      	cmp	r3, #33	; 0x21
 8004d50:	d13e      	bne.n	8004dd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d114      	bne.n	8004d86 <UART_Transmit_IT+0x48>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d110      	bne.n	8004d86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	621a      	str	r2, [r3, #32]
 8004d84:	e008      	b.n	8004d98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6211      	str	r1, [r2, #32]
 8004d90:	781a      	ldrb	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	4619      	mov	r1, r3
 8004da6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10f      	bne.n	8004dcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e000      	b.n	8004dd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dd0:	2302      	movs	r3, #2
  }
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff fcd2 	bl	80047a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b08c      	sub	sp, #48	; 0x30
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b22      	cmp	r3, #34	; 0x22
 8004e20:	f040 80ab 	bne.w	8004f7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2c:	d117      	bne.n	8004e5e <UART_Receive_IT+0x50>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d113      	bne.n	8004e5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	1c9a      	adds	r2, r3, #2
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e5c:	e026      	b.n	8004eac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e64:	2300      	movs	r3, #0
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e70:	d007      	beq.n	8004e82 <UART_Receive_IT+0x74>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <UART_Receive_IT+0x82>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e008      	b.n	8004ea2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d15a      	bne.n	8004f76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0220 	bic.w	r2, r2, #32
 8004ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d135      	bne.n	8004f6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	613b      	str	r3, [r7, #16]
   return(result);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	f023 0310 	bic.w	r3, r3, #16
 8004f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	330c      	adds	r3, #12
 8004f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f26:	623a      	str	r2, [r7, #32]
 8004f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	69f9      	ldr	r1, [r7, #28]
 8004f2c:	6a3a      	ldr	r2, [r7, #32]
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e5      	bne.n	8004f06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b10      	cmp	r3, #16
 8004f46:	d10a      	bne.n	8004f5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f62:	4619      	mov	r1, r3
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fb fb45 	bl	80005f4 <HAL_UARTEx_RxEventCallback>
 8004f6a:	e002      	b.n	8004f72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fc25 	bl	80047bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e002      	b.n	8004f7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3730      	adds	r7, #48	; 0x30
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b0c0      	sub	sp, #256	; 0x100
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa0:	68d9      	ldr	r1, [r3, #12]
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	ea40 0301 	orr.w	r3, r0, r1
 8004fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fdc:	f021 010c 	bic.w	r1, r1, #12
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004fea:	430b      	orrs	r3, r1
 8004fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffe:	6999      	ldr	r1, [r3, #24]
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	ea40 0301 	orr.w	r3, r0, r1
 800500a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b8f      	ldr	r3, [pc, #572]	; (8005250 <UART_SetConfig+0x2cc>)
 8005014:	429a      	cmp	r2, r3
 8005016:	d005      	beq.n	8005024 <UART_SetConfig+0xa0>
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4b8d      	ldr	r3, [pc, #564]	; (8005254 <UART_SetConfig+0x2d0>)
 8005020:	429a      	cmp	r2, r3
 8005022:	d104      	bne.n	800502e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005024:	f7fd ff96 	bl	8002f54 <HAL_RCC_GetPCLK2Freq>
 8005028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800502c:	e003      	b.n	8005036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800502e:	f7fd ff7d 	bl	8002f2c <HAL_RCC_GetPCLK1Freq>
 8005032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005040:	f040 810c 	bne.w	800525c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005048:	2200      	movs	r2, #0
 800504a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800504e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005056:	4622      	mov	r2, r4
 8005058:	462b      	mov	r3, r5
 800505a:	1891      	adds	r1, r2, r2
 800505c:	65b9      	str	r1, [r7, #88]	; 0x58
 800505e:	415b      	adcs	r3, r3
 8005060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005066:	4621      	mov	r1, r4
 8005068:	eb12 0801 	adds.w	r8, r2, r1
 800506c:	4629      	mov	r1, r5
 800506e:	eb43 0901 	adc.w	r9, r3, r1
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800507e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005086:	4690      	mov	r8, r2
 8005088:	4699      	mov	r9, r3
 800508a:	4623      	mov	r3, r4
 800508c:	eb18 0303 	adds.w	r3, r8, r3
 8005090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005094:	462b      	mov	r3, r5
 8005096:	eb49 0303 	adc.w	r3, r9, r3
 800509a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80050ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80050b2:	460b      	mov	r3, r1
 80050b4:	18db      	adds	r3, r3, r3
 80050b6:	653b      	str	r3, [r7, #80]	; 0x50
 80050b8:	4613      	mov	r3, r2
 80050ba:	eb42 0303 	adc.w	r3, r2, r3
 80050be:	657b      	str	r3, [r7, #84]	; 0x54
 80050c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80050c8:	f7fb f8da 	bl	8000280 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4b61      	ldr	r3, [pc, #388]	; (8005258 <UART_SetConfig+0x2d4>)
 80050d2:	fba3 2302 	umull	r2, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	011c      	lsls	r4, r3, #4
 80050da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050de:	2200      	movs	r2, #0
 80050e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80050e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	1891      	adds	r1, r2, r2
 80050f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80050f4:	415b      	adcs	r3, r3
 80050f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050fc:	4641      	mov	r1, r8
 80050fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005102:	4649      	mov	r1, r9
 8005104:	eb43 0b01 	adc.w	fp, r3, r1
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800511c:	4692      	mov	sl, r2
 800511e:	469b      	mov	fp, r3
 8005120:	4643      	mov	r3, r8
 8005122:	eb1a 0303 	adds.w	r3, sl, r3
 8005126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800512a:	464b      	mov	r3, r9
 800512c:	eb4b 0303 	adc.w	r3, fp, r3
 8005130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005148:	460b      	mov	r3, r1
 800514a:	18db      	adds	r3, r3, r3
 800514c:	643b      	str	r3, [r7, #64]	; 0x40
 800514e:	4613      	mov	r3, r2
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	647b      	str	r3, [r7, #68]	; 0x44
 8005156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800515a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800515e:	f7fb f88f 	bl	8000280 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4611      	mov	r1, r2
 8005168:	4b3b      	ldr	r3, [pc, #236]	; (8005258 <UART_SetConfig+0x2d4>)
 800516a:	fba3 2301 	umull	r2, r3, r3, r1
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2264      	movs	r2, #100	; 0x64
 8005172:	fb02 f303 	mul.w	r3, r2, r3
 8005176:	1acb      	subs	r3, r1, r3
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800517e:	4b36      	ldr	r3, [pc, #216]	; (8005258 <UART_SetConfig+0x2d4>)
 8005180:	fba3 2302 	umull	r2, r3, r3, r2
 8005184:	095b      	lsrs	r3, r3, #5
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800518c:	441c      	add	r4, r3
 800518e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005192:	2200      	movs	r2, #0
 8005194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800519c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051a0:	4642      	mov	r2, r8
 80051a2:	464b      	mov	r3, r9
 80051a4:	1891      	adds	r1, r2, r2
 80051a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80051a8:	415b      	adcs	r3, r3
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051b0:	4641      	mov	r1, r8
 80051b2:	1851      	adds	r1, r2, r1
 80051b4:	6339      	str	r1, [r7, #48]	; 0x30
 80051b6:	4649      	mov	r1, r9
 80051b8:	414b      	adcs	r3, r1
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
 80051bc:	f04f 0200 	mov.w	r2, #0
 80051c0:	f04f 0300 	mov.w	r3, #0
 80051c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80051c8:	4659      	mov	r1, fp
 80051ca:	00cb      	lsls	r3, r1, #3
 80051cc:	4651      	mov	r1, sl
 80051ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d2:	4651      	mov	r1, sl
 80051d4:	00ca      	lsls	r2, r1, #3
 80051d6:	4610      	mov	r0, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	4642      	mov	r2, r8
 80051de:	189b      	adds	r3, r3, r2
 80051e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051e4:	464b      	mov	r3, r9
 80051e6:	460a      	mov	r2, r1
 80051e8:	eb42 0303 	adc.w	r3, r2, r3
 80051ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005204:	460b      	mov	r3, r1
 8005206:	18db      	adds	r3, r3, r3
 8005208:	62bb      	str	r3, [r7, #40]	; 0x28
 800520a:	4613      	mov	r3, r2
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800521a:	f7fb f831 	bl	8000280 <__aeabi_uldivmod>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <UART_SetConfig+0x2d4>)
 8005224:	fba3 1302 	umull	r1, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	2164      	movs	r1, #100	; 0x64
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3332      	adds	r3, #50	; 0x32
 8005236:	4a08      	ldr	r2, [pc, #32]	; (8005258 <UART_SetConfig+0x2d4>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f003 0207 	and.w	r2, r3, #7
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4422      	add	r2, r4
 800524a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800524c:	e106      	b.n	800545c <UART_SetConfig+0x4d8>
 800524e:	bf00      	nop
 8005250:	40011000 	.word	0x40011000
 8005254:	40011400 	.word	0x40011400
 8005258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800525c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005260:	2200      	movs	r2, #0
 8005262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800526a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800526e:	4642      	mov	r2, r8
 8005270:	464b      	mov	r3, r9
 8005272:	1891      	adds	r1, r2, r2
 8005274:	6239      	str	r1, [r7, #32]
 8005276:	415b      	adcs	r3, r3
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
 800527a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800527e:	4641      	mov	r1, r8
 8005280:	1854      	adds	r4, r2, r1
 8005282:	4649      	mov	r1, r9
 8005284:	eb43 0501 	adc.w	r5, r3, r1
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	00eb      	lsls	r3, r5, #3
 8005292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005296:	00e2      	lsls	r2, r4, #3
 8005298:	4614      	mov	r4, r2
 800529a:	461d      	mov	r5, r3
 800529c:	4643      	mov	r3, r8
 800529e:	18e3      	adds	r3, r4, r3
 80052a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052a4:	464b      	mov	r3, r9
 80052a6:	eb45 0303 	adc.w	r3, r5, r3
 80052aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80052ca:	4629      	mov	r1, r5
 80052cc:	008b      	lsls	r3, r1, #2
 80052ce:	4621      	mov	r1, r4
 80052d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d4:	4621      	mov	r1, r4
 80052d6:	008a      	lsls	r2, r1, #2
 80052d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80052dc:	f7fa ffd0 	bl	8000280 <__aeabi_uldivmod>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4b60      	ldr	r3, [pc, #384]	; (8005468 <UART_SetConfig+0x4e4>)
 80052e6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ea:	095b      	lsrs	r3, r3, #5
 80052ec:	011c      	lsls	r4, r3, #4
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	1891      	adds	r1, r2, r2
 8005306:	61b9      	str	r1, [r7, #24]
 8005308:	415b      	adcs	r3, r3
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005310:	4641      	mov	r1, r8
 8005312:	1851      	adds	r1, r2, r1
 8005314:	6139      	str	r1, [r7, #16]
 8005316:	4649      	mov	r1, r9
 8005318:	414b      	adcs	r3, r1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005328:	4659      	mov	r1, fp
 800532a:	00cb      	lsls	r3, r1, #3
 800532c:	4651      	mov	r1, sl
 800532e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005332:	4651      	mov	r1, sl
 8005334:	00ca      	lsls	r2, r1, #3
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	4603      	mov	r3, r0
 800533c:	4642      	mov	r2, r8
 800533e:	189b      	adds	r3, r3, r2
 8005340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005344:	464b      	mov	r3, r9
 8005346:	460a      	mov	r2, r1
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	67bb      	str	r3, [r7, #120]	; 0x78
 800535a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005368:	4649      	mov	r1, r9
 800536a:	008b      	lsls	r3, r1, #2
 800536c:	4641      	mov	r1, r8
 800536e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005372:	4641      	mov	r1, r8
 8005374:	008a      	lsls	r2, r1, #2
 8005376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800537a:	f7fa ff81 	bl	8000280 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4611      	mov	r1, r2
 8005384:	4b38      	ldr	r3, [pc, #224]	; (8005468 <UART_SetConfig+0x4e4>)
 8005386:	fba3 2301 	umull	r2, r3, r3, r1
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	2264      	movs	r2, #100	; 0x64
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	1acb      	subs	r3, r1, r3
 8005394:	011b      	lsls	r3, r3, #4
 8005396:	3332      	adds	r3, #50	; 0x32
 8005398:	4a33      	ldr	r2, [pc, #204]	; (8005468 <UART_SetConfig+0x4e4>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a4:	441c      	add	r4, r3
 80053a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053aa:	2200      	movs	r2, #0
 80053ac:	673b      	str	r3, [r7, #112]	; 0x70
 80053ae:	677a      	str	r2, [r7, #116]	; 0x74
 80053b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80053b4:	4642      	mov	r2, r8
 80053b6:	464b      	mov	r3, r9
 80053b8:	1891      	adds	r1, r2, r2
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	415b      	adcs	r3, r3
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053c4:	4641      	mov	r1, r8
 80053c6:	1851      	adds	r1, r2, r1
 80053c8:	6039      	str	r1, [r7, #0]
 80053ca:	4649      	mov	r1, r9
 80053cc:	414b      	adcs	r3, r1
 80053ce:	607b      	str	r3, [r7, #4]
 80053d0:	f04f 0200 	mov.w	r2, #0
 80053d4:	f04f 0300 	mov.w	r3, #0
 80053d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053dc:	4659      	mov	r1, fp
 80053de:	00cb      	lsls	r3, r1, #3
 80053e0:	4651      	mov	r1, sl
 80053e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e6:	4651      	mov	r1, sl
 80053e8:	00ca      	lsls	r2, r1, #3
 80053ea:	4610      	mov	r0, r2
 80053ec:	4619      	mov	r1, r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	4642      	mov	r2, r8
 80053f2:	189b      	adds	r3, r3, r2
 80053f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80053f6:	464b      	mov	r3, r9
 80053f8:	460a      	mov	r2, r1
 80053fa:	eb42 0303 	adc.w	r3, r2, r3
 80053fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	663b      	str	r3, [r7, #96]	; 0x60
 800540a:	667a      	str	r2, [r7, #100]	; 0x64
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005418:	4649      	mov	r1, r9
 800541a:	008b      	lsls	r3, r1, #2
 800541c:	4641      	mov	r1, r8
 800541e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005422:	4641      	mov	r1, r8
 8005424:	008a      	lsls	r2, r1, #2
 8005426:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800542a:	f7fa ff29 	bl	8000280 <__aeabi_uldivmod>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <UART_SetConfig+0x4e4>)
 8005434:	fba3 1302 	umull	r1, r3, r3, r2
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2164      	movs	r1, #100	; 0x64
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	3332      	adds	r3, #50	; 0x32
 8005446:	4a08      	ldr	r2, [pc, #32]	; (8005468 <UART_SetConfig+0x4e4>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 020f 	and.w	r2, r3, #15
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4422      	add	r2, r4
 800545a:	609a      	str	r2, [r3, #8]
}
 800545c:	bf00      	nop
 800545e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005462:	46bd      	mov	sp, r7
 8005464:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005468:	51eb851f 	.word	0x51eb851f

0800546c <atoi>:
 800546c:	220a      	movs	r2, #10
 800546e:	2100      	movs	r1, #0
 8005470:	f000 b882 	b.w	8005578 <strtol>

08005474 <_strtol_l.constprop.0>:
 8005474:	2b01      	cmp	r3, #1
 8005476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547a:	d001      	beq.n	8005480 <_strtol_l.constprop.0+0xc>
 800547c:	2b24      	cmp	r3, #36	; 0x24
 800547e:	d906      	bls.n	800548e <_strtol_l.constprop.0+0x1a>
 8005480:	f000 f8ac 	bl	80055dc <__errno>
 8005484:	2316      	movs	r3, #22
 8005486:	6003      	str	r3, [r0, #0]
 8005488:	2000      	movs	r0, #0
 800548a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800548e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005574 <_strtol_l.constprop.0+0x100>
 8005492:	460d      	mov	r5, r1
 8005494:	462e      	mov	r6, r5
 8005496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800549a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800549e:	f017 0708 	ands.w	r7, r7, #8
 80054a2:	d1f7      	bne.n	8005494 <_strtol_l.constprop.0+0x20>
 80054a4:	2c2d      	cmp	r4, #45	; 0x2d
 80054a6:	d132      	bne.n	800550e <_strtol_l.constprop.0+0x9a>
 80054a8:	782c      	ldrb	r4, [r5, #0]
 80054aa:	2701      	movs	r7, #1
 80054ac:	1cb5      	adds	r5, r6, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d05b      	beq.n	800556a <_strtol_l.constprop.0+0xf6>
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d109      	bne.n	80054ca <_strtol_l.constprop.0+0x56>
 80054b6:	2c30      	cmp	r4, #48	; 0x30
 80054b8:	d107      	bne.n	80054ca <_strtol_l.constprop.0+0x56>
 80054ba:	782c      	ldrb	r4, [r5, #0]
 80054bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80054c0:	2c58      	cmp	r4, #88	; 0x58
 80054c2:	d14d      	bne.n	8005560 <_strtol_l.constprop.0+0xec>
 80054c4:	786c      	ldrb	r4, [r5, #1]
 80054c6:	2310      	movs	r3, #16
 80054c8:	3502      	adds	r5, #2
 80054ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80054ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80054d2:	f04f 0e00 	mov.w	lr, #0
 80054d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80054da:	4676      	mov	r6, lr
 80054dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80054e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80054e4:	f1bc 0f09 	cmp.w	ip, #9
 80054e8:	d816      	bhi.n	8005518 <_strtol_l.constprop.0+0xa4>
 80054ea:	4664      	mov	r4, ip
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	dd24      	ble.n	800553a <_strtol_l.constprop.0+0xc6>
 80054f0:	f1be 3fff 	cmp.w	lr, #4294967295
 80054f4:	d008      	beq.n	8005508 <_strtol_l.constprop.0+0x94>
 80054f6:	45b1      	cmp	r9, r6
 80054f8:	d31c      	bcc.n	8005534 <_strtol_l.constprop.0+0xc0>
 80054fa:	d101      	bne.n	8005500 <_strtol_l.constprop.0+0x8c>
 80054fc:	45a2      	cmp	sl, r4
 80054fe:	db19      	blt.n	8005534 <_strtol_l.constprop.0+0xc0>
 8005500:	fb06 4603 	mla	r6, r6, r3, r4
 8005504:	f04f 0e01 	mov.w	lr, #1
 8005508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800550c:	e7e8      	b.n	80054e0 <_strtol_l.constprop.0+0x6c>
 800550e:	2c2b      	cmp	r4, #43	; 0x2b
 8005510:	bf04      	itt	eq
 8005512:	782c      	ldrbeq	r4, [r5, #0]
 8005514:	1cb5      	addeq	r5, r6, #2
 8005516:	e7ca      	b.n	80054ae <_strtol_l.constprop.0+0x3a>
 8005518:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800551c:	f1bc 0f19 	cmp.w	ip, #25
 8005520:	d801      	bhi.n	8005526 <_strtol_l.constprop.0+0xb2>
 8005522:	3c37      	subs	r4, #55	; 0x37
 8005524:	e7e2      	b.n	80054ec <_strtol_l.constprop.0+0x78>
 8005526:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800552a:	f1bc 0f19 	cmp.w	ip, #25
 800552e:	d804      	bhi.n	800553a <_strtol_l.constprop.0+0xc6>
 8005530:	3c57      	subs	r4, #87	; 0x57
 8005532:	e7db      	b.n	80054ec <_strtol_l.constprop.0+0x78>
 8005534:	f04f 3eff 	mov.w	lr, #4294967295
 8005538:	e7e6      	b.n	8005508 <_strtol_l.constprop.0+0x94>
 800553a:	f1be 3fff 	cmp.w	lr, #4294967295
 800553e:	d105      	bne.n	800554c <_strtol_l.constprop.0+0xd8>
 8005540:	2322      	movs	r3, #34	; 0x22
 8005542:	6003      	str	r3, [r0, #0]
 8005544:	4646      	mov	r6, r8
 8005546:	b942      	cbnz	r2, 800555a <_strtol_l.constprop.0+0xe6>
 8005548:	4630      	mov	r0, r6
 800554a:	e79e      	b.n	800548a <_strtol_l.constprop.0+0x16>
 800554c:	b107      	cbz	r7, 8005550 <_strtol_l.constprop.0+0xdc>
 800554e:	4276      	negs	r6, r6
 8005550:	2a00      	cmp	r2, #0
 8005552:	d0f9      	beq.n	8005548 <_strtol_l.constprop.0+0xd4>
 8005554:	f1be 0f00 	cmp.w	lr, #0
 8005558:	d000      	beq.n	800555c <_strtol_l.constprop.0+0xe8>
 800555a:	1e69      	subs	r1, r5, #1
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	e7f3      	b.n	8005548 <_strtol_l.constprop.0+0xd4>
 8005560:	2430      	movs	r4, #48	; 0x30
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1b1      	bne.n	80054ca <_strtol_l.constprop.0+0x56>
 8005566:	2308      	movs	r3, #8
 8005568:	e7af      	b.n	80054ca <_strtol_l.constprop.0+0x56>
 800556a:	2c30      	cmp	r4, #48	; 0x30
 800556c:	d0a5      	beq.n	80054ba <_strtol_l.constprop.0+0x46>
 800556e:	230a      	movs	r3, #10
 8005570:	e7ab      	b.n	80054ca <_strtol_l.constprop.0+0x56>
 8005572:	bf00      	nop
 8005574:	08005f11 	.word	0x08005f11

08005578 <strtol>:
 8005578:	4613      	mov	r3, r2
 800557a:	460a      	mov	r2, r1
 800557c:	4601      	mov	r1, r0
 800557e:	4802      	ldr	r0, [pc, #8]	; (8005588 <strtol+0x10>)
 8005580:	6800      	ldr	r0, [r0, #0]
 8005582:	f7ff bf77 	b.w	8005474 <_strtol_l.constprop.0>
 8005586:	bf00      	nop
 8005588:	20000058 	.word	0x20000058

0800558c <siprintf>:
 800558c:	b40e      	push	{r1, r2, r3}
 800558e:	b500      	push	{lr}
 8005590:	b09c      	sub	sp, #112	; 0x70
 8005592:	ab1d      	add	r3, sp, #116	; 0x74
 8005594:	9002      	str	r0, [sp, #8]
 8005596:	9006      	str	r0, [sp, #24]
 8005598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800559c:	4809      	ldr	r0, [pc, #36]	; (80055c4 <siprintf+0x38>)
 800559e:	9107      	str	r1, [sp, #28]
 80055a0:	9104      	str	r1, [sp, #16]
 80055a2:	4909      	ldr	r1, [pc, #36]	; (80055c8 <siprintf+0x3c>)
 80055a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a8:	9105      	str	r1, [sp, #20]
 80055aa:	6800      	ldr	r0, [r0, #0]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	a902      	add	r1, sp, #8
 80055b0:	f000 f992 	bl	80058d8 <_svfiprintf_r>
 80055b4:	9b02      	ldr	r3, [sp, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	b01c      	add	sp, #112	; 0x70
 80055bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c0:	b003      	add	sp, #12
 80055c2:	4770      	bx	lr
 80055c4:	20000058 	.word	0x20000058
 80055c8:	ffff0208 	.word	0xffff0208

080055cc <memset>:
 80055cc:	4402      	add	r2, r0
 80055ce:	4603      	mov	r3, r0
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d100      	bne.n	80055d6 <memset+0xa>
 80055d4:	4770      	bx	lr
 80055d6:	f803 1b01 	strb.w	r1, [r3], #1
 80055da:	e7f9      	b.n	80055d0 <memset+0x4>

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000058 	.word	0x20000058

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4d0d      	ldr	r5, [pc, #52]	; (8005620 <__libc_init_array+0x38>)
 80055ec:	4c0d      	ldr	r4, [pc, #52]	; (8005624 <__libc_init_array+0x3c>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	2600      	movs	r6, #0
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	4d0b      	ldr	r5, [pc, #44]	; (8005628 <__libc_init_array+0x40>)
 80055fa:	4c0c      	ldr	r4, [pc, #48]	; (800562c <__libc_init_array+0x44>)
 80055fc:	f000 fc6a 	bl	8005ed4 <_init>
 8005600:	1b64      	subs	r4, r4, r5
 8005602:	10a4      	asrs	r4, r4, #2
 8005604:	2600      	movs	r6, #0
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f855 3b04 	ldr.w	r3, [r5], #4
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	0800604c 	.word	0x0800604c
 8005624:	0800604c 	.word	0x0800604c
 8005628:	0800604c 	.word	0x0800604c
 800562c:	08006050 	.word	0x08006050

08005630 <__retarget_lock_acquire_recursive>:
 8005630:	4770      	bx	lr

08005632 <__retarget_lock_release_recursive>:
 8005632:	4770      	bx	lr

08005634 <_free_r>:
 8005634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005636:	2900      	cmp	r1, #0
 8005638:	d044      	beq.n	80056c4 <_free_r+0x90>
 800563a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f1a1 0404 	sub.w	r4, r1, #4
 8005646:	bfb8      	it	lt
 8005648:	18e4      	addlt	r4, r4, r3
 800564a:	f000 f8df 	bl	800580c <__malloc_lock>
 800564e:	4a1e      	ldr	r2, [pc, #120]	; (80056c8 <_free_r+0x94>)
 8005650:	9801      	ldr	r0, [sp, #4]
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	b933      	cbnz	r3, 8005664 <_free_r+0x30>
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	6014      	str	r4, [r2, #0]
 800565a:	b003      	add	sp, #12
 800565c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005660:	f000 b8da 	b.w	8005818 <__malloc_unlock>
 8005664:	42a3      	cmp	r3, r4
 8005666:	d908      	bls.n	800567a <_free_r+0x46>
 8005668:	6825      	ldr	r5, [r4, #0]
 800566a:	1961      	adds	r1, r4, r5
 800566c:	428b      	cmp	r3, r1
 800566e:	bf01      	itttt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	1949      	addeq	r1, r1, r5
 8005676:	6021      	streq	r1, [r4, #0]
 8005678:	e7ed      	b.n	8005656 <_free_r+0x22>
 800567a:	461a      	mov	r2, r3
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b10b      	cbz	r3, 8005684 <_free_r+0x50>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d9fa      	bls.n	800567a <_free_r+0x46>
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	1855      	adds	r5, r2, r1
 8005688:	42a5      	cmp	r5, r4
 800568a:	d10b      	bne.n	80056a4 <_free_r+0x70>
 800568c:	6824      	ldr	r4, [r4, #0]
 800568e:	4421      	add	r1, r4
 8005690:	1854      	adds	r4, r2, r1
 8005692:	42a3      	cmp	r3, r4
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	d1e0      	bne.n	800565a <_free_r+0x26>
 8005698:	681c      	ldr	r4, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	6053      	str	r3, [r2, #4]
 800569e:	440c      	add	r4, r1
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	e7da      	b.n	800565a <_free_r+0x26>
 80056a4:	d902      	bls.n	80056ac <_free_r+0x78>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6003      	str	r3, [r0, #0]
 80056aa:	e7d6      	b.n	800565a <_free_r+0x26>
 80056ac:	6825      	ldr	r5, [r4, #0]
 80056ae:	1961      	adds	r1, r4, r5
 80056b0:	428b      	cmp	r3, r1
 80056b2:	bf04      	itt	eq
 80056b4:	6819      	ldreq	r1, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	bf04      	itt	eq
 80056bc:	1949      	addeq	r1, r1, r5
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	6054      	str	r4, [r2, #4]
 80056c2:	e7ca      	b.n	800565a <_free_r+0x26>
 80056c4:	b003      	add	sp, #12
 80056c6:	bd30      	pop	{r4, r5, pc}
 80056c8:	20000510 	.word	0x20000510

080056cc <sbrk_aligned>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	4e0e      	ldr	r6, [pc, #56]	; (8005708 <sbrk_aligned+0x3c>)
 80056d0:	460c      	mov	r4, r1
 80056d2:	6831      	ldr	r1, [r6, #0]
 80056d4:	4605      	mov	r5, r0
 80056d6:	b911      	cbnz	r1, 80056de <sbrk_aligned+0x12>
 80056d8:	f000 fba6 	bl	8005e28 <_sbrk_r>
 80056dc:	6030      	str	r0, [r6, #0]
 80056de:	4621      	mov	r1, r4
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 fba1 	bl	8005e28 <_sbrk_r>
 80056e6:	1c43      	adds	r3, r0, #1
 80056e8:	d00a      	beq.n	8005700 <sbrk_aligned+0x34>
 80056ea:	1cc4      	adds	r4, r0, #3
 80056ec:	f024 0403 	bic.w	r4, r4, #3
 80056f0:	42a0      	cmp	r0, r4
 80056f2:	d007      	beq.n	8005704 <sbrk_aligned+0x38>
 80056f4:	1a21      	subs	r1, r4, r0
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 fb96 	bl	8005e28 <_sbrk_r>
 80056fc:	3001      	adds	r0, #1
 80056fe:	d101      	bne.n	8005704 <sbrk_aligned+0x38>
 8005700:	f04f 34ff 	mov.w	r4, #4294967295
 8005704:	4620      	mov	r0, r4
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	20000514 	.word	0x20000514

0800570c <_malloc_r>:
 800570c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005710:	1ccd      	adds	r5, r1, #3
 8005712:	f025 0503 	bic.w	r5, r5, #3
 8005716:	3508      	adds	r5, #8
 8005718:	2d0c      	cmp	r5, #12
 800571a:	bf38      	it	cc
 800571c:	250c      	movcc	r5, #12
 800571e:	2d00      	cmp	r5, #0
 8005720:	4607      	mov	r7, r0
 8005722:	db01      	blt.n	8005728 <_malloc_r+0x1c>
 8005724:	42a9      	cmp	r1, r5
 8005726:	d905      	bls.n	8005734 <_malloc_r+0x28>
 8005728:	230c      	movs	r3, #12
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	2600      	movs	r6, #0
 800572e:	4630      	mov	r0, r6
 8005730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005734:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005808 <_malloc_r+0xfc>
 8005738:	f000 f868 	bl	800580c <__malloc_lock>
 800573c:	f8d8 3000 	ldr.w	r3, [r8]
 8005740:	461c      	mov	r4, r3
 8005742:	bb5c      	cbnz	r4, 800579c <_malloc_r+0x90>
 8005744:	4629      	mov	r1, r5
 8005746:	4638      	mov	r0, r7
 8005748:	f7ff ffc0 	bl	80056cc <sbrk_aligned>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	4604      	mov	r4, r0
 8005750:	d155      	bne.n	80057fe <_malloc_r+0xf2>
 8005752:	f8d8 4000 	ldr.w	r4, [r8]
 8005756:	4626      	mov	r6, r4
 8005758:	2e00      	cmp	r6, #0
 800575a:	d145      	bne.n	80057e8 <_malloc_r+0xdc>
 800575c:	2c00      	cmp	r4, #0
 800575e:	d048      	beq.n	80057f2 <_malloc_r+0xe6>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	4631      	mov	r1, r6
 8005764:	4638      	mov	r0, r7
 8005766:	eb04 0903 	add.w	r9, r4, r3
 800576a:	f000 fb5d 	bl	8005e28 <_sbrk_r>
 800576e:	4581      	cmp	r9, r0
 8005770:	d13f      	bne.n	80057f2 <_malloc_r+0xe6>
 8005772:	6821      	ldr	r1, [r4, #0]
 8005774:	1a6d      	subs	r5, r5, r1
 8005776:	4629      	mov	r1, r5
 8005778:	4638      	mov	r0, r7
 800577a:	f7ff ffa7 	bl	80056cc <sbrk_aligned>
 800577e:	3001      	adds	r0, #1
 8005780:	d037      	beq.n	80057f2 <_malloc_r+0xe6>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	442b      	add	r3, r5
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	f8d8 3000 	ldr.w	r3, [r8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d038      	beq.n	8005802 <_malloc_r+0xf6>
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	42a2      	cmp	r2, r4
 8005794:	d12b      	bne.n	80057ee <_malloc_r+0xe2>
 8005796:	2200      	movs	r2, #0
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	e00f      	b.n	80057bc <_malloc_r+0xb0>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	1b52      	subs	r2, r2, r5
 80057a0:	d41f      	bmi.n	80057e2 <_malloc_r+0xd6>
 80057a2:	2a0b      	cmp	r2, #11
 80057a4:	d917      	bls.n	80057d6 <_malloc_r+0xca>
 80057a6:	1961      	adds	r1, r4, r5
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	6025      	str	r5, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	6059      	strne	r1, [r3, #4]
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	bf08      	it	eq
 80057b4:	f8c8 1000 	streq.w	r1, [r8]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4638      	mov	r0, r7
 80057be:	f104 060b 	add.w	r6, r4, #11
 80057c2:	f000 f829 	bl	8005818 <__malloc_unlock>
 80057c6:	f026 0607 	bic.w	r6, r6, #7
 80057ca:	1d23      	adds	r3, r4, #4
 80057cc:	1af2      	subs	r2, r6, r3
 80057ce:	d0ae      	beq.n	800572e <_malloc_r+0x22>
 80057d0:	1b9b      	subs	r3, r3, r6
 80057d2:	50a3      	str	r3, [r4, r2]
 80057d4:	e7ab      	b.n	800572e <_malloc_r+0x22>
 80057d6:	42a3      	cmp	r3, r4
 80057d8:	6862      	ldr	r2, [r4, #4]
 80057da:	d1dd      	bne.n	8005798 <_malloc_r+0x8c>
 80057dc:	f8c8 2000 	str.w	r2, [r8]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xb0>
 80057e2:	4623      	mov	r3, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7ac      	b.n	8005742 <_malloc_r+0x36>
 80057e8:	4634      	mov	r4, r6
 80057ea:	6876      	ldr	r6, [r6, #4]
 80057ec:	e7b4      	b.n	8005758 <_malloc_r+0x4c>
 80057ee:	4613      	mov	r3, r2
 80057f0:	e7cc      	b.n	800578c <_malloc_r+0x80>
 80057f2:	230c      	movs	r3, #12
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	4638      	mov	r0, r7
 80057f8:	f000 f80e 	bl	8005818 <__malloc_unlock>
 80057fc:	e797      	b.n	800572e <_malloc_r+0x22>
 80057fe:	6025      	str	r5, [r4, #0]
 8005800:	e7dc      	b.n	80057bc <_malloc_r+0xb0>
 8005802:	605b      	str	r3, [r3, #4]
 8005804:	deff      	udf	#255	; 0xff
 8005806:	bf00      	nop
 8005808:	20000510 	.word	0x20000510

0800580c <__malloc_lock>:
 800580c:	4801      	ldr	r0, [pc, #4]	; (8005814 <__malloc_lock+0x8>)
 800580e:	f7ff bf0f 	b.w	8005630 <__retarget_lock_acquire_recursive>
 8005812:	bf00      	nop
 8005814:	2000050c 	.word	0x2000050c

08005818 <__malloc_unlock>:
 8005818:	4801      	ldr	r0, [pc, #4]	; (8005820 <__malloc_unlock+0x8>)
 800581a:	f7ff bf0a 	b.w	8005632 <__retarget_lock_release_recursive>
 800581e:	bf00      	nop
 8005820:	2000050c 	.word	0x2000050c

08005824 <__ssputs_r>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	688e      	ldr	r6, [r1, #8]
 800582a:	461f      	mov	r7, r3
 800582c:	42be      	cmp	r6, r7
 800582e:	680b      	ldr	r3, [r1, #0]
 8005830:	4682      	mov	sl, r0
 8005832:	460c      	mov	r4, r1
 8005834:	4690      	mov	r8, r2
 8005836:	d82c      	bhi.n	8005892 <__ssputs_r+0x6e>
 8005838:	898a      	ldrh	r2, [r1, #12]
 800583a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800583e:	d026      	beq.n	800588e <__ssputs_r+0x6a>
 8005840:	6965      	ldr	r5, [r4, #20]
 8005842:	6909      	ldr	r1, [r1, #16]
 8005844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005848:	eba3 0901 	sub.w	r9, r3, r1
 800584c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005850:	1c7b      	adds	r3, r7, #1
 8005852:	444b      	add	r3, r9
 8005854:	106d      	asrs	r5, r5, #1
 8005856:	429d      	cmp	r5, r3
 8005858:	bf38      	it	cc
 800585a:	461d      	movcc	r5, r3
 800585c:	0553      	lsls	r3, r2, #21
 800585e:	d527      	bpl.n	80058b0 <__ssputs_r+0x8c>
 8005860:	4629      	mov	r1, r5
 8005862:	f7ff ff53 	bl	800570c <_malloc_r>
 8005866:	4606      	mov	r6, r0
 8005868:	b360      	cbz	r0, 80058c4 <__ssputs_r+0xa0>
 800586a:	6921      	ldr	r1, [r4, #16]
 800586c:	464a      	mov	r2, r9
 800586e:	f000 faeb 	bl	8005e48 <memcpy>
 8005872:	89a3      	ldrh	r3, [r4, #12]
 8005874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	6126      	str	r6, [r4, #16]
 8005880:	6165      	str	r5, [r4, #20]
 8005882:	444e      	add	r6, r9
 8005884:	eba5 0509 	sub.w	r5, r5, r9
 8005888:	6026      	str	r6, [r4, #0]
 800588a:	60a5      	str	r5, [r4, #8]
 800588c:	463e      	mov	r6, r7
 800588e:	42be      	cmp	r6, r7
 8005890:	d900      	bls.n	8005894 <__ssputs_r+0x70>
 8005892:	463e      	mov	r6, r7
 8005894:	6820      	ldr	r0, [r4, #0]
 8005896:	4632      	mov	r2, r6
 8005898:	4641      	mov	r1, r8
 800589a:	f000 faab 	bl	8005df4 <memmove>
 800589e:	68a3      	ldr	r3, [r4, #8]
 80058a0:	1b9b      	subs	r3, r3, r6
 80058a2:	60a3      	str	r3, [r4, #8]
 80058a4:	6823      	ldr	r3, [r4, #0]
 80058a6:	4433      	add	r3, r6
 80058a8:	6023      	str	r3, [r4, #0]
 80058aa:	2000      	movs	r0, #0
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b0:	462a      	mov	r2, r5
 80058b2:	f000 fad7 	bl	8005e64 <_realloc_r>
 80058b6:	4606      	mov	r6, r0
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d1e0      	bne.n	800587e <__ssputs_r+0x5a>
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	4650      	mov	r0, sl
 80058c0:	f7ff feb8 	bl	8005634 <_free_r>
 80058c4:	230c      	movs	r3, #12
 80058c6:	f8ca 3000 	str.w	r3, [sl]
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295
 80058d6:	e7e9      	b.n	80058ac <__ssputs_r+0x88>

080058d8 <_svfiprintf_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	4698      	mov	r8, r3
 80058de:	898b      	ldrh	r3, [r1, #12]
 80058e0:	061b      	lsls	r3, r3, #24
 80058e2:	b09d      	sub	sp, #116	; 0x74
 80058e4:	4607      	mov	r7, r0
 80058e6:	460d      	mov	r5, r1
 80058e8:	4614      	mov	r4, r2
 80058ea:	d50e      	bpl.n	800590a <_svfiprintf_r+0x32>
 80058ec:	690b      	ldr	r3, [r1, #16]
 80058ee:	b963      	cbnz	r3, 800590a <_svfiprintf_r+0x32>
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	f7ff ff0b 	bl	800570c <_malloc_r>
 80058f6:	6028      	str	r0, [r5, #0]
 80058f8:	6128      	str	r0, [r5, #16]
 80058fa:	b920      	cbnz	r0, 8005906 <_svfiprintf_r+0x2e>
 80058fc:	230c      	movs	r3, #12
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	e0d0      	b.n	8005aa8 <_svfiprintf_r+0x1d0>
 8005906:	2340      	movs	r3, #64	; 0x40
 8005908:	616b      	str	r3, [r5, #20]
 800590a:	2300      	movs	r3, #0
 800590c:	9309      	str	r3, [sp, #36]	; 0x24
 800590e:	2320      	movs	r3, #32
 8005910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005914:	f8cd 800c 	str.w	r8, [sp, #12]
 8005918:	2330      	movs	r3, #48	; 0x30
 800591a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005ac0 <_svfiprintf_r+0x1e8>
 800591e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005922:	f04f 0901 	mov.w	r9, #1
 8005926:	4623      	mov	r3, r4
 8005928:	469a      	mov	sl, r3
 800592a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800592e:	b10a      	cbz	r2, 8005934 <_svfiprintf_r+0x5c>
 8005930:	2a25      	cmp	r2, #37	; 0x25
 8005932:	d1f9      	bne.n	8005928 <_svfiprintf_r+0x50>
 8005934:	ebba 0b04 	subs.w	fp, sl, r4
 8005938:	d00b      	beq.n	8005952 <_svfiprintf_r+0x7a>
 800593a:	465b      	mov	r3, fp
 800593c:	4622      	mov	r2, r4
 800593e:	4629      	mov	r1, r5
 8005940:	4638      	mov	r0, r7
 8005942:	f7ff ff6f 	bl	8005824 <__ssputs_r>
 8005946:	3001      	adds	r0, #1
 8005948:	f000 80a9 	beq.w	8005a9e <_svfiprintf_r+0x1c6>
 800594c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800594e:	445a      	add	r2, fp
 8005950:	9209      	str	r2, [sp, #36]	; 0x24
 8005952:	f89a 3000 	ldrb.w	r3, [sl]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 80a1 	beq.w	8005a9e <_svfiprintf_r+0x1c6>
 800595c:	2300      	movs	r3, #0
 800595e:	f04f 32ff 	mov.w	r2, #4294967295
 8005962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005966:	f10a 0a01 	add.w	sl, sl, #1
 800596a:	9304      	str	r3, [sp, #16]
 800596c:	9307      	str	r3, [sp, #28]
 800596e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005972:	931a      	str	r3, [sp, #104]	; 0x68
 8005974:	4654      	mov	r4, sl
 8005976:	2205      	movs	r2, #5
 8005978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800597c:	4850      	ldr	r0, [pc, #320]	; (8005ac0 <_svfiprintf_r+0x1e8>)
 800597e:	f7fa fc2f 	bl	80001e0 <memchr>
 8005982:	9a04      	ldr	r2, [sp, #16]
 8005984:	b9d8      	cbnz	r0, 80059be <_svfiprintf_r+0xe6>
 8005986:	06d0      	lsls	r0, r2, #27
 8005988:	bf44      	itt	mi
 800598a:	2320      	movmi	r3, #32
 800598c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005990:	0711      	lsls	r1, r2, #28
 8005992:	bf44      	itt	mi
 8005994:	232b      	movmi	r3, #43	; 0x2b
 8005996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800599a:	f89a 3000 	ldrb.w	r3, [sl]
 800599e:	2b2a      	cmp	r3, #42	; 0x2a
 80059a0:	d015      	beq.n	80059ce <_svfiprintf_r+0xf6>
 80059a2:	9a07      	ldr	r2, [sp, #28]
 80059a4:	4654      	mov	r4, sl
 80059a6:	2000      	movs	r0, #0
 80059a8:	f04f 0c0a 	mov.w	ip, #10
 80059ac:	4621      	mov	r1, r4
 80059ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059b2:	3b30      	subs	r3, #48	; 0x30
 80059b4:	2b09      	cmp	r3, #9
 80059b6:	d94d      	bls.n	8005a54 <_svfiprintf_r+0x17c>
 80059b8:	b1b0      	cbz	r0, 80059e8 <_svfiprintf_r+0x110>
 80059ba:	9207      	str	r2, [sp, #28]
 80059bc:	e014      	b.n	80059e8 <_svfiprintf_r+0x110>
 80059be:	eba0 0308 	sub.w	r3, r0, r8
 80059c2:	fa09 f303 	lsl.w	r3, r9, r3
 80059c6:	4313      	orrs	r3, r2
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	46a2      	mov	sl, r4
 80059cc:	e7d2      	b.n	8005974 <_svfiprintf_r+0x9c>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	1d19      	adds	r1, r3, #4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	9103      	str	r1, [sp, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	bfbb      	ittet	lt
 80059da:	425b      	neglt	r3, r3
 80059dc:	f042 0202 	orrlt.w	r2, r2, #2
 80059e0:	9307      	strge	r3, [sp, #28]
 80059e2:	9307      	strlt	r3, [sp, #28]
 80059e4:	bfb8      	it	lt
 80059e6:	9204      	strlt	r2, [sp, #16]
 80059e8:	7823      	ldrb	r3, [r4, #0]
 80059ea:	2b2e      	cmp	r3, #46	; 0x2e
 80059ec:	d10c      	bne.n	8005a08 <_svfiprintf_r+0x130>
 80059ee:	7863      	ldrb	r3, [r4, #1]
 80059f0:	2b2a      	cmp	r3, #42	; 0x2a
 80059f2:	d134      	bne.n	8005a5e <_svfiprintf_r+0x186>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	1d1a      	adds	r2, r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	9203      	str	r2, [sp, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bfb8      	it	lt
 8005a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a04:	3402      	adds	r4, #2
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005ad0 <_svfiprintf_r+0x1f8>
 8005a0c:	7821      	ldrb	r1, [r4, #0]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	4650      	mov	r0, sl
 8005a12:	f7fa fbe5 	bl	80001e0 <memchr>
 8005a16:	b138      	cbz	r0, 8005a28 <_svfiprintf_r+0x150>
 8005a18:	9b04      	ldr	r3, [sp, #16]
 8005a1a:	eba0 000a 	sub.w	r0, r0, sl
 8005a1e:	2240      	movs	r2, #64	; 0x40
 8005a20:	4082      	lsls	r2, r0
 8005a22:	4313      	orrs	r3, r2
 8005a24:	3401      	adds	r4, #1
 8005a26:	9304      	str	r3, [sp, #16]
 8005a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2c:	4825      	ldr	r0, [pc, #148]	; (8005ac4 <_svfiprintf_r+0x1ec>)
 8005a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a32:	2206      	movs	r2, #6
 8005a34:	f7fa fbd4 	bl	80001e0 <memchr>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d038      	beq.n	8005aae <_svfiprintf_r+0x1d6>
 8005a3c:	4b22      	ldr	r3, [pc, #136]	; (8005ac8 <_svfiprintf_r+0x1f0>)
 8005a3e:	bb1b      	cbnz	r3, 8005a88 <_svfiprintf_r+0x1b0>
 8005a40:	9b03      	ldr	r3, [sp, #12]
 8005a42:	3307      	adds	r3, #7
 8005a44:	f023 0307 	bic.w	r3, r3, #7
 8005a48:	3308      	adds	r3, #8
 8005a4a:	9303      	str	r3, [sp, #12]
 8005a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4e:	4433      	add	r3, r6
 8005a50:	9309      	str	r3, [sp, #36]	; 0x24
 8005a52:	e768      	b.n	8005926 <_svfiprintf_r+0x4e>
 8005a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a58:	460c      	mov	r4, r1
 8005a5a:	2001      	movs	r0, #1
 8005a5c:	e7a6      	b.n	80059ac <_svfiprintf_r+0xd4>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	3401      	adds	r4, #1
 8005a62:	9305      	str	r3, [sp, #20]
 8005a64:	4619      	mov	r1, r3
 8005a66:	f04f 0c0a 	mov.w	ip, #10
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a70:	3a30      	subs	r2, #48	; 0x30
 8005a72:	2a09      	cmp	r2, #9
 8005a74:	d903      	bls.n	8005a7e <_svfiprintf_r+0x1a6>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0c6      	beq.n	8005a08 <_svfiprintf_r+0x130>
 8005a7a:	9105      	str	r1, [sp, #20]
 8005a7c:	e7c4      	b.n	8005a08 <_svfiprintf_r+0x130>
 8005a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a82:	4604      	mov	r4, r0
 8005a84:	2301      	movs	r3, #1
 8005a86:	e7f0      	b.n	8005a6a <_svfiprintf_r+0x192>
 8005a88:	ab03      	add	r3, sp, #12
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <_svfiprintf_r+0x1f4>)
 8005a90:	a904      	add	r1, sp, #16
 8005a92:	4638      	mov	r0, r7
 8005a94:	f3af 8000 	nop.w
 8005a98:	1c42      	adds	r2, r0, #1
 8005a9a:	4606      	mov	r6, r0
 8005a9c:	d1d6      	bne.n	8005a4c <_svfiprintf_r+0x174>
 8005a9e:	89ab      	ldrh	r3, [r5, #12]
 8005aa0:	065b      	lsls	r3, r3, #25
 8005aa2:	f53f af2d 	bmi.w	8005900 <_svfiprintf_r+0x28>
 8005aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aa8:	b01d      	add	sp, #116	; 0x74
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	ab03      	add	r3, sp, #12
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <_svfiprintf_r+0x1f4>)
 8005ab6:	a904      	add	r1, sp, #16
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f000 f879 	bl	8005bb0 <_printf_i>
 8005abe:	e7eb      	b.n	8005a98 <_svfiprintf_r+0x1c0>
 8005ac0:	08006011 	.word	0x08006011
 8005ac4:	0800601b 	.word	0x0800601b
 8005ac8:	00000000 	.word	0x00000000
 8005acc:	08005825 	.word	0x08005825
 8005ad0:	08006017 	.word	0x08006017

08005ad4 <_printf_common>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	4616      	mov	r6, r2
 8005ada:	4699      	mov	r9, r3
 8005adc:	688a      	ldr	r2, [r1, #8]
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bfb8      	it	lt
 8005ae8:	4613      	movlt	r3, r2
 8005aea:	6033      	str	r3, [r6, #0]
 8005aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005af0:	4607      	mov	r7, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	b10a      	cbz	r2, 8005afa <_printf_common+0x26>
 8005af6:	3301      	adds	r3, #1
 8005af8:	6033      	str	r3, [r6, #0]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	0699      	lsls	r1, r3, #26
 8005afe:	bf42      	ittt	mi
 8005b00:	6833      	ldrmi	r3, [r6, #0]
 8005b02:	3302      	addmi	r3, #2
 8005b04:	6033      	strmi	r3, [r6, #0]
 8005b06:	6825      	ldr	r5, [r4, #0]
 8005b08:	f015 0506 	ands.w	r5, r5, #6
 8005b0c:	d106      	bne.n	8005b1c <_printf_common+0x48>
 8005b0e:	f104 0a19 	add.w	sl, r4, #25
 8005b12:	68e3      	ldr	r3, [r4, #12]
 8005b14:	6832      	ldr	r2, [r6, #0]
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dc26      	bgt.n	8005b6a <_printf_common+0x96>
 8005b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b20:	1e13      	subs	r3, r2, #0
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	bf18      	it	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	0692      	lsls	r2, r2, #26
 8005b2a:	d42b      	bmi.n	8005b84 <_printf_common+0xb0>
 8005b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b30:	4649      	mov	r1, r9
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d01e      	beq.n	8005b78 <_printf_common+0xa4>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	6922      	ldr	r2, [r4, #16]
 8005b3e:	f003 0306 	and.w	r3, r3, #6
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf02      	ittt	eq
 8005b46:	68e5      	ldreq	r5, [r4, #12]
 8005b48:	6833      	ldreq	r3, [r6, #0]
 8005b4a:	1aed      	subeq	r5, r5, r3
 8005b4c:	68a3      	ldr	r3, [r4, #8]
 8005b4e:	bf0c      	ite	eq
 8005b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b54:	2500      	movne	r5, #0
 8005b56:	4293      	cmp	r3, r2
 8005b58:	bfc4      	itt	gt
 8005b5a:	1a9b      	subgt	r3, r3, r2
 8005b5c:	18ed      	addgt	r5, r5, r3
 8005b5e:	2600      	movs	r6, #0
 8005b60:	341a      	adds	r4, #26
 8005b62:	42b5      	cmp	r5, r6
 8005b64:	d11a      	bne.n	8005b9c <_printf_common+0xc8>
 8005b66:	2000      	movs	r0, #0
 8005b68:	e008      	b.n	8005b7c <_printf_common+0xa8>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4638      	mov	r0, r7
 8005b72:	47c0      	blx	r8
 8005b74:	3001      	adds	r0, #1
 8005b76:	d103      	bne.n	8005b80 <_printf_common+0xac>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b80:	3501      	adds	r5, #1
 8005b82:	e7c6      	b.n	8005b12 <_printf_common+0x3e>
 8005b84:	18e1      	adds	r1, r4, r3
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	2030      	movs	r0, #48	; 0x30
 8005b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b8e:	4422      	add	r2, r4
 8005b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b98:	3302      	adds	r3, #2
 8005b9a:	e7c7      	b.n	8005b2c <_printf_common+0x58>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	47c0      	blx	r8
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d0e6      	beq.n	8005b78 <_printf_common+0xa4>
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7d9      	b.n	8005b62 <_printf_common+0x8e>
	...

08005bb0 <_printf_i>:
 8005bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	7e0f      	ldrb	r7, [r1, #24]
 8005bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bb8:	2f78      	cmp	r7, #120	; 0x78
 8005bba:	4691      	mov	r9, r2
 8005bbc:	4680      	mov	r8, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	469a      	mov	sl, r3
 8005bc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bc6:	d807      	bhi.n	8005bd8 <_printf_i+0x28>
 8005bc8:	2f62      	cmp	r7, #98	; 0x62
 8005bca:	d80a      	bhi.n	8005be2 <_printf_i+0x32>
 8005bcc:	2f00      	cmp	r7, #0
 8005bce:	f000 80d4 	beq.w	8005d7a <_printf_i+0x1ca>
 8005bd2:	2f58      	cmp	r7, #88	; 0x58
 8005bd4:	f000 80c0 	beq.w	8005d58 <_printf_i+0x1a8>
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005be0:	e03a      	b.n	8005c58 <_printf_i+0xa8>
 8005be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005be6:	2b15      	cmp	r3, #21
 8005be8:	d8f6      	bhi.n	8005bd8 <_printf_i+0x28>
 8005bea:	a101      	add	r1, pc, #4	; (adr r1, 8005bf0 <_printf_i+0x40>)
 8005bec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005c5d 	.word	0x08005c5d
 8005bf8:	08005bd9 	.word	0x08005bd9
 8005bfc:	08005bd9 	.word	0x08005bd9
 8005c00:	08005bd9 	.word	0x08005bd9
 8005c04:	08005bd9 	.word	0x08005bd9
 8005c08:	08005c5d 	.word	0x08005c5d
 8005c0c:	08005bd9 	.word	0x08005bd9
 8005c10:	08005bd9 	.word	0x08005bd9
 8005c14:	08005bd9 	.word	0x08005bd9
 8005c18:	08005bd9 	.word	0x08005bd9
 8005c1c:	08005d61 	.word	0x08005d61
 8005c20:	08005c89 	.word	0x08005c89
 8005c24:	08005d1b 	.word	0x08005d1b
 8005c28:	08005bd9 	.word	0x08005bd9
 8005c2c:	08005bd9 	.word	0x08005bd9
 8005c30:	08005d83 	.word	0x08005d83
 8005c34:	08005bd9 	.word	0x08005bd9
 8005c38:	08005c89 	.word	0x08005c89
 8005c3c:	08005bd9 	.word	0x08005bd9
 8005c40:	08005bd9 	.word	0x08005bd9
 8005c44:	08005d23 	.word	0x08005d23
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	602a      	str	r2, [r5, #0]
 8005c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e09f      	b.n	8005d9c <_printf_i+0x1ec>
 8005c5c:	6820      	ldr	r0, [r4, #0]
 8005c5e:	682b      	ldr	r3, [r5, #0]
 8005c60:	0607      	lsls	r7, r0, #24
 8005c62:	f103 0104 	add.w	r1, r3, #4
 8005c66:	6029      	str	r1, [r5, #0]
 8005c68:	d501      	bpl.n	8005c6e <_printf_i+0xbe>
 8005c6a:	681e      	ldr	r6, [r3, #0]
 8005c6c:	e003      	b.n	8005c76 <_printf_i+0xc6>
 8005c6e:	0646      	lsls	r6, r0, #25
 8005c70:	d5fb      	bpl.n	8005c6a <_printf_i+0xba>
 8005c72:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	da03      	bge.n	8005c82 <_printf_i+0xd2>
 8005c7a:	232d      	movs	r3, #45	; 0x2d
 8005c7c:	4276      	negs	r6, r6
 8005c7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c82:	485a      	ldr	r0, [pc, #360]	; (8005dec <_printf_i+0x23c>)
 8005c84:	230a      	movs	r3, #10
 8005c86:	e012      	b.n	8005cae <_printf_i+0xfe>
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	1d19      	adds	r1, r3, #4
 8005c8e:	6029      	str	r1, [r5, #0]
 8005c90:	0605      	lsls	r5, r0, #24
 8005c92:	d501      	bpl.n	8005c98 <_printf_i+0xe8>
 8005c94:	681e      	ldr	r6, [r3, #0]
 8005c96:	e002      	b.n	8005c9e <_printf_i+0xee>
 8005c98:	0641      	lsls	r1, r0, #25
 8005c9a:	d5fb      	bpl.n	8005c94 <_printf_i+0xe4>
 8005c9c:	881e      	ldrh	r6, [r3, #0]
 8005c9e:	4853      	ldr	r0, [pc, #332]	; (8005dec <_printf_i+0x23c>)
 8005ca0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2308      	moveq	r3, #8
 8005ca6:	230a      	movne	r3, #10
 8005ca8:	2100      	movs	r1, #0
 8005caa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cae:	6865      	ldr	r5, [r4, #4]
 8005cb0:	60a5      	str	r5, [r4, #8]
 8005cb2:	2d00      	cmp	r5, #0
 8005cb4:	bfa2      	ittt	ge
 8005cb6:	6821      	ldrge	r1, [r4, #0]
 8005cb8:	f021 0104 	bicge.w	r1, r1, #4
 8005cbc:	6021      	strge	r1, [r4, #0]
 8005cbe:	b90e      	cbnz	r6, 8005cc4 <_printf_i+0x114>
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	d04b      	beq.n	8005d5c <_printf_i+0x1ac>
 8005cc4:	4615      	mov	r5, r2
 8005cc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005cca:	fb03 6711 	mls	r7, r3, r1, r6
 8005cce:	5dc7      	ldrb	r7, [r0, r7]
 8005cd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cd4:	4637      	mov	r7, r6
 8005cd6:	42bb      	cmp	r3, r7
 8005cd8:	460e      	mov	r6, r1
 8005cda:	d9f4      	bls.n	8005cc6 <_printf_i+0x116>
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d10b      	bne.n	8005cf8 <_printf_i+0x148>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	07de      	lsls	r6, r3, #31
 8005ce4:	d508      	bpl.n	8005cf8 <_printf_i+0x148>
 8005ce6:	6923      	ldr	r3, [r4, #16]
 8005ce8:	6861      	ldr	r1, [r4, #4]
 8005cea:	4299      	cmp	r1, r3
 8005cec:	bfde      	ittt	le
 8005cee:	2330      	movle	r3, #48	; 0x30
 8005cf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005cf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cf8:	1b52      	subs	r2, r2, r5
 8005cfa:	6122      	str	r2, [r4, #16]
 8005cfc:	f8cd a000 	str.w	sl, [sp]
 8005d00:	464b      	mov	r3, r9
 8005d02:	aa03      	add	r2, sp, #12
 8005d04:	4621      	mov	r1, r4
 8005d06:	4640      	mov	r0, r8
 8005d08:	f7ff fee4 	bl	8005ad4 <_printf_common>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d14a      	bne.n	8005da6 <_printf_i+0x1f6>
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	b004      	add	sp, #16
 8005d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	f043 0320 	orr.w	r3, r3, #32
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	4833      	ldr	r0, [pc, #204]	; (8005df0 <_printf_i+0x240>)
 8005d24:	2778      	movs	r7, #120	; 0x78
 8005d26:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	6829      	ldr	r1, [r5, #0]
 8005d2e:	061f      	lsls	r7, r3, #24
 8005d30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d34:	d402      	bmi.n	8005d3c <_printf_i+0x18c>
 8005d36:	065f      	lsls	r7, r3, #25
 8005d38:	bf48      	it	mi
 8005d3a:	b2b6      	uxthmi	r6, r6
 8005d3c:	07df      	lsls	r7, r3, #31
 8005d3e:	bf48      	it	mi
 8005d40:	f043 0320 	orrmi.w	r3, r3, #32
 8005d44:	6029      	str	r1, [r5, #0]
 8005d46:	bf48      	it	mi
 8005d48:	6023      	strmi	r3, [r4, #0]
 8005d4a:	b91e      	cbnz	r6, 8005d54 <_printf_i+0x1a4>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	f023 0320 	bic.w	r3, r3, #32
 8005d52:	6023      	str	r3, [r4, #0]
 8005d54:	2310      	movs	r3, #16
 8005d56:	e7a7      	b.n	8005ca8 <_printf_i+0xf8>
 8005d58:	4824      	ldr	r0, [pc, #144]	; (8005dec <_printf_i+0x23c>)
 8005d5a:	e7e4      	b.n	8005d26 <_printf_i+0x176>
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	e7bd      	b.n	8005cdc <_printf_i+0x12c>
 8005d60:	682b      	ldr	r3, [r5, #0]
 8005d62:	6826      	ldr	r6, [r4, #0]
 8005d64:	6961      	ldr	r1, [r4, #20]
 8005d66:	1d18      	adds	r0, r3, #4
 8005d68:	6028      	str	r0, [r5, #0]
 8005d6a:	0635      	lsls	r5, r6, #24
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	d501      	bpl.n	8005d74 <_printf_i+0x1c4>
 8005d70:	6019      	str	r1, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <_printf_i+0x1ca>
 8005d74:	0670      	lsls	r0, r6, #25
 8005d76:	d5fb      	bpl.n	8005d70 <_printf_i+0x1c0>
 8005d78:	8019      	strh	r1, [r3, #0]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	4615      	mov	r5, r2
 8005d80:	e7bc      	b.n	8005cfc <_printf_i+0x14c>
 8005d82:	682b      	ldr	r3, [r5, #0]
 8005d84:	1d1a      	adds	r2, r3, #4
 8005d86:	602a      	str	r2, [r5, #0]
 8005d88:	681d      	ldr	r5, [r3, #0]
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f7fa fa26 	bl	80001e0 <memchr>
 8005d94:	b108      	cbz	r0, 8005d9a <_printf_i+0x1ea>
 8005d96:	1b40      	subs	r0, r0, r5
 8005d98:	6060      	str	r0, [r4, #4]
 8005d9a:	6863      	ldr	r3, [r4, #4]
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da4:	e7aa      	b.n	8005cfc <_printf_i+0x14c>
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	462a      	mov	r2, r5
 8005daa:	4649      	mov	r1, r9
 8005dac:	4640      	mov	r0, r8
 8005dae:	47d0      	blx	sl
 8005db0:	3001      	adds	r0, #1
 8005db2:	d0ad      	beq.n	8005d10 <_printf_i+0x160>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	079b      	lsls	r3, r3, #30
 8005db8:	d413      	bmi.n	8005de2 <_printf_i+0x232>
 8005dba:	68e0      	ldr	r0, [r4, #12]
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	4298      	cmp	r0, r3
 8005dc0:	bfb8      	it	lt
 8005dc2:	4618      	movlt	r0, r3
 8005dc4:	e7a6      	b.n	8005d14 <_printf_i+0x164>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	4632      	mov	r2, r6
 8005dca:	4649      	mov	r1, r9
 8005dcc:	4640      	mov	r0, r8
 8005dce:	47d0      	blx	sl
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d09d      	beq.n	8005d10 <_printf_i+0x160>
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	68e3      	ldr	r3, [r4, #12]
 8005dd8:	9903      	ldr	r1, [sp, #12]
 8005dda:	1a5b      	subs	r3, r3, r1
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	dcf2      	bgt.n	8005dc6 <_printf_i+0x216>
 8005de0:	e7eb      	b.n	8005dba <_printf_i+0x20a>
 8005de2:	2500      	movs	r5, #0
 8005de4:	f104 0619 	add.w	r6, r4, #25
 8005de8:	e7f5      	b.n	8005dd6 <_printf_i+0x226>
 8005dea:	bf00      	nop
 8005dec:	08006022 	.word	0x08006022
 8005df0:	08006033 	.word	0x08006033

08005df4 <memmove>:
 8005df4:	4288      	cmp	r0, r1
 8005df6:	b510      	push	{r4, lr}
 8005df8:	eb01 0402 	add.w	r4, r1, r2
 8005dfc:	d902      	bls.n	8005e04 <memmove+0x10>
 8005dfe:	4284      	cmp	r4, r0
 8005e00:	4623      	mov	r3, r4
 8005e02:	d807      	bhi.n	8005e14 <memmove+0x20>
 8005e04:	1e43      	subs	r3, r0, #1
 8005e06:	42a1      	cmp	r1, r4
 8005e08:	d008      	beq.n	8005e1c <memmove+0x28>
 8005e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e12:	e7f8      	b.n	8005e06 <memmove+0x12>
 8005e14:	4402      	add	r2, r0
 8005e16:	4601      	mov	r1, r0
 8005e18:	428a      	cmp	r2, r1
 8005e1a:	d100      	bne.n	8005e1e <memmove+0x2a>
 8005e1c:	bd10      	pop	{r4, pc}
 8005e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e26:	e7f7      	b.n	8005e18 <memmove+0x24>

08005e28 <_sbrk_r>:
 8005e28:	b538      	push	{r3, r4, r5, lr}
 8005e2a:	4d06      	ldr	r5, [pc, #24]	; (8005e44 <_sbrk_r+0x1c>)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	4604      	mov	r4, r0
 8005e30:	4608      	mov	r0, r1
 8005e32:	602b      	str	r3, [r5, #0]
 8005e34:	f7fb fcb4 	bl	80017a0 <_sbrk>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	d102      	bne.n	8005e42 <_sbrk_r+0x1a>
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	b103      	cbz	r3, 8005e42 <_sbrk_r+0x1a>
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
 8005e44:	20000508 	.word	0x20000508

08005e48 <memcpy>:
 8005e48:	440a      	add	r2, r1
 8005e4a:	4291      	cmp	r1, r2
 8005e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e50:	d100      	bne.n	8005e54 <memcpy+0xc>
 8005e52:	4770      	bx	lr
 8005e54:	b510      	push	{r4, lr}
 8005e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5e:	4291      	cmp	r1, r2
 8005e60:	d1f9      	bne.n	8005e56 <memcpy+0xe>
 8005e62:	bd10      	pop	{r4, pc}

08005e64 <_realloc_r>:
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e68:	4680      	mov	r8, r0
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	b921      	cbnz	r1, 8005e7a <_realloc_r+0x16>
 8005e70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	4611      	mov	r1, r2
 8005e76:	f7ff bc49 	b.w	800570c <_malloc_r>
 8005e7a:	b92a      	cbnz	r2, 8005e88 <_realloc_r+0x24>
 8005e7c:	f7ff fbda 	bl	8005634 <_free_r>
 8005e80:	4625      	mov	r5, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e88:	f000 f81b 	bl	8005ec2 <_malloc_usable_size_r>
 8005e8c:	4284      	cmp	r4, r0
 8005e8e:	4607      	mov	r7, r0
 8005e90:	d802      	bhi.n	8005e98 <_realloc_r+0x34>
 8005e92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e96:	d812      	bhi.n	8005ebe <_realloc_r+0x5a>
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f7ff fc36 	bl	800570c <_malloc_r>
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0ed      	beq.n	8005e82 <_realloc_r+0x1e>
 8005ea6:	42bc      	cmp	r4, r7
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4631      	mov	r1, r6
 8005eac:	bf28      	it	cs
 8005eae:	463a      	movcs	r2, r7
 8005eb0:	f7ff ffca 	bl	8005e48 <memcpy>
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4640      	mov	r0, r8
 8005eb8:	f7ff fbbc 	bl	8005634 <_free_r>
 8005ebc:	e7e1      	b.n	8005e82 <_realloc_r+0x1e>
 8005ebe:	4635      	mov	r5, r6
 8005ec0:	e7df      	b.n	8005e82 <_realloc_r+0x1e>

08005ec2 <_malloc_usable_size_r>:
 8005ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec6:	1f18      	subs	r0, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	bfbc      	itt	lt
 8005ecc:	580b      	ldrlt	r3, [r1, r0]
 8005ece:	18c0      	addlt	r0, r0, r3
 8005ed0:	4770      	bx	lr
	...

08005ed4 <_init>:
 8005ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed6:	bf00      	nop
 8005ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eda:	bc08      	pop	{r3}
 8005edc:	469e      	mov	lr, r3
 8005ede:	4770      	bx	lr

08005ee0 <_fini>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr
