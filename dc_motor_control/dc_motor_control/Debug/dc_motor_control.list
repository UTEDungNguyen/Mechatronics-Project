
dc_motor_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000005c  08006068  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  08006068  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d66d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d9d  00000000  00000000  0002d73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e9  00000000  00000000  00030178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d18  00000000  00000000  00030b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7ea  00000000  00000000  00032879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d7f4  00000000  00000000  00041063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a9c  00000000  00000000  000ce858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d22f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e88 	.word	0x08005e88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005e88 	.word	0x08005e88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if (interrupt_timer_state == RUNNING_INTERRUPT_TIMER_STATUS)
 8000584:	4b19      	ldr	r3, [pc, #100]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d12b      	bne.n	80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>
  {
    if (otherwise_state == START_OTHERWISE_STATUS)
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d112      	bne.n	80005ba <HAL_TIM_PeriodElapsedCallback+0x3e>
    {
      classify_state = classify_state == LEFT_CLASSIFY_STATE ? RIGHT_CLASSIFY_STATE : LEFT_CLASSIFY_STATE;
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d101      	bne.n	80005a0 <HAL_TIM_PeriodElapsedCallback+0x24>
 800059c:	2201      	movs	r2, #1
 800059e:	e000      	b.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80005a0:	2202      	movs	r2, #2
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005a4:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = START_INTERRUPT_TIMER_STATUS;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005a8:	2202      	movs	r2, #2
 80005aa:	701a      	strb	r2, [r3, #0]
      otherwise_state = STOP_OTHERWISE_STATUS;
 80005ac:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim3);
 80005b2:	4811      	ldr	r0, [pc, #68]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005b4:	f002 fd6e 	bl	8003094 <HAL_TIM_Base_Stop_IT>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80005b8:	e014      	b.n	80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>
      run_classify = STOP_CLASSIFY_STATE;
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
      classify_state = ORIGINAL_CLASSIFY_STATE;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = STOP_INTERRUPT_TIMER_STATUS;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
      otherwise_state = START_OTHERWISE_STATUS;
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
      HAL_TIM_Base_Stop_IT(&htim3);
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005d4:	f002 fd5e 	bl	8003094 <HAL_TIM_Base_Stop_IT>
      HAL_UART_Transmit(&huart2, (uint8_t *)"F", 1, 100);
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	2201      	movs	r2, #1
 80005dc:	4908      	ldr	r1, [pc, #32]	; (8000600 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80005de:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80005e0:	f003 fd37 	bl	8004052 <HAL_UART_Transmit>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200003b4 	.word	0x200003b4
 80005f0:	200003b5 	.word	0x200003b5
 80005f4:	200003b3 	.word	0x200003b3
 80005f8:	20000108 	.word	0x20000108
 80005fc:	200003b6 	.word	0x200003b6
 8000600:	08005ea0 	.word	0x08005ea0
 8000604:	200001dc 	.word	0x200001dc

08000608 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	807b      	strh	r3, [r7, #2]
  if (huart->Instance == USART1)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a70      	ldr	r2, [pc, #448]	; (80007dc <HAL_UARTEx_RxEventCallback+0x1d4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d176      	bne.n	800070c <HAL_UARTEx_RxEventCallback+0x104>
  {
    state_change = UART_VARIABLE_RX_STATUS_OK;
 800061e:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000620:	2200      	movs	r2, #0
 8000622:	801a      	strh	r2, [r3, #0]
    switch (rxbuf[0])
 8000624:	4b6f      	ldr	r3, [pc, #444]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3b4c      	subs	r3, #76	; 0x4c
 800062a:	2b07      	cmp	r3, #7
 800062c:	d852      	bhi.n	80006d4 <HAL_UARTEx_RxEventCallback+0xcc>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <HAL_UARTEx_RxEventCallback+0x2c>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000665 	.word	0x08000665
 8000638:	080006d5 	.word	0x080006d5
 800063c:	080006d5 	.word	0x080006d5
 8000640:	080006d5 	.word	0x080006d5
 8000644:	0800065d 	.word	0x0800065d
 8000648:	080006d5 	.word	0x080006d5
 800064c:	0800069d 	.word	0x0800069d
 8000650:	08000655 	.word	0x08000655
    {
    case 'S':
    {
      state = START_MOTOR_STATE;
 8000654:	4b64      	ldr	r3, [pc, #400]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
      break;
 800065a:	e03b      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'P':
    {
      state = STOP_MOTOR_STATE;
 800065c:	4b62      	ldr	r3, [pc, #392]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
      break;
 8000662:	e037      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'L':
    {
      state = MOTOR_LEFT_STATE;
 8000664:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8000666:	2202      	movs	r2, #2
 8000668:	701a      	strb	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 800066a:	2301      	movs	r3, #1
 800066c:	61fb      	str	r3, [r7, #28]
 800066e:	e00a      	b.n	8000686 <HAL_UARTEx_RxEventCallback+0x7e>
      {
        data_pwm[b - 1] = rxbuf[b];
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	3b01      	subs	r3, #1
 8000674:	495b      	ldr	r1, [pc, #364]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8000676:	69fa      	ldr	r2, [r7, #28]
 8000678:	440a      	add	r2, r1
 800067a:	7811      	ldrb	r1, [r2, #0]
 800067c:	4a5b      	ldr	r2, [pc, #364]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 800067e:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	3301      	adds	r3, #1
 8000684:	61fb      	str	r3, [r7, #28]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	2b02      	cmp	r3, #2
 800068a:	ddf1      	ble.n	8000670 <HAL_UARTEx_RxEventCallback+0x68>
      }
      pwm_t = atoi(data_pwm);
 800068c:	4857      	ldr	r0, [pc, #348]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 800068e:	f004 fec7 	bl	8005420 <atoi>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b56      	ldr	r3, [pc, #344]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000698:	801a      	strh	r2, [r3, #0]
      break;
 800069a:	e01b      	b.n	80006d4 <HAL_UARTEx_RxEventCallback+0xcc>
    }
    case 'R':
    {
      state = MOTOR_RIGHT_STATE;
 800069c:	4b52      	ldr	r3, [pc, #328]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800069e:	2203      	movs	r2, #3
 80006a0:	701a      	strb	r2, [r3, #0]
      for (int b = 1; b <= 2; b++)
 80006a2:	2301      	movs	r3, #1
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e00a      	b.n	80006be <HAL_UARTEx_RxEventCallback+0xb6>
      {
        data_pwm[b - 1] = rxbuf[b];
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	494d      	ldr	r1, [pc, #308]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	440a      	add	r2, r1
 80006b2:	7811      	ldrb	r1, [r2, #0]
 80006b4:	4a4d      	ldr	r2, [pc, #308]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006b6:	54d1      	strb	r1, [r2, r3]
      for (int b = 1; b <= 2; b++)
 80006b8:	69bb      	ldr	r3, [r7, #24]
 80006ba:	3301      	adds	r3, #1
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	ddf1      	ble.n	80006a8 <HAL_UARTEx_RxEventCallback+0xa0>
      }
      pwm_t = atoi(data_pwm);
 80006c4:	4849      	ldr	r0, [pc, #292]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006c6:	f004 feab 	bl	8005420 <atoi>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80006d0:	801a      	strh	r2, [r3, #0]
      break;
 80006d2:	bf00      	nop
    }
    }
    /* Clear the rxbuf */
    for (uint8_t i = 0U; i < Size; i++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	75fb      	strb	r3, [r7, #23]
 80006d8:	e006      	b.n	80006e8 <HAL_UARTEx_RxEventCallback+0xe0>
    {
      rxbuf[i] = '\0';
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	4a41      	ldr	r2, [pc, #260]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006de:	2100      	movs	r1, #0
 80006e0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 80006e2:	7dfb      	ldrb	r3, [r7, #23]
 80006e4:	3301      	adds	r3, #1
 80006e6:	75fb      	strb	r3, [r7, #23]
 80006e8:	7dfb      	ldrb	r3, [r7, #23]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	887a      	ldrh	r2, [r7, #2]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d8f3      	bhi.n	80006da <HAL_UARTEx_RxEventCallback+0xd2>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) rxbuf, RXBUF_SIZE);
 80006f2:	2208      	movs	r2, #8
 80006f4:	493b      	ldr	r1, [pc, #236]	; (80007e4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006f6:	483f      	ldr	r0, [pc, #252]	; (80007f4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80006f8:	f003 fd3d 	bl	8004176 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006fc:	4b3e      	ldr	r3, [pc, #248]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f022 0208 	bic.w	r2, r2, #8
 800070a:	601a      	str	r2, [r3, #0]
  }

  if (huart->Instance == USART2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a3a      	ldr	r2, [pc, #232]	; (80007fc <HAL_UARTEx_RxEventCallback+0x1f4>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d15e      	bne.n	80007d4 <HAL_UARTEx_RxEventCallback+0x1cc>
  {
    for (int b = 0; b < Size; b++)
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	e00b      	b.n	8000734 <HAL_UARTEx_RxEventCallback+0x12c>
    {
      data_pwm[b] = rxbuf_2[b];
 800071c:	4a38      	ldr	r2, [pc, #224]	; (8000800 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	4413      	add	r3, r2
 8000722:	7819      	ldrb	r1, [r3, #0]
 8000724:	4a31      	ldr	r2, [pc, #196]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	4413      	add	r3, r2
 800072a:	460a      	mov	r2, r1
 800072c:	701a      	strb	r2, [r3, #0]
    for (int b = 0; b < Size; b++)
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	3301      	adds	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	887b      	ldrh	r3, [r7, #2]
 8000736:	693a      	ldr	r2, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbef      	blt.n	800071c <HAL_UARTEx_RxEventCallback+0x114>
    }

    if (data_pwm[0] != 'L' && data_pwm[0] != 'R')
 800073c:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b4c      	cmp	r3, #76	; 0x4c
 8000742:	d010      	beq.n	8000766 <HAL_UARTEx_RxEventCallback+0x15e>
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b52      	cmp	r3, #82	; 0x52
 800074a:	d00c      	beq.n	8000766 <HAL_UARTEx_RxEventCallback+0x15e>
    {
      state = MOTOR_LEFT_STATE;
 800074c:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800074e:	2202      	movs	r2, #2
 8000750:	701a      	strb	r2, [r3, #0]
      state_change = UART_VARIABLE_RX_STATUS_OK;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8000754:	2200      	movs	r2, #0
 8000756:	801a      	strh	r2, [r3, #0]
      pwm_t = atoi(data_pwm);
 8000758:	4824      	ldr	r0, [pc, #144]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 800075a:	f004 fe61 	bl	8005420 <atoi>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000764:	801a      	strh	r2, [r3, #0]
    }

    if (data_pwm[0] == 'L' || data_pwm[0] == 'R')
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b4c      	cmp	r3, #76	; 0x4c
 800076c:	d003      	beq.n	8000776 <HAL_UARTEx_RxEventCallback+0x16e>
 800076e:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b52      	cmp	r3, #82	; 0x52
 8000774:	d10e      	bne.n	8000794 <HAL_UARTEx_RxEventCallback+0x18c>
    {
      run_classify = START_CLASSIFY_STATE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
      interrupt_timer_state = START_INTERRUPT_TIMER_STATUS;
 800077c:	4b22      	ldr	r3, [pc, #136]	; (8000808 <HAL_UARTEx_RxEventCallback+0x200>)
 800077e:	2202      	movs	r2, #2
 8000780:	701a      	strb	r2, [r3, #0]
      classify_state = data_pwm[0] == 'L' ? LEFT_CLASSIFY_STATE : RIGHT_CLASSIFY_STATE;
 8000782:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b4c      	cmp	r3, #76	; 0x4c
 8000788:	d101      	bne.n	800078e <HAL_UARTEx_RxEventCallback+0x186>
 800078a:	2202      	movs	r2, #2
 800078c:	e000      	b.n	8000790 <HAL_UARTEx_RxEventCallback+0x188>
 800078e:	2201      	movs	r2, #1
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <HAL_UARTEx_RxEventCallback+0x204>)
 8000792:	701a      	strb	r2, [r3, #0]
    }

    for (uint8_t i = 0U; i < Size; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e00a      	b.n	80007b0 <HAL_UARTEx_RxEventCallback+0x1a8>
    {
      data_pwm[i] = '\0';
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	4a13      	ldr	r2, [pc, #76]	; (80007ec <HAL_UARTEx_RxEventCallback+0x1e4>)
 800079e:	2100      	movs	r1, #0
 80007a0:	54d1      	strb	r1, [r2, r3]
      rxbuf_2[i] = '\0';
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80007a6:	2100      	movs	r1, #0
 80007a8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0U; i < Size; i++)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	3301      	adds	r3, #1
 80007ae:	73fb      	strb	r3, [r7, #15]
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	887a      	ldrh	r2, [r7, #2]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d8ef      	bhi.n	800079a <HAL_UARTEx_RxEventCallback+0x192>
    }
    /* start the DMA again */
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rxbuf_2, RXBUF_SIZE);
 80007ba:	2208      	movs	r2, #8
 80007bc:	4910      	ldr	r1, [pc, #64]	; (8000800 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80007be:	4814      	ldr	r0, [pc, #80]	; (8000810 <HAL_UARTEx_RxEventCallback+0x208>)
 80007c0:	f003 fcd9 	bl	8004176 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_UARTEx_RxEventCallback+0x20c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_UARTEx_RxEventCallback+0x20c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0208 	bic.w	r2, r2, #8
 80007d2:	601a      	str	r2, [r3, #0]
  }
}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40011000 	.word	0x40011000
 80007e0:	200003b8 	.word	0x200003b8
 80007e4:	200003a0 	.word	0x200003a0
 80007e8:	200003b2 	.word	0x200003b2
 80007ec:	200003bc 	.word	0x200003bc
 80007f0:	200003b0 	.word	0x200003b0
 80007f4:	20000198 	.word	0x20000198
 80007f8:	20000220 	.word	0x20000220
 80007fc:	40004400 	.word	0x40004400
 8000800:	200003a8 	.word	0x200003a8
 8000804:	200003b6 	.word	0x200003b6
 8000808:	200003b4 	.word	0x200003b4
 800080c:	200003b3 	.word	0x200003b3
 8000810:	200001dc 	.word	0x200001dc
 8000814:	200002e0 	.word	0x200002e0

08000818 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f001 f80c 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f8a4 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 fbb6 	bl	8000f94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000828:	f000 fb6e 	bl	8000f08 <MX_DMA_Init>
  MX_TIM1_Init();
 800082c:	f000 f8fe 	bl	8000a2c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000830:	f000 fb16 	bl	8000e60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000834:	f000 f9a6 	bl	8000b84 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000838:	f000 fb3c 	bl	8000eb4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800083c:	f000 fa2c 	bl	8000c98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000840:	f000 fa78 	bl	8000d34 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxbuf, RXBUF_SIZE);
 8000844:	2208      	movs	r2, #8
 8000846:	4939      	ldr	r1, [pc, #228]	; (800092c <main+0x114>)
 8000848:	4839      	ldr	r0, [pc, #228]	; (8000930 <main+0x118>)
 800084a:	f003 fc94 	bl	8004176 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800084e:	4b39      	ldr	r3, [pc, #228]	; (8000934 <main+0x11c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <main+0x11c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f022 0208 	bic.w	r2, r2, #8
 800085c:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxbuf_2, RXBUF_SIZE);
 800085e:	2208      	movs	r2, #8
 8000860:	4935      	ldr	r1, [pc, #212]	; (8000938 <main+0x120>)
 8000862:	4836      	ldr	r0, [pc, #216]	; (800093c <main+0x124>)
 8000864:	f003 fc87 	bl	8004176 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000868:	4b35      	ldr	r3, [pc, #212]	; (8000940 <main+0x128>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b34      	ldr	r3, [pc, #208]	; (8000940 <main+0x128>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f022 0208 	bic.w	r2, r2, #8
 8000876:	601a      	str	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000878:	2100      	movs	r1, #0
 800087a:	4832      	ldr	r0, [pc, #200]	; (8000944 <main+0x12c>)
 800087c:	f002 fc92 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000880:	210c      	movs	r1, #12
 8000882:	4830      	ldr	r0, [pc, #192]	; (8000944 <main+0x12c>)
 8000884:	f002 fc8e 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000888:	2104      	movs	r1, #4
 800088a:	482f      	ldr	r0, [pc, #188]	; (8000948 <main+0x130>)
 800088c:	f002 fc8a 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000890:	2100      	movs	r1, #0
 8000892:	482d      	ldr	r0, [pc, #180]	; (8000948 <main+0x130>)
 8000894:	f002 fc86 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000898:	2108      	movs	r1, #8
 800089a:	482b      	ldr	r0, [pc, #172]	; (8000948 <main+0x130>)
 800089c:	f002 fc82 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008a0:	2100      	movs	r1, #0
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <main+0x134>)
 80008a4:	f002 fc7e 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80008a8:	2104      	movs	r1, #4
 80008aa:	4828      	ldr	r0, [pc, #160]	; (800094c <main+0x134>)
 80008ac:	f002 fc7a 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80008b0:	2108      	movs	r1, #8
 80008b2:	4826      	ldr	r0, [pc, #152]	; (800094c <main+0x134>)
 80008b4:	f002 fc76 	bl	80031a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80008b8:	210c      	movs	r1, #12
 80008ba:	4824      	ldr	r0, [pc, #144]	; (800094c <main+0x134>)
 80008bc:	f002 fc72 	bl	80031a4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (conveyor_control(state, pwm_t) != CONVEYOR_STATUS_OK)
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <main+0x138>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4a23      	ldr	r2, [pc, #140]	; (8000954 <main+0x13c>)
 80008c6:	8812      	ldrh	r2, [r2, #0]
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fbbd 	bl	800104c <conveyor_control>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <main+0xc4>
    {
      Error_Handler();
 80008d8:	f000 fc3a 	bl	8001150 <Error_Handler>
    }

    if (state_change == UART_TRANSMIT_STATUS_OK)
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <main+0x140>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d109      	bne.n	80008f8 <main+0xe0>
    {
      if (uart_transmit() != UART_TRANSMIT_STATUS_OK)
 80008e4:	f000 fb98 	bl	8001018 <uart_transmit>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <main+0xda>
      {
        Error_Handler();
 80008ee:	f000 fc2f 	bl	8001150 <Error_Handler>
      }
      state_change = UART_VARIABLE_RX_STATUS_DONE;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <main+0x140>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	801a      	strh	r2, [r3, #0]
    }

    if (run_classify == START_CLASSIFY_STATE)
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <main+0x144>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d109      	bne.n	8000914 <main+0xfc>
    {
      if (interrupt_timer_state == START_INTERRUPT_TIMER_STATUS)
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <main+0x148>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d105      	bne.n	8000914 <main+0xfc>
      {
        HAL_TIM_Base_Start_IT(&htim3);
 8000908:	4816      	ldr	r0, [pc, #88]	; (8000964 <main+0x14c>)
 800090a:	f002 fb61 	bl	8002fd0 <HAL_TIM_Base_Start_IT>
        interrupt_timer_state = RUNNING_INTERRUPT_TIMER_STATUS;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <main+0x148>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
      }
      // run_classify = STOP_CLASSIFY_STATE;
    }

    if (classify_control(classify_state, CLASSIFY_PWM_T) != CLASSIFY_STATUS_OK)
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <main+0x150>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2132      	movs	r1, #50	; 0x32
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fbe0 	bl	80010e0 <classify_control>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0cc      	beq.n	80008c0 <main+0xa8>
    {
      Error_Handler();
 8000926:	f000 fc13 	bl	8001150 <Error_Handler>
    if (conveyor_control(state, pwm_t) != CONVEYOR_STATUS_OK)
 800092a:	e7c9      	b.n	80008c0 <main+0xa8>
 800092c:	200003a0 	.word	0x200003a0
 8000930:	20000198 	.word	0x20000198
 8000934:	20000220 	.word	0x20000220
 8000938:	200003a8 	.word	0x200003a8
 800093c:	200001dc 	.word	0x200001dc
 8000940:	200002e0 	.word	0x200002e0
 8000944:	20000078 	.word	0x20000078
 8000948:	200000c0 	.word	0x200000c0
 800094c:	20000150 	.word	0x20000150
 8000950:	200003b2 	.word	0x200003b2
 8000954:	200003b0 	.word	0x200003b0
 8000958:	200003b8 	.word	0x200003b8
 800095c:	200003b6 	.word	0x200003b6
 8000960:	200003b4 	.word	0x200003b4
 8000964:	20000108 	.word	0x20000108
 8000968:	200003b3 	.word	0x200003b3

0800096c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f004 fe00 	bl	8005580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b23      	ldr	r3, [pc, #140]	; (8000a24 <SystemClock_Config+0xb8>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <SystemClock_Config+0xb8>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <SystemClock_Config+0xb8>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <SystemClock_Config+0xbc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009b8:	4a1b      	ldr	r2, [pc, #108]	; (8000a28 <SystemClock_Config+0xbc>)
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <SystemClock_Config+0xbc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009dc:	f107 0320 	add.w	r3, r7, #32
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fe4d 	bl	8002680 <HAL_RCC_OscConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009ec:	f000 fbb0 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 80009f0:	230f      	movs	r3, #15
 80009f2:	60fb      	str	r3, [r7, #12]
    RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f002 f8b0 	bl	8002b70 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a16:	f000 fb9b 	bl	8001150 <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	; 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
 8000a5a:	615a      	str	r2, [r3, #20]
 8000a5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2220      	movs	r2, #32
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 fd8b 	bl	8005580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a6a:	4b44      	ldr	r3, [pc, #272]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a6c:	4a44      	ldr	r2, [pc, #272]	; (8000b80 <MX_TIM1_Init+0x154>)
 8000a6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000a70:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a72:	229f      	movs	r2, #159	; 0x9f
 8000a74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000a7c:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a7e:	2263      	movs	r2, #99	; 0x63
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b3e      	ldr	r3, [pc, #248]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a88:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a94:	4839      	ldr	r0, [pc, #228]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000a96:	f002 fa4b 	bl	8002f30 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000aa0:	f000 fb56 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4832      	ldr	r0, [pc, #200]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000ab2:	f002 fdf1 	bl	8003698 <HAL_TIM_ConfigClockSource>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000abc:	f000 fb48 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ac0:	482e      	ldr	r0, [pc, #184]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000ac2:	f002 fb16 	bl	80030f2 <HAL_TIM_PWM_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000acc:	f000 fb40 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000adc:	4619      	mov	r1, r3
 8000ade:	4827      	ldr	r0, [pc, #156]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000ae0:	f003 f996 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000aea:	f000 fb31 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	481a      	ldr	r0, [pc, #104]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b14:	f002 fcfe 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b1e:	f000 fb17 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b26:	220c      	movs	r2, #12
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4814      	ldr	r0, [pc, #80]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b2c:	f002 fcf2 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000b36:	f000 fb0b 	bl	8001150 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b5e:	f003 f9c5 	bl	8003eec <HAL_TIMEx_ConfigBreakDeadTime>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b68:	f000 faf2 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_TIM1_Init+0x150>)
 8000b6e:	f000 fb85 	bl	800127c <HAL_TIM_MspPostInit>
}
 8000b72:	bf00      	nop
 8000b74:	3758      	adds	r7, #88	; 0x58
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000078 	.word	0x20000078
 8000b80:	40010000 	.word	0x40010000

08000b84 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b98:	f107 0320 	add.w	r3, r7, #32
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	615a      	str	r2, [r3, #20]
 8000bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000bbc:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bbe:	229f      	movs	r2, #159	; 0x9f
 8000bc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc2:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bca:	2263      	movs	r2, #99	; 0x63
 8000bcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bce:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bda:	482e      	ldr	r0, [pc, #184]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bdc:	f002 f9a8 	bl	8002f30 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000be6:	f000 fab3 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4827      	ldr	r0, [pc, #156]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000bf8:	f002 fd4e 	bl	8003698 <HAL_TIM_ConfigClockSource>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c02:	f000 faa5 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c06:	4823      	ldr	r0, [pc, #140]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000c08:	f002 fa73 	bl	80030f2 <HAL_TIM_PWM_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000c12:	f000 fa9d 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1e:	f107 0320 	add.w	r3, r7, #32
 8000c22:	4619      	mov	r1, r3
 8000c24:	481b      	ldr	r0, [pc, #108]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000c26:	f003 f8f3 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000c30:	f000 fa8e 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c34:	2360      	movs	r3, #96	; 0x60
 8000c36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000c4c:	f002 fc62 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c56:	f000 fa7b 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000c62:	f002 fc57 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8000c6c:	f000 fa70 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2208      	movs	r2, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000c78:	f002 fc4c 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8000c82:	f000 fa65 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM2_Init+0x110>)
 8000c88:	f000 faf8 	bl	800127c <HAL_TIM_MspPostInit>
}
 8000c8c:	bf00      	nop
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000c0 	.word	0x200000c0

08000c98 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MX_TIM3_Init+0x98>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cbc:	f240 623f 	movw	r2, #1599	; 0x63f
 8000cc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2999;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cca:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000cce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cdc:	4813      	ldr	r0, [pc, #76]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cde:	f002 f927 	bl	8002f30 <HAL_TIM_Base_Init>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ce8:	f000 fa32 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000cfa:	f002 fccd 	bl	8003698 <HAL_TIM_ConfigClockSource>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d04:	f000 fa24 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_TIM3_Init+0x94>)
 8000d16:	f003 f87b 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f000 fa16 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000108 	.word	0x20000108
 8000d30:	40000400 	.word	0x40000400

08000d34 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	; 0x38
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
 8000d60:	615a      	str	r2, [r3, #20]
 8000d62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d66:	4a3d      	ldr	r2, [pc, #244]	; (8000e5c <MX_TIM4_Init+0x128>)
 8000d68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d6c:	229f      	movs	r2, #159	; 0x9f
 8000d6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d70:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8000d76:	4b38      	ldr	r3, [pc, #224]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d78:	2263      	movs	r2, #99	; 0x63
 8000d7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d82:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d88:	4833      	ldr	r0, [pc, #204]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000d8a:	f002 f8d1 	bl	8002f30 <HAL_TIM_Base_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000d94:	f000 f9dc 	bl	8001150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	4619      	mov	r1, r3
 8000da4:	482c      	ldr	r0, [pc, #176]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000da6:	f002 fc77 	bl	8003698 <HAL_TIM_ConfigClockSource>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000db0:	f000 f9ce 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000db4:	4828      	ldr	r0, [pc, #160]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000db6:	f002 f99c 	bl	80030f2 <HAL_TIM_PWM_Init>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000dc0:	f000 f9c6 	bl	8001150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4821      	ldr	r0, [pc, #132]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000dd4:	f003 f81c 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000dde:	f000 f9b7 	bl	8001150 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de2:	2360      	movs	r3, #96	; 0x60
 8000de4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2200      	movs	r2, #0
 8000df6:	4619      	mov	r1, r3
 8000df8:	4817      	ldr	r0, [pc, #92]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000dfa:	f002 fb8b 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000e04:	f000 f9a4 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4812      	ldr	r0, [pc, #72]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000e10:	f002 fb80 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 8000e1a:	f000 f999 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2208      	movs	r2, #8
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000e26:	f002 fb75 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000e30:	f000 f98e 	bl	8001150 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	220c      	movs	r2, #12
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000e3c:	f002 fb6a 	bl	8003514 <HAL_TIM_PWM_ConfigChannel>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8000e46:	f000 f983 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e4a:	4803      	ldr	r0, [pc, #12]	; (8000e58 <MX_TIM4_Init+0x124>)
 8000e4c:	f000 fa16 	bl	800127c <HAL_TIM_MspPostInit>
}
 8000e50:	bf00      	nop
 8000e52:	3738      	adds	r7, #56	; 0x38
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000150 	.word	0x20000150
 8000e5c:	40000800 	.word	0x40000800

08000e60 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <MX_USART1_UART_Init+0x50>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART1_UART_Init+0x4c>)
 8000e98:	f003 f88e 	bl	8003fb8 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ea2:	f000 f955 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000198 	.word	0x20000198
 8000eb0:	40011000 	.word	0x40011000

08000eb4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	; (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f003 f864 	bl	8003fb8 <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f92b 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200001dc 	.word	0x200001dc
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <MX_DMA_Init+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <MX_DMA_Init+0x88>)
 8000f18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <MX_DMA_Init+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <MX_DMA_Init+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <MX_DMA_Init+0x88>)
 8000f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <MX_DMA_Init+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2010      	movs	r0, #16
 8000f4c:	f000 fdc1 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f50:	2010      	movs	r0, #16
 8000f52:	f000 fdda 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2011      	movs	r0, #17
 8000f5c:	f000 fdb9 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f60:	2011      	movs	r0, #17
 8000f62:	f000 fdd2 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	203a      	movs	r0, #58	; 0x3a
 8000f6c:	f000 fdb1 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f70:	203a      	movs	r0, #58	; 0x3a
 8000f72:	f000 fdca 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2046      	movs	r0, #70	; 0x46
 8000f7c:	f000 fda9 	bl	8001ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f80:	2046      	movs	r0, #70	; 0x46
 8000f82:	f000 fdc2 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f9a:	f107 030c 	add.w	r3, r7, #12
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_GPIO_Init+0x7c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a17      	ldr	r2, [pc, #92]	; (8001010 <MX_GPIO_Init+0x7c>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <MX_GPIO_Init+0x7c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <MX_GPIO_Init+0x7c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a10      	ldr	r2, [pc, #64]	; (8001010 <MX_GPIO_Init+0x7c>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_GPIO_Init+0x7c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_6, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2160      	movs	r1, #96	; 0x60
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_GPIO_Init+0x80>)
 8000fe8:	f001 fb30 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4804      	ldr	r0, [pc, #16]	; (8001014 <MX_GPIO_Init+0x80>)
 8001004:	f001 f99e 	bl	8002344 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000

08001018 <uart_transmit>:

/* USER CODE BEGIN 4 */
static uart_transmit_status_t uart_transmit()
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  sprintf(duty_cycle_send, "%2d", pwm_t);
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <uart_transmit+0x24>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4907      	ldr	r1, [pc, #28]	; (8001040 <uart_transmit+0x28>)
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <uart_transmit+0x2c>)
 8001026:	f004 fa8b 	bl	8005540 <siprintf>
  /* Transmit UART of Duty Cycle Polling */
  HAL_UART_Transmit(&huart2, (uint8_t *) duty_cycle_send, sizeof(duty_cycle_send), 100);
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	2202      	movs	r2, #2
 800102e:	4905      	ldr	r1, [pc, #20]	; (8001044 <uart_transmit+0x2c>)
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <uart_transmit+0x30>)
 8001032:	f003 f80e 	bl	8004052 <HAL_UART_Transmit>
  return UART_TRANSMIT_STATUS_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200003b0 	.word	0x200003b0
 8001040:	08005ea4 	.word	0x08005ea4
 8001044:	200003c4 	.word	0x200003c4
 8001048:	200001dc 	.word	0x200001dc

0800104c <conveyor_control>:
static conveyor_status_t conveyor_control(uint8_t state, uint8_t pwm_t)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
  switch (state)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d832      	bhi.n	80010c8 <conveyor_control+0x7c>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <conveyor_control+0x1c>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001079 	.word	0x08001079
 800106c:	0800108f 	.word	0x0800108f
 8001070:	080010a5 	.word	0x080010a5
 8001074:	080010b7 	.word	0x080010b7
  {
  case STOP_MOTOR_STATE:
  {
    pwm_t = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	71bb      	strb	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_t);
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <conveyor_control+0x8c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 8001084:	4b15      	ldr	r3, [pc, #84]	; (80010dc <conveyor_control+0x90>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	79ba      	ldrb	r2, [r7, #6]
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 800108c:	e01c      	b.n	80010c8 <conveyor_control+0x7c>
  }
  case START_MOTOR_STATE:
  {
    pwm_t = 49;
 800108e:	2331      	movs	r3, #49	; 0x31
 8001090:	71bb      	strb	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <conveyor_control+0x8c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2200      	movs	r2, #0
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <conveyor_control+0x90>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010a2:	e011      	b.n	80010c8 <conveyor_control+0x7c>
  }
  case MOTOR_LEFT_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <conveyor_control+0x8c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm_t);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <conveyor_control+0x90>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	79ba      	ldrb	r2, [r7, #6]
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010b4:	e008      	b.n	80010c8 <conveyor_control+0x7c>
  }
  case MOTOR_RIGHT_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_t);
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <conveyor_control+0x8c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <conveyor_control+0x90>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2200      	movs	r2, #0
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 80010c6:	bf00      	nop
  }
  }
  return CONVEYOR_STATUS_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200000c0 	.word	0x200000c0
 80010dc:	20000150 	.word	0x20000150

080010e0 <classify_control>:

static classify_status_t classify_control(uint8_t classify_state, uint8_t pwm_classify)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
  switch (classify_state)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d00f      	beq.n	8001116 <classify_control+0x36>
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	dc1f      	bgt.n	800113a <classify_control+0x5a>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d002      	beq.n	8001104 <classify_control+0x24>
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d012      	beq.n	8001128 <classify_control+0x48>
 8001102:	e01a      	b.n	800113a <classify_control+0x5a>
  {
  case ORIGINAL_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001104:	4b10      	ldr	r3, [pc, #64]	; (8001148 <classify_control+0x68>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2200      	movs	r2, #0
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <classify_control+0x6c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2200      	movs	r2, #0
 8001112:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001114:	e011      	b.n	800113a <classify_control+0x5a>
  }
  case LEFT_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, pwm_classify);
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <classify_control+0x68>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <classify_control+0x6c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001126:	e008      	b.n	800113a <classify_control+0x5a>
  }
  case RIGHT_CLASSIFY_STATE:
  {
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <classify_control+0x68>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2200      	movs	r2, #0
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm_classify);
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <classify_control+0x6c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	79ba      	ldrb	r2, [r7, #6]
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
    break;
 8001138:	bf00      	nop
  }
  }
  return CLASSIFY_STATUS_OK;
 800113a:	2300      	movs	r3, #0
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200000c0 	.word	0x200000c0
 800114c:	20000150 	.word	0x20000150

08001150 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2c      	ldr	r2, [pc, #176]	; (800126c <HAL_TIM_Base_MspInit+0xc0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10e      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011da:	e042      	b.n	8001262 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e4:	d10e      	bne.n	8001204 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	e02e      	b.n	8001262 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_TIM_Base_MspInit+0xc8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d116      	bne.n	800123c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	201d      	movs	r0, #29
 8001230:	f000 fc4f 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001234:	201d      	movs	r0, #29
 8001236:	f000 fc68 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 800123a:	e012      	b.n	8001262 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <HAL_TIM_Base_MspInit+0xcc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10d      	bne.n	8001262 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_TIM_Base_MspInit+0xc4>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40010000 	.word	0x40010000
 8001270:	40023800 	.word	0x40023800
 8001274:	40000400 	.word	0x40000400
 8001278:	40000800 	.word	0x40000800

0800127c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_TIM_MspPostInit+0x138>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d11f      	bne.n	80012de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80012ba:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80012be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4839      	ldr	r0, [pc, #228]	; (80013bc <HAL_TIM_MspPostInit+0x140>)
 80012d8:	f001 f834 	bl	8002344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012dc:	e066      	b.n	80013ac <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e6:	d13d      	bne.n	8001364 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 800130e:	f043 0302 	orr.w	r3, r3, #2
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001320:	2303      	movs	r3, #3
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <HAL_TIM_MspPostInit+0x140>)
 800133c:	f001 f802 	bl	8002344 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134e:	2300      	movs	r3, #0
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001352:	2301      	movs	r3, #1
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 031c 	add.w	r3, r7, #28
 800135a:	4619      	mov	r1, r3
 800135c:	4818      	ldr	r0, [pc, #96]	; (80013c0 <HAL_TIM_MspPostInit+0x144>)
 800135e:	f000 fff1 	bl	8002344 <HAL_GPIO_Init>
}
 8001362:	e023      	b.n	80013ac <HAL_TIM_MspPostInit+0x130>
  else if(htim->Instance==TIM4)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_TIM_MspPostInit+0x148>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11e      	bne.n	80013ac <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_MspPostInit+0x13c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800138a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800139c:	2302      	movs	r3, #2
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <HAL_TIM_MspPostInit+0x144>)
 80013a8:	f000 ffcc 	bl	8002344 <HAL_GPIO_Init>
}
 80013ac:	bf00      	nop
 80013ae:	3730      	adds	r7, #48	; 0x30
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40000800 	.word	0x40000800

080013c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a97      	ldr	r2, [pc, #604]	; (8001644 <HAL_UART_MspInit+0x27c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f040 8092 	bne.w	8001510 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	4b95      	ldr	r3, [pc, #596]	; (8001648 <HAL_UART_MspInit+0x280>)
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	4a94      	ldr	r2, [pc, #592]	; (8001648 <HAL_UART_MspInit+0x280>)
 80013f6:	f043 0310 	orr.w	r3, r3, #16
 80013fa:	6453      	str	r3, [r2, #68]	; 0x44
 80013fc:	4b92      	ldr	r3, [pc, #584]	; (8001648 <HAL_UART_MspInit+0x280>)
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	61bb      	str	r3, [r7, #24]
 8001406:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	4b8e      	ldr	r3, [pc, #568]	; (8001648 <HAL_UART_MspInit+0x280>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a8d      	ldr	r2, [pc, #564]	; (8001648 <HAL_UART_MspInit+0x280>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <HAL_UART_MspInit+0x280>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001424:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001436:	2307      	movs	r3, #7
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4882      	ldr	r0, [pc, #520]	; (800164c <HAL_UART_MspInit+0x284>)
 8001442:	f000 ff7f 	bl	8002344 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001446:	4b82      	ldr	r3, [pc, #520]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001448:	4a82      	ldr	r2, [pc, #520]	; (8001654 <HAL_UART_MspInit+0x28c>)
 800144a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800144c:	4b80      	ldr	r3, [pc, #512]	; (8001650 <HAL_UART_MspInit+0x288>)
 800144e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001452:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001454:	4b7e      	ldr	r3, [pc, #504]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800145a:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_UART_MspInit+0x288>)
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001460:	4b7b      	ldr	r3, [pc, #492]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001462:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001466:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001468:	4b79      	ldr	r3, [pc, #484]	; (8001650 <HAL_UART_MspInit+0x288>)
 800146a:	2200      	movs	r2, #0
 800146c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146e:	4b78      	ldr	r3, [pc, #480]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001470:	2200      	movs	r2, #0
 8001472:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001474:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001476:	2200      	movs	r2, #0
 8001478:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800147a:	4b75      	ldr	r3, [pc, #468]	; (8001650 <HAL_UART_MspInit+0x288>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001486:	4872      	ldr	r0, [pc, #456]	; (8001650 <HAL_UART_MspInit+0x288>)
 8001488:	f000 fb5a 	bl	8001b40 <HAL_DMA_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001492:	f7ff fe5d 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <HAL_UART_MspInit+0x288>)
 800149a:	639a      	str	r2, [r3, #56]	; 0x38
 800149c:	4a6c      	ldr	r2, [pc, #432]	; (8001650 <HAL_UART_MspInit+0x288>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80014a2:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014a4:	4a6d      	ldr	r2, [pc, #436]	; (800165c <HAL_UART_MspInit+0x294>)
 80014a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80014a8:	4b6b      	ldr	r3, [pc, #428]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014b0:	4b69      	ldr	r3, [pc, #420]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b6:	4b68      	ldr	r3, [pc, #416]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	4b66      	ldr	r3, [pc, #408]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c4:	4b64      	ldr	r3, [pc, #400]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b63      	ldr	r3, [pc, #396]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d6:	4b60      	ldr	r3, [pc, #384]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014e2:	485d      	ldr	r0, [pc, #372]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014e4:	f000 fb2c 	bl	8001b40 <HAL_DMA_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80014ee:	f7ff fe2f 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014f6:	635a      	str	r2, [r3, #52]	; 0x34
 80014f8:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_UART_MspInit+0x290>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2025      	movs	r0, #37	; 0x25
 8001504:	f000 fae5 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001508:	2025      	movs	r0, #37	; 0x25
 800150a:	f000 fafe 	bl	8001b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800150e:	e095      	b.n	800163c <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <HAL_UART_MspInit+0x298>)
 8001516:	4293      	cmp	r3, r2
 8001518:	f040 8090 	bne.w	800163c <HAL_UART_MspInit+0x274>
    __HAL_RCC_USART2_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b49      	ldr	r3, [pc, #292]	; (8001648 <HAL_UART_MspInit+0x280>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_UART_MspInit+0x280>)
 8001526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b46      	ldr	r3, [pc, #280]	; (8001648 <HAL_UART_MspInit+0x280>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b42      	ldr	r3, [pc, #264]	; (8001648 <HAL_UART_MspInit+0x280>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a41      	ldr	r2, [pc, #260]	; (8001648 <HAL_UART_MspInit+0x280>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <HAL_UART_MspInit+0x280>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001554:	230c      	movs	r3, #12
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001564:	2307      	movs	r3, #7
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4837      	ldr	r0, [pc, #220]	; (800164c <HAL_UART_MspInit+0x284>)
 8001570:	f000 fee8 	bl	8002344 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001574:	4b3b      	ldr	r3, [pc, #236]	; (8001664 <HAL_UART_MspInit+0x29c>)
 8001576:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <HAL_UART_MspInit+0x2a0>)
 8001578:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <HAL_UART_MspInit+0x29c>)
 800157c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001580:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_UART_MspInit+0x29c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <HAL_UART_MspInit+0x29c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800158e:	4b35      	ldr	r3, [pc, #212]	; (8001664 <HAL_UART_MspInit+0x29c>)
 8001590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001594:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_UART_MspInit+0x29c>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <HAL_UART_MspInit+0x29c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_UART_MspInit+0x29c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_UART_MspInit+0x29c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_UART_MspInit+0x29c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015b4:	482b      	ldr	r0, [pc, #172]	; (8001664 <HAL_UART_MspInit+0x29c>)
 80015b6:	f000 fac3 	bl	8001b40 <HAL_DMA_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80015c0:	f7ff fdc6 	bl	8001150 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_UART_MspInit+0x29c>)
 80015c8:	639a      	str	r2, [r3, #56]	; 0x38
 80015ca:	4a26      	ldr	r2, [pc, #152]	; (8001664 <HAL_UART_MspInit+0x29c>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <HAL_UART_MspInit+0x2a8>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015de:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015e0:	2240      	movs	r2, #64	; 0x40
 80015e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_UART_MspInit+0x2a4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_UART_MspInit+0x2a4>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001604:	4b19      	ldr	r3, [pc, #100]	; (800166c <HAL_UART_MspInit+0x2a4>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_UART_MspInit+0x2a4>)
 800160c:	2200      	movs	r2, #0
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001610:	4816      	ldr	r0, [pc, #88]	; (800166c <HAL_UART_MspInit+0x2a4>)
 8001612:	f000 fa95 	bl	8001b40 <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800161c:	f7ff fd98 	bl	8001150 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_UART_MspInit+0x2a4>)
 8001624:	635a      	str	r2, [r3, #52]	; 0x34
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_UART_MspInit+0x2a4>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800162c:	2200      	movs	r2, #0
 800162e:	2100      	movs	r1, #0
 8001630:	2026      	movs	r0, #38	; 0x26
 8001632:	f000 fa4e 	bl	8001ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001636:	2026      	movs	r0, #38	; 0x26
 8001638:	f000 fa67 	bl	8001b0a <HAL_NVIC_EnableIRQ>
}
 800163c:	bf00      	nop
 800163e:	3730      	adds	r7, #48	; 0x30
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40011000 	.word	0x40011000
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	20000220 	.word	0x20000220
 8001654:	40026440 	.word	0x40026440
 8001658:	20000280 	.word	0x20000280
 800165c:	400264b8 	.word	0x400264b8
 8001660:	40004400 	.word	0x40004400
 8001664:	200002e0 	.word	0x200002e0
 8001668:	40026088 	.word	0x40026088
 800166c:	20000340 	.word	0x20000340
 8001670:	400260a0 	.word	0x400260a0

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 f90c 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA1_Stream5_IRQHandler+0x10>)
 80016ce:	f000 fbcf 	bl	8001e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200002e0 	.word	0x200002e0

080016dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA1_Stream6_IRQHandler+0x10>)
 80016e2:	f000 fbc5 	bl	8001e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000340 	.word	0x20000340

080016f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <TIM3_IRQHandler+0x10>)
 80016f6:	f001 fe05 	bl	8003304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000108 	.word	0x20000108

08001704 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <USART1_IRQHandler+0x10>)
 800170a:	f002 fd99 	bl	8004240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000198 	.word	0x20000198

08001718 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <USART2_IRQHandler+0x10>)
 800171e:	f002 fd8f 	bl	8004240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200001dc 	.word	0x200001dc

0800172c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA2_Stream2_IRQHandler+0x10>)
 8001732:	f000 fb9d 	bl	8001e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000220 	.word	0x20000220

08001740 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <DMA2_Stream7_IRQHandler+0x10>)
 8001746:	f000 fb93 	bl	8001e70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000280 	.word	0x20000280

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f003 ff04 	bl	8005590 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20010000 	.word	0x20010000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200003c8 	.word	0x200003c8
 80017bc:	20000518 	.word	0x20000518

080017c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ea:	490e      	ldr	r1, [pc, #56]	; (8001824 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001800:	4c0b      	ldr	r4, [pc, #44]	; (8001830 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180e:	f7ff ffd7 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f003 fec3 	bl	800559c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7fe ffff 	bl	8000818 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001828:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 800182c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001830:	20000518 	.word	0x20000518

08001834 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <HAL_Init+0x40>)
 8001842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001846:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_Init+0x40>)
 800184e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001852:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_Init+0x40>)
 800185a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 f92b 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	2000      	movs	r0, #0
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff fc76 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f943 	bl	8001b26 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 f90b 	bl	8001ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x20>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x24>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_IncTick+0x24>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008
 8001900:	200003cc 	.word	0x200003cc

08001904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return uwTick;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_GetTick+0x14>)
 800190a:	681b      	ldr	r3, [r3, #0]
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200003cc 	.word	0x200003cc

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	; (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <__NVIC_EnableIRQ+0x38>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000e100 	.word	0xe000e100

080019bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	6039      	str	r1, [r7, #0]
 80019c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	db0a      	blt.n	80019e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	490c      	ldr	r1, [pc, #48]	; (8001a08 <__NVIC_SetPriority+0x4c>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	440b      	add	r3, r1
 80019e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e4:	e00a      	b.n	80019fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4908      	ldr	r1, [pc, #32]	; (8001a0c <__NVIC_SetPriority+0x50>)
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	3b04      	subs	r3, #4
 80019f4:	0112      	lsls	r2, r2, #4
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	440b      	add	r3, r1
 80019fa:	761a      	strb	r2, [r3, #24]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000e100 	.word	0xe000e100
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f1c3 0307 	rsb	r3, r3, #7
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	bf28      	it	cs
 8001a2e:	2304      	movcs	r3, #4
 8001a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3304      	adds	r3, #4
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d902      	bls.n	8001a40 <NVIC_EncodePriority+0x30>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b03      	subs	r3, #3
 8001a3e:	e000      	b.n	8001a42 <NVIC_EncodePriority+0x32>
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 32ff 	mov.w	r2, #4294967295
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43da      	mvns	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	401a      	ands	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a62:	43d9      	mvns	r1, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	4313      	orrs	r3, r2
         );
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3724      	adds	r7, #36	; 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a88:	d301      	bcc.n	8001a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00f      	b.n	8001aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <SysTick_Config+0x40>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a96:	210f      	movs	r1, #15
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7ff ff8e 	bl	80019bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aa6:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <SysTick_Config+0x40>)
 8001aa8:	2207      	movs	r2, #7
 8001aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	e000e010 	.word	0xe000e010

08001abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ff29 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ae4:	f7ff ff3e 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	6978      	ldr	r0, [r7, #20]
 8001af0:	f7ff ff8e 	bl	8001a10 <NVIC_EncodePriority>
 8001af4:	4602      	mov	r2, r0
 8001af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff5d 	bl	80019bc <__NVIC_SetPriority>
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff31 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ffa2 	bl	8001a78 <SysTick_Config>
 8001b34:	4603      	mov	r3, r0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff feda 	bl	8001904 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e099      	b.n	8001c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7c:	e00f      	b.n	8001b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b7e:	f7ff fec1 	bl	8001904 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b05      	cmp	r3, #5
 8001b8a:	d908      	bls.n	8001b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2203      	movs	r2, #3
 8001b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e078      	b.n	8001c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1e8      	bne.n	8001b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_DMA_Init+0x158>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	4313      	orrs	r3, r2
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d117      	bne.n	8001c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00e      	beq.n	8001c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fb01 	bl	800224c <DMA_CheckFifoParam>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2240      	movs	r2, #64	; 0x40
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e016      	b.n	8001c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 fab8 	bl	80021e0 <DMA_CalcBaseAndBitshift>
 8001c70:	4603      	mov	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c78:	223f      	movs	r2, #63	; 0x3f
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f010803f 	.word	0xf010803f

08001c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
 8001ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_DMA_Start_IT+0x26>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e040      	b.n	8001d44 <HAL_DMA_Start_IT+0xa8>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d12f      	bne.n	8001d36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2202      	movs	r2, #2
 8001cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f000 fa4a 	bl	8002184 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	223f      	movs	r2, #63	; 0x3f
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0216 	orr.w	r2, r2, #22
 8001d0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0208 	orr.w	r2, r2, #8
 8001d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e005      	b.n	8001d42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d5a:	f7ff fdd3 	bl	8001904 <HAL_GetTick>
 8001d5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d008      	beq.n	8001d7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2280      	movs	r2, #128	; 0x80
 8001d70:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e052      	b.n	8001e24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0216 	bic.w	r2, r2, #22
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <HAL_DMA_Abort+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d007      	beq.n	8001dbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0208 	bic.w	r2, r2, #8
 8001dbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0201 	bic.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dce:	e013      	b.n	8001df8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd0:	f7ff fd98 	bl	8001904 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d90c      	bls.n	8001df8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2220      	movs	r2, #32
 8001de2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2203      	movs	r2, #3
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e015      	b.n	8001e24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e4      	bne.n	8001dd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	223f      	movs	r2, #63	; 0x3f
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d004      	beq.n	8001e4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e00c      	b.n	8001e64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2205      	movs	r2, #5
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0201 	bic.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e7c:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_DMA_IRQHandler+0x248>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a8e      	ldr	r2, [pc, #568]	; (80020bc <HAL_DMA_IRQHandler+0x24c>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	2208      	movs	r2, #8
 8001e9c:	409a      	lsls	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d01a      	beq.n	8001edc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0204 	bic.w	r2, r2, #4
 8001ec2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec8:	2208      	movs	r2, #8
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f043 0201 	orr.w	r2, r3, #1
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d012      	beq.n	8001f12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	f043 0202 	orr.w	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	2204      	movs	r2, #4
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d012      	beq.n	8001f48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	2204      	movs	r2, #4
 8001f36:	409a      	lsls	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f40:	f043 0204 	orr.w	r2, r3, #4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	2210      	movs	r2, #16
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d043      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d03c      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d024      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	4798      	blx	r3
 8001f9e:	e01f      	b.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01b      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
 8001fb0:	e016      	b.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0208 	bic.w	r2, r2, #8
 8001fce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 808f 	beq.w	8002110 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8087 	beq.w	8002110 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	2220      	movs	r2, #32
 8002008:	409a      	lsls	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b05      	cmp	r3, #5
 8002018:	d136      	bne.n	8002088 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0216 	bic.w	r2, r2, #22
 8002028:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695a      	ldr	r2, [r3, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002038:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <HAL_DMA_IRQHandler+0x1da>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0208 	bic.w	r2, r2, #8
 8002058:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	223f      	movs	r2, #63	; 0x3f
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207a:	2b00      	cmp	r3, #0
 800207c:	d07e      	beq.n	800217c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
        }
        return;
 8002086:	e079      	b.n	800217c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01d      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10d      	bne.n	80020c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d031      	beq.n	8002110 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e02c      	b.n	8002110 <HAL_DMA_IRQHandler+0x2a0>
 80020b6:	bf00      	nop
 80020b8:	20000000 	.word	0x20000000
 80020bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d023      	beq.n	8002110 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
 80020d0:	e01e      	b.n	8002110 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10f      	bne.n	8002100 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0210 	bic.w	r2, r2, #16
 80020ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	2b00      	cmp	r3, #0
 8002116:	d032      	beq.n	800217e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d022      	beq.n	800216a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2205      	movs	r2, #5
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0201 	bic.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	3301      	adds	r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	d307      	bcc.n	8002158 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f2      	bne.n	800213c <HAL_DMA_IRQHandler+0x2cc>
 8002156:	e000      	b.n	800215a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002158:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
 800217a:	e000      	b.n	800217e <HAL_DMA_IRQHandler+0x30e>
        return;
 800217c:	bf00      	nop
    }
  }
}
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d108      	bne.n	80021c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021c2:	e007      	b.n	80021d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	60da      	str	r2, [r3, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3b10      	subs	r3, #16
 80021f0:	4a14      	ldr	r2, [pc, #80]	; (8002244 <DMA_CalcBaseAndBitshift+0x64>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <DMA_CalcBaseAndBitshift+0x68>)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b03      	cmp	r3, #3
 800220c:	d909      	bls.n	8002222 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002216:	f023 0303 	bic.w	r3, r3, #3
 800221a:	1d1a      	adds	r2, r3, #4
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	659a      	str	r2, [r3, #88]	; 0x58
 8002220:	e007      	b.n	8002232 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800222a:	f023 0303 	bic.w	r3, r3, #3
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	aaaaaaab 	.word	0xaaaaaaab
 8002248:	08005ec0 	.word	0x08005ec0

0800224c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d11f      	bne.n	80022a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	2b03      	cmp	r3, #3
 800226a:	d856      	bhi.n	800231a <DMA_CheckFifoParam+0xce>
 800226c:	a201      	add	r2, pc, #4	; (adr r2, 8002274 <DMA_CheckFifoParam+0x28>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002285 	.word	0x08002285
 8002278:	08002297 	.word	0x08002297
 800227c:	08002285 	.word	0x08002285
 8002280:	0800231b 	.word	0x0800231b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d046      	beq.n	800231e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002294:	e043      	b.n	800231e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800229e:	d140      	bne.n	8002322 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a4:	e03d      	b.n	8002322 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ae:	d121      	bne.n	80022f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d837      	bhi.n	8002326 <DMA_CheckFifoParam+0xda>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <DMA_CheckFifoParam+0x70>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	080022d3 	.word	0x080022d3
 80022c4:	080022cd 	.word	0x080022cd
 80022c8:	080022e5 	.word	0x080022e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
      break;
 80022d0:	e030      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d025      	beq.n	800232a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e2:	e022      	b.n	800232a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ec:	d11f      	bne.n	800232e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022f2:	e01c      	b.n	800232e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d903      	bls.n	8002302 <DMA_CheckFifoParam+0xb6>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b03      	cmp	r3, #3
 80022fe:	d003      	beq.n	8002308 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002300:	e018      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      break;
 8002306:	e015      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00e      	beq.n	8002332 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
      break;
 8002318:	e00b      	b.n	8002332 <DMA_CheckFifoParam+0xe6>
      break;
 800231a:	bf00      	nop
 800231c:	e00a      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 800231e:	bf00      	nop
 8002320:	e008      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 8002322:	bf00      	nop
 8002324:	e006      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 8002326:	bf00      	nop
 8002328:	e004      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 800232a:	bf00      	nop
 800232c:	e002      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;   
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <DMA_CheckFifoParam+0xe8>
      break;
 8002332:	bf00      	nop
    }
  } 
  
  return status; 
 8002334:	7bfb      	ldrb	r3, [r7, #15]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e159      	b.n	8002614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 8148 	bne.w	800260e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	2b02      	cmp	r3, #2
 8002394:	d130      	bne.n	80023f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0201 	and.w	r2, r3, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b03      	cmp	r3, #3
 8002402:	d017      	beq.n	8002434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d123      	bne.n	8002488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80a2 	beq.w	800260e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b57      	ldr	r3, [pc, #348]	; (800262c <HAL_GPIO_Init+0x2e8>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	4a56      	ldr	r2, [pc, #344]	; (800262c <HAL_GPIO_Init+0x2e8>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	; 0x44
 80024da:	4b54      	ldr	r3, [pc, #336]	; (800262c <HAL_GPIO_Init+0x2e8>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e6:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_GPIO_Init+0x2ec>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_GPIO_Init+0x2f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x202>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_GPIO_Init+0x2f4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x1fe>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a47      	ldr	r2, [pc, #284]	; (800263c <HAL_GPIO_Init+0x2f8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x1fa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a46      	ldr	r2, [pc, #280]	; (8002640 <HAL_GPIO_Init+0x2fc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x1f6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a45      	ldr	r2, [pc, #276]	; (8002644 <HAL_GPIO_Init+0x300>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x1f2>
 8002532:	2304      	movs	r3, #4
 8002534:	e008      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002536:	2307      	movs	r3, #7
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x204>
 800253a:	2303      	movs	r3, #3
 800253c:	e004      	b.n	8002548 <HAL_GPIO_Init+0x204>
 800253e:	2302      	movs	r3, #2
 8002540:	e002      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002546:	2300      	movs	r3, #0
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f002 0203 	and.w	r2, r2, #3
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	4093      	lsls	r3, r2
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002558:	4935      	ldr	r1, [pc, #212]	; (8002630 <HAL_GPIO_Init+0x2ec>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_GPIO_Init+0x304>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258a:	4a2f      	ldr	r2, [pc, #188]	; (8002648 <HAL_GPIO_Init+0x304>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002590:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_GPIO_Init+0x304>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b4:	4a24      	ldr	r2, [pc, #144]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025de:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_GPIO_Init+0x304>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <HAL_GPIO_Init+0x304>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	f67f aea2 	bls.w	8002360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3724      	adds	r7, #36	; 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40013800 	.word	0x40013800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40020800 	.word	0x40020800
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e267      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d075      	beq.n	800278a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d00c      	beq.n	80026c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d112      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026c2:	d10b      	bne.n	80026dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	4b7e      	ldr	r3, [pc, #504]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d05b      	beq.n	8002788 <HAL_RCC_OscConfig+0x108>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d157      	bne.n	8002788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e242      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	d106      	bne.n	80026f4 <HAL_RCC_OscConfig+0x74>
 80026e6:	4b76      	ldr	r3, [pc, #472]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a75      	ldr	r2, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80026ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	e01d      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026fc:	d10c      	bne.n	8002718 <HAL_RCC_OscConfig+0x98>
 80026fe:	4b70      	ldr	r3, [pc, #448]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6f      	ldr	r2, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	4b6d      	ldr	r3, [pc, #436]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6c      	ldr	r2, [pc, #432]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	e00b      	b.n	8002730 <HAL_RCC_OscConfig+0xb0>
 8002718:	4b69      	ldr	r3, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a68      	ldr	r2, [pc, #416]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b66      	ldr	r3, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a65      	ldr	r2, [pc, #404]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d013      	beq.n	8002760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7ff f8e4 	bl	8001904 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002740:	f7ff f8e0 	bl	8001904 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e207      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0xc0>
 800275e:	e014      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002760:	f7ff f8d0 	bl	8001904 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002768:	f7ff f8cc 	bl	8001904 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1f3      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0xe8>
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d063      	beq.n	800285e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002796:	4b4a      	ldr	r3, [pc, #296]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b44      	ldr	r3, [pc, #272]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d001      	beq.n	80027d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e1c7      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e6:	e03a      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d020      	beq.n	8002832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f6:	f7ff f885 	bl	8001904 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fe:	f7ff f881 	bl	8001904 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e1a8      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4925      	ldr	r1, [pc, #148]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]
 8002830:	e015      	b.n	800285e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_OscConfig+0x244>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7ff f864 	bl	8001904 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7ff f860 	bl	8001904 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e187      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d036      	beq.n	80028d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7ff f844 	bl	8001904 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7ff f840 	bl	8001904 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e167      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x240>)
 8002894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f0      	beq.n	8002880 <HAL_RCC_OscConfig+0x200>
 800289e:	e01b      	b.n	80028d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_OscConfig+0x248>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7ff f82d 	bl	8001904 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ac:	e00e      	b.n	80028cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ae:	f7ff f829 	bl	8001904 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d907      	bls.n	80028cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e150      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	42470000 	.word	0x42470000
 80028c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b88      	ldr	r3, [pc, #544]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ea      	bne.n	80028ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8097 	beq.w	8002a14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b81      	ldr	r3, [pc, #516]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	4b7d      	ldr	r3, [pc, #500]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4a7c      	ldr	r2, [pc, #496]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002904:	6413      	str	r3, [r2, #64]	; 0x40
 8002906:	4b7a      	ldr	r3, [pc, #488]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002912:	2301      	movs	r3, #1
 8002914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002916:	4b77      	ldr	r3, [pc, #476]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	2b00      	cmp	r3, #0
 8002920:	d118      	bne.n	8002954 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002922:	4b74      	ldr	r3, [pc, #464]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a73      	ldr	r2, [pc, #460]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 8002928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292e:	f7fe ffe9 	bl	8001904 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002936:	f7fe ffe5 	bl	8001904 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e10c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002948:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_OscConfig+0x474>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d106      	bne.n	800296a <HAL_RCC_OscConfig+0x2ea>
 800295c:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a63      	ldr	r2, [pc, #396]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	e01c      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d10c      	bne.n	800298c <HAL_RCC_OscConfig+0x30c>
 8002972:	4b5f      	ldr	r3, [pc, #380]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a5e      	ldr	r2, [pc, #376]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	4b5c      	ldr	r3, [pc, #368]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5b      	ldr	r2, [pc, #364]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_OscConfig+0x324>
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	4a54      	ldr	r2, [pc, #336]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ac:	f7fe ffaa 	bl	8001904 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b4:	f7fe ffa6 	bl	8001904 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e0cb      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0ee      	beq.n	80029b4 <HAL_RCC_OscConfig+0x334>
 80029d6:	e014      	b.n	8002a02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7fe ff94 	bl	8001904 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e0:	f7fe ff90 	bl	8001904 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0b5      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1ee      	bne.n	80029e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a02:	7dfb      	ldrb	r3, [r7, #23]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80a1 	beq.w	8002b60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d05c      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d141      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe ff64 	bl	8001904 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe ff60 	bl	8001904 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e087      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a52:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69da      	ldr	r2, [r3, #28]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	019b      	lsls	r3, r3, #6
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	491b      	ldr	r1, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a88:	4b1b      	ldr	r3, [pc, #108]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe ff39 	bl	8001904 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe ff35 	bl	8001904 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e05c      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x416>
 8002ab4:	e054      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_RCC_OscConfig+0x478>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7fe ff22 	bl	8001904 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe ff1e 	bl	8001904 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e045      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x444>
 8002ae2:	e03d      	b.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e038      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x4ec>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d028      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d121      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d11a      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	3b01      	subs	r3, #1
 8002b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0cc      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d90c      	bls.n	8002bac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b65      	ldr	r3, [pc, #404]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b63      	ldr	r3, [pc, #396]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0b8      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc4:	4b59      	ldr	r3, [pc, #356]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bdc:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	4a52      	ldr	r2, [pc, #328]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002be6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	494d      	ldr	r1, [pc, #308]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d044      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d119      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e067      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f023 0203 	bic.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4934      	ldr	r1, [pc, #208]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fe50 	bl	8001904 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe fe4c 	bl	8001904 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04f      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 020c 	and.w	r2, r3, #12
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1eb      	bne.n	8002c68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b25      	ldr	r3, [pc, #148]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20c      	bcs.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e032      	b.n	8002d1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4916      	ldr	r1, [pc, #88]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d009      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	490e      	ldr	r1, [pc, #56]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf6:	f000 f821 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	490a      	ldr	r1, [pc, #40]	; (8002d30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	5ccb      	ldrb	r3, [r1, r3]
 8002d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fdb0 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40023c00 	.word	0x40023c00
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08005ea8 	.word	0x08005ea8
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000004 	.word	0x20000004

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d40:	b090      	sub	sp, #64	; 0x40
 8002d42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d54:	4b59      	ldr	r3, [pc, #356]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 030c 	and.w	r3, r3, #12
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d00d      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x40>
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	f200 80a1 	bhi.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6e:	e09b      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d70:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d74:	e09b      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d76:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7a:	e098      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d7c:	4b4f      	ldr	r3, [pc, #316]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d86:	4b4d      	ldr	r3, [pc, #308]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d92:	4b4a      	ldr	r3, [pc, #296]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	099b      	lsrs	r3, r3, #6
 8002d98:	2200      	movs	r2, #0
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002da4:	2100      	movs	r1, #0
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da8:	fb03 f201 	mul.w	r2, r3, r1
 8002dac:	2300      	movs	r3, #0
 8002dae:	fb00 f303 	mul.w	r3, r0, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	4a43      	ldr	r2, [pc, #268]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002db6:	fba0 1202 	umull	r1, r2, r0, r2
 8002dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbc:	460a      	mov	r2, r1
 8002dbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc2:	4413      	add	r3, r2
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	2200      	movs	r2, #0
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	61fa      	str	r2, [r7, #28]
 8002dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dd6:	f7fd fa53 	bl	8000280 <__aeabi_uldivmod>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4613      	mov	r3, r2
 8002de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de2:	e053      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de4:	4b35      	ldr	r3, [pc, #212]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	2200      	movs	r2, #0
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	617a      	str	r2, [r7, #20]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002df6:	f04f 0b00 	mov.w	fp, #0
 8002dfa:	4652      	mov	r2, sl
 8002dfc:	465b      	mov	r3, fp
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	ebb2 080a 	subs.w	r8, r2, sl
 8002e16:	eb63 090b 	sbc.w	r9, r3, fp
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002e32:	eb63 0509 	sbc.w	r5, r3, r9
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	00eb      	lsls	r3, r5, #3
 8002e40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e44:	00e2      	lsls	r2, r4, #3
 8002e46:	4614      	mov	r4, r2
 8002e48:	461d      	mov	r5, r3
 8002e4a:	eb14 030a 	adds.w	r3, r4, sl
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	eb45 030b 	adc.w	r3, r5, fp
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e62:	4629      	mov	r1, r5
 8002e64:	028b      	lsls	r3, r1, #10
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	028a      	lsls	r2, r1, #10
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	2200      	movs	r2, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	60fa      	str	r2, [r7, #12]
 8002e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e80:	f7fd f9fe 	bl	8000280 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x180>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eaa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3740      	adds	r7, #64	; 0x40
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	017d7840 	.word	0x017d7840

08002ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000000 	.word	0x20000000

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ee4:	f7ff fff0 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0a9b      	lsrs	r3, r3, #10
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08005eb8 	.word	0x08005eb8

08002f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f0c:	f7ff ffdc 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0b5b      	lsrs	r3, r3, #13
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08005eb8 	.word	0x08005eb8

08002f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe f928 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 fc82 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d001      	beq.n	8002fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e044      	b.n	8003072 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1e      	ldr	r2, [pc, #120]	; (8003080 <HAL_TIM_Base_Start_IT+0xb0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d018      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x6c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d013      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x6c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1a      	ldr	r2, [pc, #104]	; (8003084 <HAL_TIM_Base_Start_IT+0xb4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00e      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x6c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a19      	ldr	r2, [pc, #100]	; (8003088 <HAL_TIM_Base_Start_IT+0xb8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d009      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x6c>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a17      	ldr	r2, [pc, #92]	; (800308c <HAL_TIM_Base_Start_IT+0xbc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d004      	beq.n	800303c <HAL_TIM_Base_Start_IT+0x6c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_TIM_Base_Start_IT+0xc0>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d111      	bne.n	8003060 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b06      	cmp	r3, #6
 800304c:	d010      	beq.n	8003070 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	e007      	b.n	8003070 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40010000 	.word	0x40010000
 8003084:	40000400 	.word	0x40000400
 8003088:	40000800 	.word	0x40000800
 800308c:	40000c00 	.word	0x40000c00
 8003090:	40014000 	.word	0x40014000

08003094 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0201 	bic.w	r2, r2, #1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80030b6:	4013      	ands	r3, r2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10f      	bne.n	80030dc <HAL_TIM_Base_Stop_IT+0x48>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6a1a      	ldr	r2, [r3, #32]
 80030c2:	f240 4344 	movw	r3, #1092	; 0x444
 80030c6:	4013      	ands	r3, r2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_TIM_Base_Stop_IT+0x48>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e041      	b.n	8003188 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f839 	bl	8003190 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3304      	adds	r3, #4
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f000 fba1 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d109      	bne.n	80031c8 <HAL_TIM_PWM_Start+0x24>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e022      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d109      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x3e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e015      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start+0x58>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e008      	b.n	800320e <HAL_TIM_PWM_Start+0x6a>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e068      	b.n	80032e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0x82>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	e013      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0x92>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	e00b      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d104      	bne.n	8003246 <HAL_TIM_PWM_Start+0xa2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003244:	e003      	b.n	800324e <HAL_TIM_PWM_Start+0xaa>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	6839      	ldr	r1, [r7, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fdb4 	bl	8003dc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a23      	ldr	r2, [pc, #140]	; (80032f0 <HAL_TIM_PWM_Start+0x14c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d107      	bne.n	8003276 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_TIM_PWM_Start+0x14c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d013      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_TIM_PWM_Start+0x150>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a17      	ldr	r2, [pc, #92]	; (80032f8 <HAL_TIM_PWM_Start+0x154>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_TIM_PWM_Start+0x158>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIM_PWM_Start+0x10e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_TIM_PWM_Start+0x15c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d111      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d010      	beq.n	80032e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	e007      	b.n	80032e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0201 	orr.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40000400 	.word	0x40000400
 80032f8:	40000800 	.word	0x40000800
 80032fc:	40000c00 	.word	0x40000c00
 8003300:	40014000 	.word	0x40014000

08003304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	d122      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d11b      	bne.n	8003360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0202 	mvn.w	r2, #2
 8003330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa77 	bl	800383a <HAL_TIM_IC_CaptureCallback>
 800334c:	e005      	b.n	800335a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa69 	bl	8003826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa7a 	bl	800384e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d122      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b04      	cmp	r3, #4
 800337a:	d11b      	bne.n	80033b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0204 	mvn.w	r2, #4
 8003384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fa4d 	bl	800383a <HAL_TIM_IC_CaptureCallback>
 80033a0:	e005      	b.n	80033ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa3f 	bl	8003826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fa50 	bl	800384e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d122      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d11b      	bne.n	8003408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0208 	mvn.w	r2, #8
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2204      	movs	r2, #4
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa23 	bl	800383a <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa15 	bl	8003826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa26 	bl	800384e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b10      	cmp	r3, #16
 8003414:	d122      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b10      	cmp	r3, #16
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0210 	mvn.w	r2, #16
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2208      	movs	r2, #8
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9f9 	bl	800383a <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f9eb 	bl	8003826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f9fc 	bl	800384e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b01      	cmp	r3, #1
 8003468:	d10e      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0201 	mvn.w	r2, #1
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7fd f87a 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b80      	cmp	r3, #128	; 0x80
 8003494:	d10e      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d107      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fd78 	bl	8003fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b40      	cmp	r3, #64	; 0x40
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f9c1 	bl	8003862 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0220 	mvn.w	r2, #32
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fd42 	bl	8003f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800352e:	2302      	movs	r3, #2
 8003530:	e0ae      	b.n	8003690 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	f200 809f 	bhi.w	8003680 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	0800357d 	.word	0x0800357d
 800354c:	08003681 	.word	0x08003681
 8003550:	08003681 	.word	0x08003681
 8003554:	08003681 	.word	0x08003681
 8003558:	080035bd 	.word	0x080035bd
 800355c:	08003681 	.word	0x08003681
 8003560:	08003681 	.word	0x08003681
 8003564:	08003681 	.word	0x08003681
 8003568:	080035ff 	.word	0x080035ff
 800356c:	08003681 	.word	0x08003681
 8003570:	08003681 	.word	0x08003681
 8003574:	08003681 	.word	0x08003681
 8003578:	0800363f 	.word	0x0800363f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f9f8 	bl	8003978 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0208 	orr.w	r2, r2, #8
 8003596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0204 	bic.w	r2, r2, #4
 80035a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6999      	ldr	r1, [r3, #24]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	619a      	str	r2, [r3, #24]
      break;
 80035ba:	e064      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fa3e 	bl	8003a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6999      	ldr	r1, [r3, #24]
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	021a      	lsls	r2, r3, #8
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	619a      	str	r2, [r3, #24]
      break;
 80035fc:	e043      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fa89 	bl	8003b1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0208 	orr.w	r2, r2, #8
 8003618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0204 	bic.w	r2, r2, #4
 8003628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69d9      	ldr	r1, [r3, #28]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	61da      	str	r2, [r3, #28]
      break;
 800363c:	e023      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68b9      	ldr	r1, [r7, #8]
 8003644:	4618      	mov	r0, r3
 8003646:	f000 fad3 	bl	8003bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69d9      	ldr	r1, [r3, #28]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	021a      	lsls	r2, r3, #8
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	61da      	str	r2, [r3, #28]
      break;
 800367e:	e002      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	75fb      	strb	r3, [r7, #23]
      break;
 8003684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800368e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIM_ConfigClockSource+0x1c>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e0b4      	b.n	800381e <HAL_TIM_ConfigClockSource+0x186>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ec:	d03e      	beq.n	800376c <HAL_TIM_ConfigClockSource+0xd4>
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	f200 8087 	bhi.w	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	f000 8086 	beq.w	800380a <HAL_TIM_ConfigClockSource+0x172>
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d87f      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 8003704:	2b70      	cmp	r3, #112	; 0x70
 8003706:	d01a      	beq.n	800373e <HAL_TIM_ConfigClockSource+0xa6>
 8003708:	2b70      	cmp	r3, #112	; 0x70
 800370a:	d87b      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d050      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x11a>
 8003710:	2b60      	cmp	r3, #96	; 0x60
 8003712:	d877      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 8003714:	2b50      	cmp	r3, #80	; 0x50
 8003716:	d03c      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0xfa>
 8003718:	2b50      	cmp	r3, #80	; 0x50
 800371a:	d873      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d058      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x13a>
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d86f      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 8003724:	2b30      	cmp	r3, #48	; 0x30
 8003726:	d064      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003728:	2b30      	cmp	r3, #48	; 0x30
 800372a:	d86b      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d060      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003730:	2b20      	cmp	r3, #32
 8003732:	d867      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05c      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x15a>
 8003738:	2b10      	cmp	r3, #16
 800373a:	d05a      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x15a>
 800373c:	e062      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6899      	ldr	r1, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f000 fb19 	bl	8003d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	609a      	str	r2, [r3, #8]
      break;
 800376a:	e04f      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f000 fb02 	bl	8003d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378e:	609a      	str	r2, [r3, #8]
      break;
 8003790:	e03c      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 fa76 	bl	8003c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2150      	movs	r1, #80	; 0x50
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 facf 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80037b0:	e02c      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	461a      	mov	r2, r3
 80037c0:	f000 fa95 	bl	8003cee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2160      	movs	r1, #96	; 0x60
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fabf 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80037d0:	e01c      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	461a      	mov	r2, r3
 80037e0:	f000 fa56 	bl	8003c90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2140      	movs	r1, #64	; 0x40
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 faaf 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 80037f0:	e00c      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f000 faa6 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003802:	e003      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	e000      	b.n	800380c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800380a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a34      	ldr	r2, [pc, #208]	; (800395c <TIM_Base_SetConfig+0xe4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00f      	beq.n	80038b0 <TIM_Base_SetConfig+0x38>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d00b      	beq.n	80038b0 <TIM_Base_SetConfig+0x38>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a31      	ldr	r2, [pc, #196]	; (8003960 <TIM_Base_SetConfig+0xe8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_Base_SetConfig+0x38>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a30      	ldr	r2, [pc, #192]	; (8003964 <TIM_Base_SetConfig+0xec>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_Base_SetConfig+0x38>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a2f      	ldr	r2, [pc, #188]	; (8003968 <TIM_Base_SetConfig+0xf0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4313      	orrs	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a25      	ldr	r2, [pc, #148]	; (800395c <TIM_Base_SetConfig+0xe4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01b      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d017      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a22      	ldr	r2, [pc, #136]	; (8003960 <TIM_Base_SetConfig+0xe8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a21      	ldr	r2, [pc, #132]	; (8003964 <TIM_Base_SetConfig+0xec>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00f      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a20      	ldr	r2, [pc, #128]	; (8003968 <TIM_Base_SetConfig+0xf0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <TIM_Base_SetConfig+0xf4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1e      	ldr	r2, [pc, #120]	; (8003970 <TIM_Base_SetConfig+0xf8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0x8a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <TIM_Base_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <TIM_Base_SetConfig+0xe4>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d103      	bne.n	8003948 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	615a      	str	r2, [r3, #20]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40010000 	.word	0x40010000
 8003960:	40000400 	.word	0x40000400
 8003964:	40000800 	.word	0x40000800
 8003968:	40000c00 	.word	0x40000c00
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800

08003978 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	f023 0201 	bic.w	r2, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f023 0302 	bic.w	r3, r3, #2
 80039c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <TIM_OC1_SetConfig+0xc8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10c      	bne.n	80039ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 0308 	bic.w	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <TIM_OC1_SetConfig+0xc8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d111      	bne.n	8003a1a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40010000 	.word	0x40010000

08003a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f023 0320 	bic.w	r3, r3, #32
 8003a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <TIM_OC2_SetConfig+0xd4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10d      	bne.n	8003ac0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003abe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <TIM_OC2_SetConfig+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d113      	bne.n	8003af0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ace:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40010000 	.word	0x40010000

08003b1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0303 	bic.w	r3, r3, #3
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	021b      	lsls	r3, r3, #8
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <TIM_OC3_SetConfig+0xd0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10d      	bne.n	8003b96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <TIM_OC3_SetConfig+0xd0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d113      	bne.n	8003bc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	621a      	str	r2, [r3, #32]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	40010000 	.word	0x40010000

08003bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a10      	ldr	r2, [pc, #64]	; (8003c8c <TIM_OC4_SetConfig+0x9c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d109      	bne.n	8003c64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	019b      	lsls	r3, r3, #6
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	621a      	str	r2, [r3, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000

08003c90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 030a 	bic.w	r3, r3, #10
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	031b      	lsls	r3, r3, #12
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f043 0307 	orr.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e050      	b.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d013      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40014000 	.word	0x40014000

08003eec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e03d      	b.n	8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e03f      	b.n	800404a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd f9f2 	bl	80013c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 ff9b 	bl	8004f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004010:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004020:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004030:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b08a      	sub	sp, #40	; 0x28
 8004056:	af02      	add	r7, sp, #8
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d17c      	bne.n	800416c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <HAL_UART_Transmit+0x2c>
 8004078:	88fb      	ldrh	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e075      	b.n	800416e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_UART_Transmit+0x3e>
 800408c:	2302      	movs	r3, #2
 800408e:	e06e      	b.n	800416e <HAL_UART_Transmit+0x11c>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040a6:	f7fd fc2d 	bl	8001904 <HAL_GetTick>
 80040aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	88fa      	ldrh	r2, [r7, #6]
 80040b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d108      	bne.n	80040d4 <HAL_UART_Transmit+0x82>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e003      	b.n	80040dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040d8:	2300      	movs	r3, #0
 80040da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040e4:	e02a      	b.n	800413c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fc53 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e036      	b.n	800416e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004114:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	3302      	adds	r3, #2
 800411a:	61bb      	str	r3, [r7, #24]
 800411c:	e007      	b.n	800412e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	3301      	adds	r3, #1
 800412c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1cf      	bne.n	80040e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2200      	movs	r2, #0
 800414e:	2140      	movs	r1, #64	; 0x40
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 fc23 	bl	800499c <UART_WaitOnFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e006      	b.n	800416e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800416c:	2302      	movs	r3, #2
  }
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b08c      	sub	sp, #48	; 0x30
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	4613      	mov	r3, r2
 8004182:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	d152      	bne.n	8004236 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e04b      	b.n	8004238 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e044      	b.n	8004238 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	461a      	mov	r2, r3
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fc58 	bl	8004a78 <UART_Start_Receive_DMA>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80041ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d12c      	bne.n	8004230 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d125      	bne.n	800422a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	617b      	str	r3, [r7, #20]
   return(result);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f043 0310 	orr.w	r3, r3, #16
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	627a      	str	r2, [r7, #36]	; 0x24
 8004216:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6a39      	ldr	r1, [r7, #32]
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	61fb      	str	r3, [r7, #28]
   return(result);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e5      	bne.n	80041f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004228:	e002      	b.n	8004230 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004234:	e000      	b.n	8004238 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3730      	adds	r7, #48	; 0x30
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b0ba      	sub	sp, #232	; 0xe8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800427e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_UART_IRQHandler+0x66>
 8004292:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fd8f 	bl	8004dc2 <UART_Receive_IT>
      return;
 80042a4:	e256      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80de 	beq.w	800446c <HAL_UART_IRQHandler+0x22c>
 80042b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80d1 	beq.w	800446c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_IRQHandler+0xae>
 80042d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_UART_IRQHandler+0xd2>
 80042fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_UART_IRQHandler+0xf6>
 800431e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d011      	beq.n	8004366 <HAL_UART_IRQHandler+0x126>
 8004342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d105      	bne.n	800435a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800434e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	f043 0208 	orr.w	r2, r3, #8
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 81ed 	beq.w	800474a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_UART_IRQHandler+0x14e>
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fd1a 	bl	8004dc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_UART_IRQHandler+0x17a>
 80043b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d04f      	beq.n	800445a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fc22 	bl	8004c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d141      	bne.n	8004452 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3314      	adds	r3, #20
 80043d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004406:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1d9      	bne.n	80043ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	2b00      	cmp	r3, #0
 8004420:	d013      	beq.n	800444a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	4a7d      	ldr	r2, [pc, #500]	; (800461c <HAL_UART_IRQHandler+0x3dc>)
 8004428:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fcfc 	bl	8001e2c <HAL_DMA_Abort_IT>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004444:	4610      	mov	r0, r2
 8004446:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	e00e      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f9a4 	bl	8004798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004450:	e00a      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f9a0 	bl	8004798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004458:	e006      	b.n	8004468 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f99c 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004466:	e170      	b.n	800474a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	bf00      	nop
    return;
 800446a:	e16e      	b.n	800474a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2b01      	cmp	r3, #1
 8004472:	f040 814a 	bne.w	800470a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 8143 	beq.w	800470a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 813c 	beq.w	800470a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b2:	2b40      	cmp	r3, #64	; 0x40
 80044b4:	f040 80b4 	bne.w	8004620 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8140 	beq.w	800474e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80044d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044d6:	429a      	cmp	r2, r3
 80044d8:	f080 8139 	bcs.w	800474e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ee:	f000 8088 	beq.w	8004602 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	330c      	adds	r3, #12
 80044f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800450c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	330c      	adds	r3, #12
 800451a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800451e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004522:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800452a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1d9      	bne.n	80044f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3314      	adds	r3, #20
 8004544:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800454e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004562:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004566:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800456a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800456e:	e841 2300 	strex	r3, r2, [r1]
 8004572:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1e1      	bne.n	800453e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3314      	adds	r3, #20
 8004580:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004584:	e853 3f00 	ldrex	r3, [r3]
 8004588:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800458a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800458c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800459e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80045a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80045a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80045ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e3      	bne.n	800457a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d2:	f023 0310 	bic.w	r3, r3, #16
 80045d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80045e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e3      	bne.n	80045c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd fba5 	bl	8001d4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7fb fff8 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004618:	e099      	b.n	800474e <HAL_UART_IRQHandler+0x50e>
 800461a:	bf00      	nop
 800461c:	08004ccb 	.word	0x08004ccb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004628:	b29b      	uxth	r3, r3
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 808b 	beq.w	8004752 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800463c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8086 	beq.w	8004752 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	330c      	adds	r3, #12
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004650:	e853 3f00 	ldrex	r3, [r3]
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800465c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800466a:	647a      	str	r2, [r7, #68]	; 0x44
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004670:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e3      	bne.n	8004646 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3314      	adds	r3, #20
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	623b      	str	r3, [r7, #32]
   return(result);
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3314      	adds	r3, #20
 800469e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80046a2:	633a      	str	r2, [r7, #48]	; 0x30
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e3      	bne.n	800467e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0310 	bic.w	r3, r3, #16
 80046da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046e8:	61fa      	str	r2, [r7, #28]
 80046ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	69b9      	ldr	r1, [r7, #24]
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	617b      	str	r3, [r7, #20]
   return(result);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e3      	bne.n	80046c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fb ff80 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004708:	e023      	b.n	8004752 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b00      	cmp	r3, #0
 8004714:	d009      	beq.n	800472a <HAL_UART_IRQHandler+0x4ea>
 8004716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fae5 	bl	8004cf2 <UART_Transmit_IT>
    return;
 8004728:	e014      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800472a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <HAL_UART_IRQHandler+0x514>
 8004736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fb25 	bl	8004d92 <UART_EndTransmit_IT>
    return;
 8004748:	e004      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
    return;
 800474a:	bf00      	nop
 800474c:	e002      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
      return;
 800474e:	bf00      	nop
 8004750:	e000      	b.n	8004754 <HAL_UART_IRQHandler+0x514>
      return;
 8004752:	bf00      	nop
  }
}
 8004754:	37e8      	adds	r7, #232	; 0xe8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop

0800475c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b09c      	sub	sp, #112	; 0x70
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d172      	bne.n	80048ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	2200      	movs	r2, #0
 80047cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	e853 3f00 	ldrex	r3, [r3]
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80047e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80047f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047f6:	e841 2300 	strex	r3, r2, [r1]
 80047fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e5      	bne.n	80047ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3314      	adds	r3, #20
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	667b      	str	r3, [r7, #100]	; 0x64
 800481a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3314      	adds	r3, #20
 8004820:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004822:	647a      	str	r2, [r7, #68]	; 0x44
 8004824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004826:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800482a:	e841 2300 	strex	r3, r2, [r1]
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1e5      	bne.n	8004802 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3314      	adds	r3, #20
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	e853 3f00 	ldrex	r3, [r3]
 8004844:	623b      	str	r3, [r7, #32]
   return(result);
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484c:	663b      	str	r3, [r7, #96]	; 0x60
 800484e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3314      	adds	r3, #20
 8004854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004856:	633a      	str	r2, [r7, #48]	; 0x30
 8004858:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e5      	bne.n	8004836 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	2220      	movs	r2, #32
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	2b01      	cmp	r3, #1
 8004878:	d119      	bne.n	80048ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	e853 3f00 	ldrex	r3, [r3]
 8004888:	60fb      	str	r3, [r7, #12]
   return(result);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f023 0310 	bic.w	r3, r3, #16
 8004890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800489a:	61fa      	str	r2, [r7, #28]
 800489c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489e:	69b9      	ldr	r1, [r7, #24]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	e841 2300 	strex	r3, r2, [r1]
 80048a6:	617b      	str	r3, [r7, #20]
   return(result);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1e5      	bne.n	800487a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d106      	bne.n	80048c4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ba:	4619      	mov	r1, r3
 80048bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048be:	f7fb fea3 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048c2:	e002      	b.n	80048ca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80048c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80048c6:	f7ff ff53 	bl	8004770 <HAL_UART_RxCpltCallback>
}
 80048ca:	bf00      	nop
 80048cc:	3770      	adds	r7, #112	; 0x70
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d108      	bne.n	80048fa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f7fb fe88 	bl	8000608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048f8:	e002      	b.n	8004900 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff ff42 	bl	8004784 <HAL_UART_RxHalfCpltCallback>
}
 8004900:	bf00      	nop
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	2b80      	cmp	r3, #128	; 0x80
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b21      	cmp	r3, #33	; 0x21
 800493a:	d108      	bne.n	800494e <UART_DMAError+0x46>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f000 f933 	bl	8004bb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b22      	cmp	r3, #34	; 0x22
 800496e:	d108      	bne.n	8004982 <UART_DMAError+0x7a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2200      	movs	r2, #0
 800497a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800497c:	68b8      	ldr	r0, [r7, #8]
 800497e:	f000 f941 	bl	8004c04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f043 0210 	orr.w	r2, r3, #16
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800498e:	68b8      	ldr	r0, [r7, #8]
 8004990:	f7ff ff02 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004994:	bf00      	nop
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b090      	sub	sp, #64	; 0x40
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4613      	mov	r3, r2
 80049aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ac:	e050      	b.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b4:	d04c      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
 80049bc:	f7fc ffa2 	bl	8001904 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d241      	bcs.n	8004a50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	330c      	adds	r3, #12
 80049ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049ec:	637a      	str	r2, [r7, #52]	; 0x34
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3314      	adds	r3, #20
 8004a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f023 0301 	bic.w	r3, r3, #1
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3314      	adds	r3, #20
 8004a1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a20:	623a      	str	r2, [r7, #32]
 8004a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	69f9      	ldr	r1, [r7, #28]
 8004a26:	6a3a      	ldr	r2, [r7, #32]
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e5      	bne.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e00f      	b.n	8004a70 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d09f      	beq.n	80049ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3740      	adds	r7, #64	; 0x40
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b098      	sub	sp, #96	; 0x60
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2222      	movs	r2, #34	; 0x22
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa4:	4a40      	ldr	r2, [pc, #256]	; (8004ba8 <UART_Start_Receive_DMA+0x130>)
 8004aa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	4a3f      	ldr	r2, [pc, #252]	; (8004bac <UART_Start_Receive_DMA+0x134>)
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	4a3e      	ldr	r2, [pc, #248]	; (8004bb0 <UART_Start_Receive_DMA+0x138>)
 8004ab6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	2200      	movs	r2, #0
 8004abe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ac0:	f107 0308 	add.w	r3, r7, #8
 8004ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	88fb      	ldrh	r3, [r7, #6]
 8004ad8:	f7fd f8e0 	bl	8001c9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d019      	beq.n	8004b36 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2a:	e841 2300 	strex	r3, r2, [r1]
 8004b2e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1e5      	bne.n	8004b02 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3314      	adds	r3, #20
 8004b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b56:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e5      	bne.n	8004b36 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b80:	653b      	str	r3, [r7, #80]	; 0x50
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b8a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6a39      	ldr	r1, [r7, #32]
 8004b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e5      	bne.n	8004b6a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3760      	adds	r7, #96	; 0x60
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	080047ad 	.word	0x080047ad
 8004bac:	080048d3 	.word	0x080048d3
 8004bb0:	08004909 	.word	0x08004909

08004bb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	330c      	adds	r3, #12
 8004bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bd2:	61fb      	str	r3, [r7, #28]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	61ba      	str	r2, [r7, #24]
 8004bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6979      	ldr	r1, [r7, #20]
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004bf8:	bf00      	nop
 8004bfa:	3724      	adds	r7, #36	; 0x24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b095      	sub	sp, #84	; 0x54
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3314      	adds	r3, #20
 8004c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3314      	adds	r3, #20
 8004c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d119      	bne.n	8004cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	330c      	adds	r3, #12
 8004c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	e853 3f00 	ldrex	r3, [r3]
 8004c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f023 0310 	bic.w	r3, r3, #16
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c9c:	61ba      	str	r2, [r7, #24]
 8004c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca0:	6979      	ldr	r1, [r7, #20]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	e841 2300 	strex	r3, r2, [r1]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1e5      	bne.n	8004c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004cbe:	bf00      	nop
 8004cc0:	3754      	adds	r7, #84	; 0x54
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff fd57 	bl	8004798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cea:	bf00      	nop
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b21      	cmp	r3, #33	; 0x21
 8004d04:	d13e      	bne.n	8004d84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d114      	bne.n	8004d3a <UART_Transmit_IT+0x48>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d110      	bne.n	8004d3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	1c9a      	adds	r2, r3, #2
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	621a      	str	r2, [r3, #32]
 8004d38:	e008      	b.n	8004d4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	1c59      	adds	r1, r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6211      	str	r1, [r2, #32]
 8004d44:	781a      	ldrb	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10f      	bne.n	8004d80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e000      	b.n	8004d86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d84:	2302      	movs	r3, #2
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff fcd2 	bl	800475c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b08c      	sub	sp, #48	; 0x30
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b22      	cmp	r3, #34	; 0x22
 8004dd4:	f040 80ab 	bne.w	8004f2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de0:	d117      	bne.n	8004e12 <UART_Receive_IT+0x50>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d113      	bne.n	8004e12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	1c9a      	adds	r2, r3, #2
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e10:	e026      	b.n	8004e60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e24:	d007      	beq.n	8004e36 <UART_Receive_IT+0x74>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <UART_Receive_IT+0x82>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e008      	b.n	8004e56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d15a      	bne.n	8004f2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f022 0220 	bic.w	r2, r2, #32
 8004e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d135      	bne.n	8004f20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f023 0310 	bic.w	r3, r3, #16
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eda:	623a      	str	r2, [r7, #32]
 8004edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	69f9      	ldr	r1, [r7, #28]
 8004ee0:	6a3a      	ldr	r2, [r7, #32]
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b10      	cmp	r3, #16
 8004efa:	d10a      	bne.n	8004f12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fb fb75 	bl	8000608 <HAL_UARTEx_RxEventCallback>
 8004f1e:	e002      	b.n	8004f26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fc25 	bl	8004770 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e002      	b.n	8004f30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e000      	b.n	8004f30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004f2e:	2302      	movs	r3, #2
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3730      	adds	r7, #48	; 0x30
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b0c0      	sub	sp, #256	; 0x100
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	68d9      	ldr	r1, [r3, #12]
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	ea40 0301 	orr.w	r3, r0, r1
 8004f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f90:	f021 010c 	bic.w	r1, r1, #12
 8004f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb2:	6999      	ldr	r1, [r3, #24]
 8004fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	ea40 0301 	orr.w	r3, r0, r1
 8004fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	4b8f      	ldr	r3, [pc, #572]	; (8005204 <UART_SetConfig+0x2cc>)
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d005      	beq.n	8004fd8 <UART_SetConfig+0xa0>
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b8d      	ldr	r3, [pc, #564]	; (8005208 <UART_SetConfig+0x2d0>)
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d104      	bne.n	8004fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fd8:	f7fd ff96 	bl	8002f08 <HAL_RCC_GetPCLK2Freq>
 8004fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004fe0:	e003      	b.n	8004fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe2:	f7fd ff7d 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8004fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff4:	f040 810c 	bne.w	8005210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005002:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800500a:	4622      	mov	r2, r4
 800500c:	462b      	mov	r3, r5
 800500e:	1891      	adds	r1, r2, r2
 8005010:	65b9      	str	r1, [r7, #88]	; 0x58
 8005012:	415b      	adcs	r3, r3
 8005014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800501a:	4621      	mov	r1, r4
 800501c:	eb12 0801 	adds.w	r8, r2, r1
 8005020:	4629      	mov	r1, r5
 8005022:	eb43 0901 	adc.w	r9, r3, r1
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503a:	4690      	mov	r8, r2
 800503c:	4699      	mov	r9, r3
 800503e:	4623      	mov	r3, r4
 8005040:	eb18 0303 	adds.w	r3, r8, r3
 8005044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005048:	462b      	mov	r3, r5
 800504a:	eb49 0303 	adc.w	r3, r9, r3
 800504e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800505e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005066:	460b      	mov	r3, r1
 8005068:	18db      	adds	r3, r3, r3
 800506a:	653b      	str	r3, [r7, #80]	; 0x50
 800506c:	4613      	mov	r3, r2
 800506e:	eb42 0303 	adc.w	r3, r2, r3
 8005072:	657b      	str	r3, [r7, #84]	; 0x54
 8005074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800507c:	f7fb f900 	bl	8000280 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b61      	ldr	r3, [pc, #388]	; (800520c <UART_SetConfig+0x2d4>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	011c      	lsls	r4, r3, #4
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005098:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800509c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80050a8:	415b      	adcs	r3, r3
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80050b0:	4641      	mov	r1, r8
 80050b2:	eb12 0a01 	adds.w	sl, r2, r1
 80050b6:	4649      	mov	r1, r9
 80050b8:	eb43 0b01 	adc.w	fp, r3, r1
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d0:	4692      	mov	sl, r2
 80050d2:	469b      	mov	fp, r3
 80050d4:	4643      	mov	r3, r8
 80050d6:	eb1a 0303 	adds.w	r3, sl, r3
 80050da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050de:	464b      	mov	r3, r9
 80050e0:	eb4b 0303 	adc.w	r3, fp, r3
 80050e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050fc:	460b      	mov	r3, r1
 80050fe:	18db      	adds	r3, r3, r3
 8005100:	643b      	str	r3, [r7, #64]	; 0x40
 8005102:	4613      	mov	r3, r2
 8005104:	eb42 0303 	adc.w	r3, r2, r3
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
 800510a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800510e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005112:	f7fb f8b5 	bl	8000280 <__aeabi_uldivmod>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4611      	mov	r1, r2
 800511c:	4b3b      	ldr	r3, [pc, #236]	; (800520c <UART_SetConfig+0x2d4>)
 800511e:	fba3 2301 	umull	r2, r3, r3, r1
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	2264      	movs	r2, #100	; 0x64
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	1acb      	subs	r3, r1, r3
 800512c:	00db      	lsls	r3, r3, #3
 800512e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005132:	4b36      	ldr	r3, [pc, #216]	; (800520c <UART_SetConfig+0x2d4>)
 8005134:	fba3 2302 	umull	r2, r3, r3, r2
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005140:	441c      	add	r4, r3
 8005142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800514c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	63b9      	str	r1, [r7, #56]	; 0x38
 800515c:	415b      	adcs	r3, r3
 800515e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005164:	4641      	mov	r1, r8
 8005166:	1851      	adds	r1, r2, r1
 8005168:	6339      	str	r1, [r7, #48]	; 0x30
 800516a:	4649      	mov	r1, r9
 800516c:	414b      	adcs	r3, r1
 800516e:	637b      	str	r3, [r7, #52]	; 0x34
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800517c:	4659      	mov	r1, fp
 800517e:	00cb      	lsls	r3, r1, #3
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005186:	4651      	mov	r1, sl
 8005188:	00ca      	lsls	r2, r1, #3
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	4603      	mov	r3, r0
 8005190:	4642      	mov	r2, r8
 8005192:	189b      	adds	r3, r3, r2
 8005194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005198:	464b      	mov	r3, r9
 800519a:	460a      	mov	r2, r1
 800519c:	eb42 0303 	adc.w	r3, r2, r3
 80051a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80051b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80051b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80051b8:	460b      	mov	r3, r1
 80051ba:	18db      	adds	r3, r3, r3
 80051bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80051be:	4613      	mov	r3, r2
 80051c0:	eb42 0303 	adc.w	r3, r2, r3
 80051c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80051ce:	f7fb f857 	bl	8000280 <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <UART_SetConfig+0x2d4>)
 80051d8:	fba3 1302 	umull	r1, r3, r3, r2
 80051dc:	095b      	lsrs	r3, r3, #5
 80051de:	2164      	movs	r1, #100	; 0x64
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	3332      	adds	r3, #50	; 0x32
 80051ea:	4a08      	ldr	r2, [pc, #32]	; (800520c <UART_SetConfig+0x2d4>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	095b      	lsrs	r3, r3, #5
 80051f2:	f003 0207 	and.w	r2, r3, #7
 80051f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4422      	add	r2, r4
 80051fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005200:	e106      	b.n	8005410 <UART_SetConfig+0x4d8>
 8005202:	bf00      	nop
 8005204:	40011000 	.word	0x40011000
 8005208:	40011400 	.word	0x40011400
 800520c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005214:	2200      	movs	r2, #0
 8005216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800521a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800521e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005222:	4642      	mov	r2, r8
 8005224:	464b      	mov	r3, r9
 8005226:	1891      	adds	r1, r2, r2
 8005228:	6239      	str	r1, [r7, #32]
 800522a:	415b      	adcs	r3, r3
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005232:	4641      	mov	r1, r8
 8005234:	1854      	adds	r4, r2, r1
 8005236:	4649      	mov	r1, r9
 8005238:	eb43 0501 	adc.w	r5, r3, r1
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	00eb      	lsls	r3, r5, #3
 8005246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524a:	00e2      	lsls	r2, r4, #3
 800524c:	4614      	mov	r4, r2
 800524e:	461d      	mov	r5, r3
 8005250:	4643      	mov	r3, r8
 8005252:	18e3      	adds	r3, r4, r3
 8005254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005258:	464b      	mov	r3, r9
 800525a:	eb45 0303 	adc.w	r3, r5, r3
 800525e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800526e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800527e:	4629      	mov	r1, r5
 8005280:	008b      	lsls	r3, r1, #2
 8005282:	4621      	mov	r1, r4
 8005284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005288:	4621      	mov	r1, r4
 800528a:	008a      	lsls	r2, r1, #2
 800528c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005290:	f7fa fff6 	bl	8000280 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4b60      	ldr	r3, [pc, #384]	; (800541c <UART_SetConfig+0x4e4>)
 800529a:	fba3 2302 	umull	r2, r3, r3, r2
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	011c      	lsls	r4, r3, #4
 80052a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80052b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80052b4:	4642      	mov	r2, r8
 80052b6:	464b      	mov	r3, r9
 80052b8:	1891      	adds	r1, r2, r2
 80052ba:	61b9      	str	r1, [r7, #24]
 80052bc:	415b      	adcs	r3, r3
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c4:	4641      	mov	r1, r8
 80052c6:	1851      	adds	r1, r2, r1
 80052c8:	6139      	str	r1, [r7, #16]
 80052ca:	4649      	mov	r1, r9
 80052cc:	414b      	adcs	r3, r1
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052dc:	4659      	mov	r1, fp
 80052de:	00cb      	lsls	r3, r1, #3
 80052e0:	4651      	mov	r1, sl
 80052e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052e6:	4651      	mov	r1, sl
 80052e8:	00ca      	lsls	r2, r1, #3
 80052ea:	4610      	mov	r0, r2
 80052ec:	4619      	mov	r1, r3
 80052ee:	4603      	mov	r3, r0
 80052f0:	4642      	mov	r2, r8
 80052f2:	189b      	adds	r3, r3, r2
 80052f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f8:	464b      	mov	r3, r9
 80052fa:	460a      	mov	r2, r1
 80052fc:	eb42 0303 	adc.w	r3, r2, r3
 8005300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	67bb      	str	r3, [r7, #120]	; 0x78
 800530e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800531c:	4649      	mov	r1, r9
 800531e:	008b      	lsls	r3, r1, #2
 8005320:	4641      	mov	r1, r8
 8005322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005326:	4641      	mov	r1, r8
 8005328:	008a      	lsls	r2, r1, #2
 800532a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800532e:	f7fa ffa7 	bl	8000280 <__aeabi_uldivmod>
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4611      	mov	r1, r2
 8005338:	4b38      	ldr	r3, [pc, #224]	; (800541c <UART_SetConfig+0x4e4>)
 800533a:	fba3 2301 	umull	r2, r3, r3, r1
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	2264      	movs	r2, #100	; 0x64
 8005342:	fb02 f303 	mul.w	r3, r2, r3
 8005346:	1acb      	subs	r3, r1, r3
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	3332      	adds	r3, #50	; 0x32
 800534c:	4a33      	ldr	r2, [pc, #204]	; (800541c <UART_SetConfig+0x4e4>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005358:	441c      	add	r4, r3
 800535a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535e:	2200      	movs	r2, #0
 8005360:	673b      	str	r3, [r7, #112]	; 0x70
 8005362:	677a      	str	r2, [r7, #116]	; 0x74
 8005364:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	415b      	adcs	r3, r3
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005378:	4641      	mov	r1, r8
 800537a:	1851      	adds	r1, r2, r1
 800537c:	6039      	str	r1, [r7, #0]
 800537e:	4649      	mov	r1, r9
 8005380:	414b      	adcs	r3, r1
 8005382:	607b      	str	r3, [r7, #4]
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005390:	4659      	mov	r1, fp
 8005392:	00cb      	lsls	r3, r1, #3
 8005394:	4651      	mov	r1, sl
 8005396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539a:	4651      	mov	r1, sl
 800539c:	00ca      	lsls	r2, r1, #3
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	4642      	mov	r2, r8
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053aa:	464b      	mov	r3, r9
 80053ac:	460a      	mov	r2, r1
 80053ae:	eb42 0303 	adc.w	r3, r2, r3
 80053b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	663b      	str	r3, [r7, #96]	; 0x60
 80053be:	667a      	str	r2, [r7, #100]	; 0x64
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80053cc:	4649      	mov	r1, r9
 80053ce:	008b      	lsls	r3, r1, #2
 80053d0:	4641      	mov	r1, r8
 80053d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053d6:	4641      	mov	r1, r8
 80053d8:	008a      	lsls	r2, r1, #2
 80053da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80053de:	f7fa ff4f 	bl	8000280 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <UART_SetConfig+0x4e4>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2164      	movs	r1, #100	; 0x64
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	3332      	adds	r3, #50	; 0x32
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <UART_SetConfig+0x4e4>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f003 020f 	and.w	r2, r3, #15
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4422      	add	r2, r4
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	bf00      	nop
 8005412:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005416:	46bd      	mov	sp, r7
 8005418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800541c:	51eb851f 	.word	0x51eb851f

08005420 <atoi>:
 8005420:	220a      	movs	r2, #10
 8005422:	2100      	movs	r1, #0
 8005424:	f000 b882 	b.w	800552c <strtol>

08005428 <_strtol_l.constprop.0>:
 8005428:	2b01      	cmp	r3, #1
 800542a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800542e:	d001      	beq.n	8005434 <_strtol_l.constprop.0+0xc>
 8005430:	2b24      	cmp	r3, #36	; 0x24
 8005432:	d906      	bls.n	8005442 <_strtol_l.constprop.0+0x1a>
 8005434:	f000 f8ac 	bl	8005590 <__errno>
 8005438:	2316      	movs	r3, #22
 800543a:	6003      	str	r3, [r0, #0]
 800543c:	2000      	movs	r0, #0
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005528 <_strtol_l.constprop.0+0x100>
 8005446:	460d      	mov	r5, r1
 8005448:	462e      	mov	r6, r5
 800544a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800544e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005452:	f017 0708 	ands.w	r7, r7, #8
 8005456:	d1f7      	bne.n	8005448 <_strtol_l.constprop.0+0x20>
 8005458:	2c2d      	cmp	r4, #45	; 0x2d
 800545a:	d132      	bne.n	80054c2 <_strtol_l.constprop.0+0x9a>
 800545c:	782c      	ldrb	r4, [r5, #0]
 800545e:	2701      	movs	r7, #1
 8005460:	1cb5      	adds	r5, r6, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d05b      	beq.n	800551e <_strtol_l.constprop.0+0xf6>
 8005466:	2b10      	cmp	r3, #16
 8005468:	d109      	bne.n	800547e <_strtol_l.constprop.0+0x56>
 800546a:	2c30      	cmp	r4, #48	; 0x30
 800546c:	d107      	bne.n	800547e <_strtol_l.constprop.0+0x56>
 800546e:	782c      	ldrb	r4, [r5, #0]
 8005470:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005474:	2c58      	cmp	r4, #88	; 0x58
 8005476:	d14d      	bne.n	8005514 <_strtol_l.constprop.0+0xec>
 8005478:	786c      	ldrb	r4, [r5, #1]
 800547a:	2310      	movs	r3, #16
 800547c:	3502      	adds	r5, #2
 800547e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005482:	f108 38ff 	add.w	r8, r8, #4294967295
 8005486:	f04f 0e00 	mov.w	lr, #0
 800548a:	fbb8 f9f3 	udiv	r9, r8, r3
 800548e:	4676      	mov	r6, lr
 8005490:	fb03 8a19 	mls	sl, r3, r9, r8
 8005494:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005498:	f1bc 0f09 	cmp.w	ip, #9
 800549c:	d816      	bhi.n	80054cc <_strtol_l.constprop.0+0xa4>
 800549e:	4664      	mov	r4, ip
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	dd24      	ble.n	80054ee <_strtol_l.constprop.0+0xc6>
 80054a4:	f1be 3fff 	cmp.w	lr, #4294967295
 80054a8:	d008      	beq.n	80054bc <_strtol_l.constprop.0+0x94>
 80054aa:	45b1      	cmp	r9, r6
 80054ac:	d31c      	bcc.n	80054e8 <_strtol_l.constprop.0+0xc0>
 80054ae:	d101      	bne.n	80054b4 <_strtol_l.constprop.0+0x8c>
 80054b0:	45a2      	cmp	sl, r4
 80054b2:	db19      	blt.n	80054e8 <_strtol_l.constprop.0+0xc0>
 80054b4:	fb06 4603 	mla	r6, r6, r3, r4
 80054b8:	f04f 0e01 	mov.w	lr, #1
 80054bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054c0:	e7e8      	b.n	8005494 <_strtol_l.constprop.0+0x6c>
 80054c2:	2c2b      	cmp	r4, #43	; 0x2b
 80054c4:	bf04      	itt	eq
 80054c6:	782c      	ldrbeq	r4, [r5, #0]
 80054c8:	1cb5      	addeq	r5, r6, #2
 80054ca:	e7ca      	b.n	8005462 <_strtol_l.constprop.0+0x3a>
 80054cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80054d0:	f1bc 0f19 	cmp.w	ip, #25
 80054d4:	d801      	bhi.n	80054da <_strtol_l.constprop.0+0xb2>
 80054d6:	3c37      	subs	r4, #55	; 0x37
 80054d8:	e7e2      	b.n	80054a0 <_strtol_l.constprop.0+0x78>
 80054da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80054de:	f1bc 0f19 	cmp.w	ip, #25
 80054e2:	d804      	bhi.n	80054ee <_strtol_l.constprop.0+0xc6>
 80054e4:	3c57      	subs	r4, #87	; 0x57
 80054e6:	e7db      	b.n	80054a0 <_strtol_l.constprop.0+0x78>
 80054e8:	f04f 3eff 	mov.w	lr, #4294967295
 80054ec:	e7e6      	b.n	80054bc <_strtol_l.constprop.0+0x94>
 80054ee:	f1be 3fff 	cmp.w	lr, #4294967295
 80054f2:	d105      	bne.n	8005500 <_strtol_l.constprop.0+0xd8>
 80054f4:	2322      	movs	r3, #34	; 0x22
 80054f6:	6003      	str	r3, [r0, #0]
 80054f8:	4646      	mov	r6, r8
 80054fa:	b942      	cbnz	r2, 800550e <_strtol_l.constprop.0+0xe6>
 80054fc:	4630      	mov	r0, r6
 80054fe:	e79e      	b.n	800543e <_strtol_l.constprop.0+0x16>
 8005500:	b107      	cbz	r7, 8005504 <_strtol_l.constprop.0+0xdc>
 8005502:	4276      	negs	r6, r6
 8005504:	2a00      	cmp	r2, #0
 8005506:	d0f9      	beq.n	80054fc <_strtol_l.constprop.0+0xd4>
 8005508:	f1be 0f00 	cmp.w	lr, #0
 800550c:	d000      	beq.n	8005510 <_strtol_l.constprop.0+0xe8>
 800550e:	1e69      	subs	r1, r5, #1
 8005510:	6011      	str	r1, [r2, #0]
 8005512:	e7f3      	b.n	80054fc <_strtol_l.constprop.0+0xd4>
 8005514:	2430      	movs	r4, #48	; 0x30
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1b1      	bne.n	800547e <_strtol_l.constprop.0+0x56>
 800551a:	2308      	movs	r3, #8
 800551c:	e7af      	b.n	800547e <_strtol_l.constprop.0+0x56>
 800551e:	2c30      	cmp	r4, #48	; 0x30
 8005520:	d0a5      	beq.n	800546e <_strtol_l.constprop.0+0x46>
 8005522:	230a      	movs	r3, #10
 8005524:	e7ab      	b.n	800547e <_strtol_l.constprop.0+0x56>
 8005526:	bf00      	nop
 8005528:	08005ec9 	.word	0x08005ec9

0800552c <strtol>:
 800552c:	4613      	mov	r3, r2
 800552e:	460a      	mov	r2, r1
 8005530:	4601      	mov	r1, r0
 8005532:	4802      	ldr	r0, [pc, #8]	; (800553c <strtol+0x10>)
 8005534:	6800      	ldr	r0, [r0, #0]
 8005536:	f7ff bf77 	b.w	8005428 <_strtol_l.constprop.0>
 800553a:	bf00      	nop
 800553c:	20000058 	.word	0x20000058

08005540 <siprintf>:
 8005540:	b40e      	push	{r1, r2, r3}
 8005542:	b500      	push	{lr}
 8005544:	b09c      	sub	sp, #112	; 0x70
 8005546:	ab1d      	add	r3, sp, #116	; 0x74
 8005548:	9002      	str	r0, [sp, #8]
 800554a:	9006      	str	r0, [sp, #24]
 800554c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005550:	4809      	ldr	r0, [pc, #36]	; (8005578 <siprintf+0x38>)
 8005552:	9107      	str	r1, [sp, #28]
 8005554:	9104      	str	r1, [sp, #16]
 8005556:	4909      	ldr	r1, [pc, #36]	; (800557c <siprintf+0x3c>)
 8005558:	f853 2b04 	ldr.w	r2, [r3], #4
 800555c:	9105      	str	r1, [sp, #20]
 800555e:	6800      	ldr	r0, [r0, #0]
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	a902      	add	r1, sp, #8
 8005564:	f000 f992 	bl	800588c <_svfiprintf_r>
 8005568:	9b02      	ldr	r3, [sp, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	b01c      	add	sp, #112	; 0x70
 8005570:	f85d eb04 	ldr.w	lr, [sp], #4
 8005574:	b003      	add	sp, #12
 8005576:	4770      	bx	lr
 8005578:	20000058 	.word	0x20000058
 800557c:	ffff0208 	.word	0xffff0208

08005580 <memset>:
 8005580:	4402      	add	r2, r0
 8005582:	4603      	mov	r3, r0
 8005584:	4293      	cmp	r3, r2
 8005586:	d100      	bne.n	800558a <memset+0xa>
 8005588:	4770      	bx	lr
 800558a:	f803 1b01 	strb.w	r1, [r3], #1
 800558e:	e7f9      	b.n	8005584 <memset+0x4>

08005590 <__errno>:
 8005590:	4b01      	ldr	r3, [pc, #4]	; (8005598 <__errno+0x8>)
 8005592:	6818      	ldr	r0, [r3, #0]
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	20000058 	.word	0x20000058

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4d0d      	ldr	r5, [pc, #52]	; (80055d4 <__libc_init_array+0x38>)
 80055a0:	4c0d      	ldr	r4, [pc, #52]	; (80055d8 <__libc_init_array+0x3c>)
 80055a2:	1b64      	subs	r4, r4, r5
 80055a4:	10a4      	asrs	r4, r4, #2
 80055a6:	2600      	movs	r6, #0
 80055a8:	42a6      	cmp	r6, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	4d0b      	ldr	r5, [pc, #44]	; (80055dc <__libc_init_array+0x40>)
 80055ae:	4c0c      	ldr	r4, [pc, #48]	; (80055e0 <__libc_init_array+0x44>)
 80055b0:	f000 fc6a 	bl	8005e88 <_init>
 80055b4:	1b64      	subs	r4, r4, r5
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	2600      	movs	r6, #0
 80055ba:	42a6      	cmp	r6, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c4:	4798      	blx	r3
 80055c6:	3601      	adds	r6, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ce:	4798      	blx	r3
 80055d0:	3601      	adds	r6, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	08006004 	.word	0x08006004
 80055d8:	08006004 	.word	0x08006004
 80055dc:	08006004 	.word	0x08006004
 80055e0:	08006008 	.word	0x08006008

080055e4 <__retarget_lock_acquire_recursive>:
 80055e4:	4770      	bx	lr

080055e6 <__retarget_lock_release_recursive>:
 80055e6:	4770      	bx	lr

080055e8 <_free_r>:
 80055e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ea:	2900      	cmp	r1, #0
 80055ec:	d044      	beq.n	8005678 <_free_r+0x90>
 80055ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055f2:	9001      	str	r0, [sp, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f1a1 0404 	sub.w	r4, r1, #4
 80055fa:	bfb8      	it	lt
 80055fc:	18e4      	addlt	r4, r4, r3
 80055fe:	f000 f8df 	bl	80057c0 <__malloc_lock>
 8005602:	4a1e      	ldr	r2, [pc, #120]	; (800567c <_free_r+0x94>)
 8005604:	9801      	ldr	r0, [sp, #4]
 8005606:	6813      	ldr	r3, [r2, #0]
 8005608:	b933      	cbnz	r3, 8005618 <_free_r+0x30>
 800560a:	6063      	str	r3, [r4, #4]
 800560c:	6014      	str	r4, [r2, #0]
 800560e:	b003      	add	sp, #12
 8005610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005614:	f000 b8da 	b.w	80057cc <__malloc_unlock>
 8005618:	42a3      	cmp	r3, r4
 800561a:	d908      	bls.n	800562e <_free_r+0x46>
 800561c:	6825      	ldr	r5, [r4, #0]
 800561e:	1961      	adds	r1, r4, r5
 8005620:	428b      	cmp	r3, r1
 8005622:	bf01      	itttt	eq
 8005624:	6819      	ldreq	r1, [r3, #0]
 8005626:	685b      	ldreq	r3, [r3, #4]
 8005628:	1949      	addeq	r1, r1, r5
 800562a:	6021      	streq	r1, [r4, #0]
 800562c:	e7ed      	b.n	800560a <_free_r+0x22>
 800562e:	461a      	mov	r2, r3
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b10b      	cbz	r3, 8005638 <_free_r+0x50>
 8005634:	42a3      	cmp	r3, r4
 8005636:	d9fa      	bls.n	800562e <_free_r+0x46>
 8005638:	6811      	ldr	r1, [r2, #0]
 800563a:	1855      	adds	r5, r2, r1
 800563c:	42a5      	cmp	r5, r4
 800563e:	d10b      	bne.n	8005658 <_free_r+0x70>
 8005640:	6824      	ldr	r4, [r4, #0]
 8005642:	4421      	add	r1, r4
 8005644:	1854      	adds	r4, r2, r1
 8005646:	42a3      	cmp	r3, r4
 8005648:	6011      	str	r1, [r2, #0]
 800564a:	d1e0      	bne.n	800560e <_free_r+0x26>
 800564c:	681c      	ldr	r4, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	6053      	str	r3, [r2, #4]
 8005652:	440c      	add	r4, r1
 8005654:	6014      	str	r4, [r2, #0]
 8005656:	e7da      	b.n	800560e <_free_r+0x26>
 8005658:	d902      	bls.n	8005660 <_free_r+0x78>
 800565a:	230c      	movs	r3, #12
 800565c:	6003      	str	r3, [r0, #0]
 800565e:	e7d6      	b.n	800560e <_free_r+0x26>
 8005660:	6825      	ldr	r5, [r4, #0]
 8005662:	1961      	adds	r1, r4, r5
 8005664:	428b      	cmp	r3, r1
 8005666:	bf04      	itt	eq
 8005668:	6819      	ldreq	r1, [r3, #0]
 800566a:	685b      	ldreq	r3, [r3, #4]
 800566c:	6063      	str	r3, [r4, #4]
 800566e:	bf04      	itt	eq
 8005670:	1949      	addeq	r1, r1, r5
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	6054      	str	r4, [r2, #4]
 8005676:	e7ca      	b.n	800560e <_free_r+0x26>
 8005678:	b003      	add	sp, #12
 800567a:	bd30      	pop	{r4, r5, pc}
 800567c:	20000510 	.word	0x20000510

08005680 <sbrk_aligned>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4e0e      	ldr	r6, [pc, #56]	; (80056bc <sbrk_aligned+0x3c>)
 8005684:	460c      	mov	r4, r1
 8005686:	6831      	ldr	r1, [r6, #0]
 8005688:	4605      	mov	r5, r0
 800568a:	b911      	cbnz	r1, 8005692 <sbrk_aligned+0x12>
 800568c:	f000 fba6 	bl	8005ddc <_sbrk_r>
 8005690:	6030      	str	r0, [r6, #0]
 8005692:	4621      	mov	r1, r4
 8005694:	4628      	mov	r0, r5
 8005696:	f000 fba1 	bl	8005ddc <_sbrk_r>
 800569a:	1c43      	adds	r3, r0, #1
 800569c:	d00a      	beq.n	80056b4 <sbrk_aligned+0x34>
 800569e:	1cc4      	adds	r4, r0, #3
 80056a0:	f024 0403 	bic.w	r4, r4, #3
 80056a4:	42a0      	cmp	r0, r4
 80056a6:	d007      	beq.n	80056b8 <sbrk_aligned+0x38>
 80056a8:	1a21      	subs	r1, r4, r0
 80056aa:	4628      	mov	r0, r5
 80056ac:	f000 fb96 	bl	8005ddc <_sbrk_r>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d101      	bne.n	80056b8 <sbrk_aligned+0x38>
 80056b4:	f04f 34ff 	mov.w	r4, #4294967295
 80056b8:	4620      	mov	r0, r4
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	20000514 	.word	0x20000514

080056c0 <_malloc_r>:
 80056c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	1ccd      	adds	r5, r1, #3
 80056c6:	f025 0503 	bic.w	r5, r5, #3
 80056ca:	3508      	adds	r5, #8
 80056cc:	2d0c      	cmp	r5, #12
 80056ce:	bf38      	it	cc
 80056d0:	250c      	movcc	r5, #12
 80056d2:	2d00      	cmp	r5, #0
 80056d4:	4607      	mov	r7, r0
 80056d6:	db01      	blt.n	80056dc <_malloc_r+0x1c>
 80056d8:	42a9      	cmp	r1, r5
 80056da:	d905      	bls.n	80056e8 <_malloc_r+0x28>
 80056dc:	230c      	movs	r3, #12
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	2600      	movs	r6, #0
 80056e2:	4630      	mov	r0, r6
 80056e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80057bc <_malloc_r+0xfc>
 80056ec:	f000 f868 	bl	80057c0 <__malloc_lock>
 80056f0:	f8d8 3000 	ldr.w	r3, [r8]
 80056f4:	461c      	mov	r4, r3
 80056f6:	bb5c      	cbnz	r4, 8005750 <_malloc_r+0x90>
 80056f8:	4629      	mov	r1, r5
 80056fa:	4638      	mov	r0, r7
 80056fc:	f7ff ffc0 	bl	8005680 <sbrk_aligned>
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	4604      	mov	r4, r0
 8005704:	d155      	bne.n	80057b2 <_malloc_r+0xf2>
 8005706:	f8d8 4000 	ldr.w	r4, [r8]
 800570a:	4626      	mov	r6, r4
 800570c:	2e00      	cmp	r6, #0
 800570e:	d145      	bne.n	800579c <_malloc_r+0xdc>
 8005710:	2c00      	cmp	r4, #0
 8005712:	d048      	beq.n	80057a6 <_malloc_r+0xe6>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	4631      	mov	r1, r6
 8005718:	4638      	mov	r0, r7
 800571a:	eb04 0903 	add.w	r9, r4, r3
 800571e:	f000 fb5d 	bl	8005ddc <_sbrk_r>
 8005722:	4581      	cmp	r9, r0
 8005724:	d13f      	bne.n	80057a6 <_malloc_r+0xe6>
 8005726:	6821      	ldr	r1, [r4, #0]
 8005728:	1a6d      	subs	r5, r5, r1
 800572a:	4629      	mov	r1, r5
 800572c:	4638      	mov	r0, r7
 800572e:	f7ff ffa7 	bl	8005680 <sbrk_aligned>
 8005732:	3001      	adds	r0, #1
 8005734:	d037      	beq.n	80057a6 <_malloc_r+0xe6>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	442b      	add	r3, r5
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	f8d8 3000 	ldr.w	r3, [r8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d038      	beq.n	80057b6 <_malloc_r+0xf6>
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	42a2      	cmp	r2, r4
 8005748:	d12b      	bne.n	80057a2 <_malloc_r+0xe2>
 800574a:	2200      	movs	r2, #0
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	e00f      	b.n	8005770 <_malloc_r+0xb0>
 8005750:	6822      	ldr	r2, [r4, #0]
 8005752:	1b52      	subs	r2, r2, r5
 8005754:	d41f      	bmi.n	8005796 <_malloc_r+0xd6>
 8005756:	2a0b      	cmp	r2, #11
 8005758:	d917      	bls.n	800578a <_malloc_r+0xca>
 800575a:	1961      	adds	r1, r4, r5
 800575c:	42a3      	cmp	r3, r4
 800575e:	6025      	str	r5, [r4, #0]
 8005760:	bf18      	it	ne
 8005762:	6059      	strne	r1, [r3, #4]
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	bf08      	it	eq
 8005768:	f8c8 1000 	streq.w	r1, [r8]
 800576c:	5162      	str	r2, [r4, r5]
 800576e:	604b      	str	r3, [r1, #4]
 8005770:	4638      	mov	r0, r7
 8005772:	f104 060b 	add.w	r6, r4, #11
 8005776:	f000 f829 	bl	80057cc <__malloc_unlock>
 800577a:	f026 0607 	bic.w	r6, r6, #7
 800577e:	1d23      	adds	r3, r4, #4
 8005780:	1af2      	subs	r2, r6, r3
 8005782:	d0ae      	beq.n	80056e2 <_malloc_r+0x22>
 8005784:	1b9b      	subs	r3, r3, r6
 8005786:	50a3      	str	r3, [r4, r2]
 8005788:	e7ab      	b.n	80056e2 <_malloc_r+0x22>
 800578a:	42a3      	cmp	r3, r4
 800578c:	6862      	ldr	r2, [r4, #4]
 800578e:	d1dd      	bne.n	800574c <_malloc_r+0x8c>
 8005790:	f8c8 2000 	str.w	r2, [r8]
 8005794:	e7ec      	b.n	8005770 <_malloc_r+0xb0>
 8005796:	4623      	mov	r3, r4
 8005798:	6864      	ldr	r4, [r4, #4]
 800579a:	e7ac      	b.n	80056f6 <_malloc_r+0x36>
 800579c:	4634      	mov	r4, r6
 800579e:	6876      	ldr	r6, [r6, #4]
 80057a0:	e7b4      	b.n	800570c <_malloc_r+0x4c>
 80057a2:	4613      	mov	r3, r2
 80057a4:	e7cc      	b.n	8005740 <_malloc_r+0x80>
 80057a6:	230c      	movs	r3, #12
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4638      	mov	r0, r7
 80057ac:	f000 f80e 	bl	80057cc <__malloc_unlock>
 80057b0:	e797      	b.n	80056e2 <_malloc_r+0x22>
 80057b2:	6025      	str	r5, [r4, #0]
 80057b4:	e7dc      	b.n	8005770 <_malloc_r+0xb0>
 80057b6:	605b      	str	r3, [r3, #4]
 80057b8:	deff      	udf	#255	; 0xff
 80057ba:	bf00      	nop
 80057bc:	20000510 	.word	0x20000510

080057c0 <__malloc_lock>:
 80057c0:	4801      	ldr	r0, [pc, #4]	; (80057c8 <__malloc_lock+0x8>)
 80057c2:	f7ff bf0f 	b.w	80055e4 <__retarget_lock_acquire_recursive>
 80057c6:	bf00      	nop
 80057c8:	2000050c 	.word	0x2000050c

080057cc <__malloc_unlock>:
 80057cc:	4801      	ldr	r0, [pc, #4]	; (80057d4 <__malloc_unlock+0x8>)
 80057ce:	f7ff bf0a 	b.w	80055e6 <__retarget_lock_release_recursive>
 80057d2:	bf00      	nop
 80057d4:	2000050c 	.word	0x2000050c

080057d8 <__ssputs_r>:
 80057d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	688e      	ldr	r6, [r1, #8]
 80057de:	461f      	mov	r7, r3
 80057e0:	42be      	cmp	r6, r7
 80057e2:	680b      	ldr	r3, [r1, #0]
 80057e4:	4682      	mov	sl, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	4690      	mov	r8, r2
 80057ea:	d82c      	bhi.n	8005846 <__ssputs_r+0x6e>
 80057ec:	898a      	ldrh	r2, [r1, #12]
 80057ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057f2:	d026      	beq.n	8005842 <__ssputs_r+0x6a>
 80057f4:	6965      	ldr	r5, [r4, #20]
 80057f6:	6909      	ldr	r1, [r1, #16]
 80057f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057fc:	eba3 0901 	sub.w	r9, r3, r1
 8005800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005804:	1c7b      	adds	r3, r7, #1
 8005806:	444b      	add	r3, r9
 8005808:	106d      	asrs	r5, r5, #1
 800580a:	429d      	cmp	r5, r3
 800580c:	bf38      	it	cc
 800580e:	461d      	movcc	r5, r3
 8005810:	0553      	lsls	r3, r2, #21
 8005812:	d527      	bpl.n	8005864 <__ssputs_r+0x8c>
 8005814:	4629      	mov	r1, r5
 8005816:	f7ff ff53 	bl	80056c0 <_malloc_r>
 800581a:	4606      	mov	r6, r0
 800581c:	b360      	cbz	r0, 8005878 <__ssputs_r+0xa0>
 800581e:	6921      	ldr	r1, [r4, #16]
 8005820:	464a      	mov	r2, r9
 8005822:	f000 faeb 	bl	8005dfc <memcpy>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800582c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005830:	81a3      	strh	r3, [r4, #12]
 8005832:	6126      	str	r6, [r4, #16]
 8005834:	6165      	str	r5, [r4, #20]
 8005836:	444e      	add	r6, r9
 8005838:	eba5 0509 	sub.w	r5, r5, r9
 800583c:	6026      	str	r6, [r4, #0]
 800583e:	60a5      	str	r5, [r4, #8]
 8005840:	463e      	mov	r6, r7
 8005842:	42be      	cmp	r6, r7
 8005844:	d900      	bls.n	8005848 <__ssputs_r+0x70>
 8005846:	463e      	mov	r6, r7
 8005848:	6820      	ldr	r0, [r4, #0]
 800584a:	4632      	mov	r2, r6
 800584c:	4641      	mov	r1, r8
 800584e:	f000 faab 	bl	8005da8 <memmove>
 8005852:	68a3      	ldr	r3, [r4, #8]
 8005854:	1b9b      	subs	r3, r3, r6
 8005856:	60a3      	str	r3, [r4, #8]
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4433      	add	r3, r6
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	2000      	movs	r0, #0
 8005860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005864:	462a      	mov	r2, r5
 8005866:	f000 fad7 	bl	8005e18 <_realloc_r>
 800586a:	4606      	mov	r6, r0
 800586c:	2800      	cmp	r0, #0
 800586e:	d1e0      	bne.n	8005832 <__ssputs_r+0x5a>
 8005870:	6921      	ldr	r1, [r4, #16]
 8005872:	4650      	mov	r0, sl
 8005874:	f7ff feb8 	bl	80055e8 <_free_r>
 8005878:	230c      	movs	r3, #12
 800587a:	f8ca 3000 	str.w	r3, [sl]
 800587e:	89a3      	ldrh	r3, [r4, #12]
 8005880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	f04f 30ff 	mov.w	r0, #4294967295
 800588a:	e7e9      	b.n	8005860 <__ssputs_r+0x88>

0800588c <_svfiprintf_r>:
 800588c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005890:	4698      	mov	r8, r3
 8005892:	898b      	ldrh	r3, [r1, #12]
 8005894:	061b      	lsls	r3, r3, #24
 8005896:	b09d      	sub	sp, #116	; 0x74
 8005898:	4607      	mov	r7, r0
 800589a:	460d      	mov	r5, r1
 800589c:	4614      	mov	r4, r2
 800589e:	d50e      	bpl.n	80058be <_svfiprintf_r+0x32>
 80058a0:	690b      	ldr	r3, [r1, #16]
 80058a2:	b963      	cbnz	r3, 80058be <_svfiprintf_r+0x32>
 80058a4:	2140      	movs	r1, #64	; 0x40
 80058a6:	f7ff ff0b 	bl	80056c0 <_malloc_r>
 80058aa:	6028      	str	r0, [r5, #0]
 80058ac:	6128      	str	r0, [r5, #16]
 80058ae:	b920      	cbnz	r0, 80058ba <_svfiprintf_r+0x2e>
 80058b0:	230c      	movs	r3, #12
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e0d0      	b.n	8005a5c <_svfiprintf_r+0x1d0>
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	616b      	str	r3, [r5, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9309      	str	r3, [sp, #36]	; 0x24
 80058c2:	2320      	movs	r3, #32
 80058c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058cc:	2330      	movs	r3, #48	; 0x30
 80058ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a74 <_svfiprintf_r+0x1e8>
 80058d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058d6:	f04f 0901 	mov.w	r9, #1
 80058da:	4623      	mov	r3, r4
 80058dc:	469a      	mov	sl, r3
 80058de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058e2:	b10a      	cbz	r2, 80058e8 <_svfiprintf_r+0x5c>
 80058e4:	2a25      	cmp	r2, #37	; 0x25
 80058e6:	d1f9      	bne.n	80058dc <_svfiprintf_r+0x50>
 80058e8:	ebba 0b04 	subs.w	fp, sl, r4
 80058ec:	d00b      	beq.n	8005906 <_svfiprintf_r+0x7a>
 80058ee:	465b      	mov	r3, fp
 80058f0:	4622      	mov	r2, r4
 80058f2:	4629      	mov	r1, r5
 80058f4:	4638      	mov	r0, r7
 80058f6:	f7ff ff6f 	bl	80057d8 <__ssputs_r>
 80058fa:	3001      	adds	r0, #1
 80058fc:	f000 80a9 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005902:	445a      	add	r2, fp
 8005904:	9209      	str	r2, [sp, #36]	; 0x24
 8005906:	f89a 3000 	ldrb.w	r3, [sl]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 80a1 	beq.w	8005a52 <_svfiprintf_r+0x1c6>
 8005910:	2300      	movs	r3, #0
 8005912:	f04f 32ff 	mov.w	r2, #4294967295
 8005916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800591a:	f10a 0a01 	add.w	sl, sl, #1
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	9307      	str	r3, [sp, #28]
 8005922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005926:	931a      	str	r3, [sp, #104]	; 0x68
 8005928:	4654      	mov	r4, sl
 800592a:	2205      	movs	r2, #5
 800592c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005930:	4850      	ldr	r0, [pc, #320]	; (8005a74 <_svfiprintf_r+0x1e8>)
 8005932:	f7fa fc55 	bl	80001e0 <memchr>
 8005936:	9a04      	ldr	r2, [sp, #16]
 8005938:	b9d8      	cbnz	r0, 8005972 <_svfiprintf_r+0xe6>
 800593a:	06d0      	lsls	r0, r2, #27
 800593c:	bf44      	itt	mi
 800593e:	2320      	movmi	r3, #32
 8005940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005944:	0711      	lsls	r1, r2, #28
 8005946:	bf44      	itt	mi
 8005948:	232b      	movmi	r3, #43	; 0x2b
 800594a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800594e:	f89a 3000 	ldrb.w	r3, [sl]
 8005952:	2b2a      	cmp	r3, #42	; 0x2a
 8005954:	d015      	beq.n	8005982 <_svfiprintf_r+0xf6>
 8005956:	9a07      	ldr	r2, [sp, #28]
 8005958:	4654      	mov	r4, sl
 800595a:	2000      	movs	r0, #0
 800595c:	f04f 0c0a 	mov.w	ip, #10
 8005960:	4621      	mov	r1, r4
 8005962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005966:	3b30      	subs	r3, #48	; 0x30
 8005968:	2b09      	cmp	r3, #9
 800596a:	d94d      	bls.n	8005a08 <_svfiprintf_r+0x17c>
 800596c:	b1b0      	cbz	r0, 800599c <_svfiprintf_r+0x110>
 800596e:	9207      	str	r2, [sp, #28]
 8005970:	e014      	b.n	800599c <_svfiprintf_r+0x110>
 8005972:	eba0 0308 	sub.w	r3, r0, r8
 8005976:	fa09 f303 	lsl.w	r3, r9, r3
 800597a:	4313      	orrs	r3, r2
 800597c:	9304      	str	r3, [sp, #16]
 800597e:	46a2      	mov	sl, r4
 8005980:	e7d2      	b.n	8005928 <_svfiprintf_r+0x9c>
 8005982:	9b03      	ldr	r3, [sp, #12]
 8005984:	1d19      	adds	r1, r3, #4
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	9103      	str	r1, [sp, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	bfbb      	ittet	lt
 800598e:	425b      	neglt	r3, r3
 8005990:	f042 0202 	orrlt.w	r2, r2, #2
 8005994:	9307      	strge	r3, [sp, #28]
 8005996:	9307      	strlt	r3, [sp, #28]
 8005998:	bfb8      	it	lt
 800599a:	9204      	strlt	r2, [sp, #16]
 800599c:	7823      	ldrb	r3, [r4, #0]
 800599e:	2b2e      	cmp	r3, #46	; 0x2e
 80059a0:	d10c      	bne.n	80059bc <_svfiprintf_r+0x130>
 80059a2:	7863      	ldrb	r3, [r4, #1]
 80059a4:	2b2a      	cmp	r3, #42	; 0x2a
 80059a6:	d134      	bne.n	8005a12 <_svfiprintf_r+0x186>
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	1d1a      	adds	r2, r3, #4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	9203      	str	r2, [sp, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bfb8      	it	lt
 80059b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059b8:	3402      	adds	r4, #2
 80059ba:	9305      	str	r3, [sp, #20]
 80059bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a84 <_svfiprintf_r+0x1f8>
 80059c0:	7821      	ldrb	r1, [r4, #0]
 80059c2:	2203      	movs	r2, #3
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7fa fc0b 	bl	80001e0 <memchr>
 80059ca:	b138      	cbz	r0, 80059dc <_svfiprintf_r+0x150>
 80059cc:	9b04      	ldr	r3, [sp, #16]
 80059ce:	eba0 000a 	sub.w	r0, r0, sl
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	4082      	lsls	r2, r0
 80059d6:	4313      	orrs	r3, r2
 80059d8:	3401      	adds	r4, #1
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059e0:	4825      	ldr	r0, [pc, #148]	; (8005a78 <_svfiprintf_r+0x1ec>)
 80059e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059e6:	2206      	movs	r2, #6
 80059e8:	f7fa fbfa 	bl	80001e0 <memchr>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d038      	beq.n	8005a62 <_svfiprintf_r+0x1d6>
 80059f0:	4b22      	ldr	r3, [pc, #136]	; (8005a7c <_svfiprintf_r+0x1f0>)
 80059f2:	bb1b      	cbnz	r3, 8005a3c <_svfiprintf_r+0x1b0>
 80059f4:	9b03      	ldr	r3, [sp, #12]
 80059f6:	3307      	adds	r3, #7
 80059f8:	f023 0307 	bic.w	r3, r3, #7
 80059fc:	3308      	adds	r3, #8
 80059fe:	9303      	str	r3, [sp, #12]
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	4433      	add	r3, r6
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	e768      	b.n	80058da <_svfiprintf_r+0x4e>
 8005a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	2001      	movs	r0, #1
 8005a10:	e7a6      	b.n	8005960 <_svfiprintf_r+0xd4>
 8005a12:	2300      	movs	r3, #0
 8005a14:	3401      	adds	r4, #1
 8005a16:	9305      	str	r3, [sp, #20]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 0c0a 	mov.w	ip, #10
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a24:	3a30      	subs	r2, #48	; 0x30
 8005a26:	2a09      	cmp	r2, #9
 8005a28:	d903      	bls.n	8005a32 <_svfiprintf_r+0x1a6>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0c6      	beq.n	80059bc <_svfiprintf_r+0x130>
 8005a2e:	9105      	str	r1, [sp, #20]
 8005a30:	e7c4      	b.n	80059bc <_svfiprintf_r+0x130>
 8005a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a36:	4604      	mov	r4, r0
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e7f0      	b.n	8005a1e <_svfiprintf_r+0x192>
 8005a3c:	ab03      	add	r3, sp, #12
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	462a      	mov	r2, r5
 8005a42:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <_svfiprintf_r+0x1f4>)
 8005a44:	a904      	add	r1, sp, #16
 8005a46:	4638      	mov	r0, r7
 8005a48:	f3af 8000 	nop.w
 8005a4c:	1c42      	adds	r2, r0, #1
 8005a4e:	4606      	mov	r6, r0
 8005a50:	d1d6      	bne.n	8005a00 <_svfiprintf_r+0x174>
 8005a52:	89ab      	ldrh	r3, [r5, #12]
 8005a54:	065b      	lsls	r3, r3, #25
 8005a56:	f53f af2d 	bmi.w	80058b4 <_svfiprintf_r+0x28>
 8005a5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a5c:	b01d      	add	sp, #116	; 0x74
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	ab03      	add	r3, sp, #12
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	462a      	mov	r2, r5
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <_svfiprintf_r+0x1f4>)
 8005a6a:	a904      	add	r1, sp, #16
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f000 f879 	bl	8005b64 <_printf_i>
 8005a72:	e7eb      	b.n	8005a4c <_svfiprintf_r+0x1c0>
 8005a74:	08005fc9 	.word	0x08005fc9
 8005a78:	08005fd3 	.word	0x08005fd3
 8005a7c:	00000000 	.word	0x00000000
 8005a80:	080057d9 	.word	0x080057d9
 8005a84:	08005fcf 	.word	0x08005fcf

08005a88 <_printf_common>:
 8005a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	4616      	mov	r6, r2
 8005a8e:	4699      	mov	r9, r3
 8005a90:	688a      	ldr	r2, [r1, #8]
 8005a92:	690b      	ldr	r3, [r1, #16]
 8005a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	bfb8      	it	lt
 8005a9c:	4613      	movlt	r3, r2
 8005a9e:	6033      	str	r3, [r6, #0]
 8005aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005aa4:	4607      	mov	r7, r0
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	b10a      	cbz	r2, 8005aae <_printf_common+0x26>
 8005aaa:	3301      	adds	r3, #1
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	0699      	lsls	r1, r3, #26
 8005ab2:	bf42      	ittt	mi
 8005ab4:	6833      	ldrmi	r3, [r6, #0]
 8005ab6:	3302      	addmi	r3, #2
 8005ab8:	6033      	strmi	r3, [r6, #0]
 8005aba:	6825      	ldr	r5, [r4, #0]
 8005abc:	f015 0506 	ands.w	r5, r5, #6
 8005ac0:	d106      	bne.n	8005ad0 <_printf_common+0x48>
 8005ac2:	f104 0a19 	add.w	sl, r4, #25
 8005ac6:	68e3      	ldr	r3, [r4, #12]
 8005ac8:	6832      	ldr	r2, [r6, #0]
 8005aca:	1a9b      	subs	r3, r3, r2
 8005acc:	42ab      	cmp	r3, r5
 8005ace:	dc26      	bgt.n	8005b1e <_printf_common+0x96>
 8005ad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ad4:	1e13      	subs	r3, r2, #0
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	bf18      	it	ne
 8005ada:	2301      	movne	r3, #1
 8005adc:	0692      	lsls	r2, r2, #26
 8005ade:	d42b      	bmi.n	8005b38 <_printf_common+0xb0>
 8005ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	47c0      	blx	r8
 8005aea:	3001      	adds	r0, #1
 8005aec:	d01e      	beq.n	8005b2c <_printf_common+0xa4>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	6922      	ldr	r2, [r4, #16]
 8005af2:	f003 0306 	and.w	r3, r3, #6
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	bf02      	ittt	eq
 8005afa:	68e5      	ldreq	r5, [r4, #12]
 8005afc:	6833      	ldreq	r3, [r6, #0]
 8005afe:	1aed      	subeq	r5, r5, r3
 8005b00:	68a3      	ldr	r3, [r4, #8]
 8005b02:	bf0c      	ite	eq
 8005b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b08:	2500      	movne	r5, #0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	bfc4      	itt	gt
 8005b0e:	1a9b      	subgt	r3, r3, r2
 8005b10:	18ed      	addgt	r5, r5, r3
 8005b12:	2600      	movs	r6, #0
 8005b14:	341a      	adds	r4, #26
 8005b16:	42b5      	cmp	r5, r6
 8005b18:	d11a      	bne.n	8005b50 <_printf_common+0xc8>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e008      	b.n	8005b30 <_printf_common+0xa8>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	4652      	mov	r2, sl
 8005b22:	4649      	mov	r1, r9
 8005b24:	4638      	mov	r0, r7
 8005b26:	47c0      	blx	r8
 8005b28:	3001      	adds	r0, #1
 8005b2a:	d103      	bne.n	8005b34 <_printf_common+0xac>
 8005b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b34:	3501      	adds	r5, #1
 8005b36:	e7c6      	b.n	8005ac6 <_printf_common+0x3e>
 8005b38:	18e1      	adds	r1, r4, r3
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	2030      	movs	r0, #48	; 0x30
 8005b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b42:	4422      	add	r2, r4
 8005b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b4c:	3302      	adds	r3, #2
 8005b4e:	e7c7      	b.n	8005ae0 <_printf_common+0x58>
 8005b50:	2301      	movs	r3, #1
 8005b52:	4622      	mov	r2, r4
 8005b54:	4649      	mov	r1, r9
 8005b56:	4638      	mov	r0, r7
 8005b58:	47c0      	blx	r8
 8005b5a:	3001      	adds	r0, #1
 8005b5c:	d0e6      	beq.n	8005b2c <_printf_common+0xa4>
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7d9      	b.n	8005b16 <_printf_common+0x8e>
	...

08005b64 <_printf_i>:
 8005b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	7e0f      	ldrb	r7, [r1, #24]
 8005b6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b6c:	2f78      	cmp	r7, #120	; 0x78
 8005b6e:	4691      	mov	r9, r2
 8005b70:	4680      	mov	r8, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	469a      	mov	sl, r3
 8005b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b7a:	d807      	bhi.n	8005b8c <_printf_i+0x28>
 8005b7c:	2f62      	cmp	r7, #98	; 0x62
 8005b7e:	d80a      	bhi.n	8005b96 <_printf_i+0x32>
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	f000 80d4 	beq.w	8005d2e <_printf_i+0x1ca>
 8005b86:	2f58      	cmp	r7, #88	; 0x58
 8005b88:	f000 80c0 	beq.w	8005d0c <_printf_i+0x1a8>
 8005b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b94:	e03a      	b.n	8005c0c <_printf_i+0xa8>
 8005b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b9a:	2b15      	cmp	r3, #21
 8005b9c:	d8f6      	bhi.n	8005b8c <_printf_i+0x28>
 8005b9e:	a101      	add	r1, pc, #4	; (adr r1, 8005ba4 <_printf_i+0x40>)
 8005ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ba4:	08005bfd 	.word	0x08005bfd
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005b8d 	.word	0x08005b8d
 8005bb0:	08005b8d 	.word	0x08005b8d
 8005bb4:	08005b8d 	.word	0x08005b8d
 8005bb8:	08005b8d 	.word	0x08005b8d
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005b8d 	.word	0x08005b8d
 8005bc4:	08005b8d 	.word	0x08005b8d
 8005bc8:	08005b8d 	.word	0x08005b8d
 8005bcc:	08005b8d 	.word	0x08005b8d
 8005bd0:	08005d15 	.word	0x08005d15
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005ccf 	.word	0x08005ccf
 8005bdc:	08005b8d 	.word	0x08005b8d
 8005be0:	08005b8d 	.word	0x08005b8d
 8005be4:	08005d37 	.word	0x08005d37
 8005be8:	08005b8d 	.word	0x08005b8d
 8005bec:	08005c3d 	.word	0x08005c3d
 8005bf0:	08005b8d 	.word	0x08005b8d
 8005bf4:	08005b8d 	.word	0x08005b8d
 8005bf8:	08005cd7 	.word	0x08005cd7
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	602a      	str	r2, [r5, #0]
 8005c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e09f      	b.n	8005d50 <_printf_i+0x1ec>
 8005c10:	6820      	ldr	r0, [r4, #0]
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	0607      	lsls	r7, r0, #24
 8005c16:	f103 0104 	add.w	r1, r3, #4
 8005c1a:	6029      	str	r1, [r5, #0]
 8005c1c:	d501      	bpl.n	8005c22 <_printf_i+0xbe>
 8005c1e:	681e      	ldr	r6, [r3, #0]
 8005c20:	e003      	b.n	8005c2a <_printf_i+0xc6>
 8005c22:	0646      	lsls	r6, r0, #25
 8005c24:	d5fb      	bpl.n	8005c1e <_printf_i+0xba>
 8005c26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c2a:	2e00      	cmp	r6, #0
 8005c2c:	da03      	bge.n	8005c36 <_printf_i+0xd2>
 8005c2e:	232d      	movs	r3, #45	; 0x2d
 8005c30:	4276      	negs	r6, r6
 8005c32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c36:	485a      	ldr	r0, [pc, #360]	; (8005da0 <_printf_i+0x23c>)
 8005c38:	230a      	movs	r3, #10
 8005c3a:	e012      	b.n	8005c62 <_printf_i+0xfe>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	6820      	ldr	r0, [r4, #0]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	6029      	str	r1, [r5, #0]
 8005c44:	0605      	lsls	r5, r0, #24
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0xe8>
 8005c48:	681e      	ldr	r6, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0xee>
 8005c4c:	0641      	lsls	r1, r0, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0xe4>
 8005c50:	881e      	ldrh	r6, [r3, #0]
 8005c52:	4853      	ldr	r0, [pc, #332]	; (8005da0 <_printf_i+0x23c>)
 8005c54:	2f6f      	cmp	r7, #111	; 0x6f
 8005c56:	bf0c      	ite	eq
 8005c58:	2308      	moveq	r3, #8
 8005c5a:	230a      	movne	r3, #10
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c62:	6865      	ldr	r5, [r4, #4]
 8005c64:	60a5      	str	r5, [r4, #8]
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	bfa2      	ittt	ge
 8005c6a:	6821      	ldrge	r1, [r4, #0]
 8005c6c:	f021 0104 	bicge.w	r1, r1, #4
 8005c70:	6021      	strge	r1, [r4, #0]
 8005c72:	b90e      	cbnz	r6, 8005c78 <_printf_i+0x114>
 8005c74:	2d00      	cmp	r5, #0
 8005c76:	d04b      	beq.n	8005d10 <_printf_i+0x1ac>
 8005c78:	4615      	mov	r5, r2
 8005c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c82:	5dc7      	ldrb	r7, [r0, r7]
 8005c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c88:	4637      	mov	r7, r6
 8005c8a:	42bb      	cmp	r3, r7
 8005c8c:	460e      	mov	r6, r1
 8005c8e:	d9f4      	bls.n	8005c7a <_printf_i+0x116>
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d10b      	bne.n	8005cac <_printf_i+0x148>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	07de      	lsls	r6, r3, #31
 8005c98:	d508      	bpl.n	8005cac <_printf_i+0x148>
 8005c9a:	6923      	ldr	r3, [r4, #16]
 8005c9c:	6861      	ldr	r1, [r4, #4]
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	bfde      	ittt	le
 8005ca2:	2330      	movle	r3, #48	; 0x30
 8005ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005cac:	1b52      	subs	r2, r2, r5
 8005cae:	6122      	str	r2, [r4, #16]
 8005cb0:	f8cd a000 	str.w	sl, [sp]
 8005cb4:	464b      	mov	r3, r9
 8005cb6:	aa03      	add	r2, sp, #12
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7ff fee4 	bl	8005a88 <_printf_common>
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d14a      	bne.n	8005d5a <_printf_i+0x1f6>
 8005cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc8:	b004      	add	sp, #16
 8005cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f043 0320 	orr.w	r3, r3, #32
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	4833      	ldr	r0, [pc, #204]	; (8005da4 <_printf_i+0x240>)
 8005cd8:	2778      	movs	r7, #120	; 0x78
 8005cda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	6829      	ldr	r1, [r5, #0]
 8005ce2:	061f      	lsls	r7, r3, #24
 8005ce4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ce8:	d402      	bmi.n	8005cf0 <_printf_i+0x18c>
 8005cea:	065f      	lsls	r7, r3, #25
 8005cec:	bf48      	it	mi
 8005cee:	b2b6      	uxthmi	r6, r6
 8005cf0:	07df      	lsls	r7, r3, #31
 8005cf2:	bf48      	it	mi
 8005cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8005cf8:	6029      	str	r1, [r5, #0]
 8005cfa:	bf48      	it	mi
 8005cfc:	6023      	strmi	r3, [r4, #0]
 8005cfe:	b91e      	cbnz	r6, 8005d08 <_printf_i+0x1a4>
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	f023 0320 	bic.w	r3, r3, #32
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	2310      	movs	r3, #16
 8005d0a:	e7a7      	b.n	8005c5c <_printf_i+0xf8>
 8005d0c:	4824      	ldr	r0, [pc, #144]	; (8005da0 <_printf_i+0x23c>)
 8005d0e:	e7e4      	b.n	8005cda <_printf_i+0x176>
 8005d10:	4615      	mov	r5, r2
 8005d12:	e7bd      	b.n	8005c90 <_printf_i+0x12c>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	6826      	ldr	r6, [r4, #0]
 8005d18:	6961      	ldr	r1, [r4, #20]
 8005d1a:	1d18      	adds	r0, r3, #4
 8005d1c:	6028      	str	r0, [r5, #0]
 8005d1e:	0635      	lsls	r5, r6, #24
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	d501      	bpl.n	8005d28 <_printf_i+0x1c4>
 8005d24:	6019      	str	r1, [r3, #0]
 8005d26:	e002      	b.n	8005d2e <_printf_i+0x1ca>
 8005d28:	0670      	lsls	r0, r6, #25
 8005d2a:	d5fb      	bpl.n	8005d24 <_printf_i+0x1c0>
 8005d2c:	8019      	strh	r1, [r3, #0]
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	4615      	mov	r5, r2
 8005d34:	e7bc      	b.n	8005cb0 <_printf_i+0x14c>
 8005d36:	682b      	ldr	r3, [r5, #0]
 8005d38:	1d1a      	adds	r2, r3, #4
 8005d3a:	602a      	str	r2, [r5, #0]
 8005d3c:	681d      	ldr	r5, [r3, #0]
 8005d3e:	6862      	ldr	r2, [r4, #4]
 8005d40:	2100      	movs	r1, #0
 8005d42:	4628      	mov	r0, r5
 8005d44:	f7fa fa4c 	bl	80001e0 <memchr>
 8005d48:	b108      	cbz	r0, 8005d4e <_printf_i+0x1ea>
 8005d4a:	1b40      	subs	r0, r0, r5
 8005d4c:	6060      	str	r0, [r4, #4]
 8005d4e:	6863      	ldr	r3, [r4, #4]
 8005d50:	6123      	str	r3, [r4, #16]
 8005d52:	2300      	movs	r3, #0
 8005d54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d58:	e7aa      	b.n	8005cb0 <_printf_i+0x14c>
 8005d5a:	6923      	ldr	r3, [r4, #16]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4649      	mov	r1, r9
 8005d60:	4640      	mov	r0, r8
 8005d62:	47d0      	blx	sl
 8005d64:	3001      	adds	r0, #1
 8005d66:	d0ad      	beq.n	8005cc4 <_printf_i+0x160>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	079b      	lsls	r3, r3, #30
 8005d6c:	d413      	bmi.n	8005d96 <_printf_i+0x232>
 8005d6e:	68e0      	ldr	r0, [r4, #12]
 8005d70:	9b03      	ldr	r3, [sp, #12]
 8005d72:	4298      	cmp	r0, r3
 8005d74:	bfb8      	it	lt
 8005d76:	4618      	movlt	r0, r3
 8005d78:	e7a6      	b.n	8005cc8 <_printf_i+0x164>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4632      	mov	r2, r6
 8005d7e:	4649      	mov	r1, r9
 8005d80:	4640      	mov	r0, r8
 8005d82:	47d0      	blx	sl
 8005d84:	3001      	adds	r0, #1
 8005d86:	d09d      	beq.n	8005cc4 <_printf_i+0x160>
 8005d88:	3501      	adds	r5, #1
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	9903      	ldr	r1, [sp, #12]
 8005d8e:	1a5b      	subs	r3, r3, r1
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dcf2      	bgt.n	8005d7a <_printf_i+0x216>
 8005d94:	e7eb      	b.n	8005d6e <_printf_i+0x20a>
 8005d96:	2500      	movs	r5, #0
 8005d98:	f104 0619 	add.w	r6, r4, #25
 8005d9c:	e7f5      	b.n	8005d8a <_printf_i+0x226>
 8005d9e:	bf00      	nop
 8005da0:	08005fda 	.word	0x08005fda
 8005da4:	08005feb 	.word	0x08005feb

08005da8 <memmove>:
 8005da8:	4288      	cmp	r0, r1
 8005daa:	b510      	push	{r4, lr}
 8005dac:	eb01 0402 	add.w	r4, r1, r2
 8005db0:	d902      	bls.n	8005db8 <memmove+0x10>
 8005db2:	4284      	cmp	r4, r0
 8005db4:	4623      	mov	r3, r4
 8005db6:	d807      	bhi.n	8005dc8 <memmove+0x20>
 8005db8:	1e43      	subs	r3, r0, #1
 8005dba:	42a1      	cmp	r1, r4
 8005dbc:	d008      	beq.n	8005dd0 <memmove+0x28>
 8005dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dc6:	e7f8      	b.n	8005dba <memmove+0x12>
 8005dc8:	4402      	add	r2, r0
 8005dca:	4601      	mov	r1, r0
 8005dcc:	428a      	cmp	r2, r1
 8005dce:	d100      	bne.n	8005dd2 <memmove+0x2a>
 8005dd0:	bd10      	pop	{r4, pc}
 8005dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dda:	e7f7      	b.n	8005dcc <memmove+0x24>

08005ddc <_sbrk_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_sbrk_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fb fcb4 	bl	8001754 <_sbrk>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_sbrk_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_sbrk_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	20000508 	.word	0x20000508

08005dfc <memcpy>:
 8005dfc:	440a      	add	r2, r1
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e04:	d100      	bne.n	8005e08 <memcpy+0xc>
 8005e06:	4770      	bx	lr
 8005e08:	b510      	push	{r4, lr}
 8005e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e12:	4291      	cmp	r1, r2
 8005e14:	d1f9      	bne.n	8005e0a <memcpy+0xe>
 8005e16:	bd10      	pop	{r4, pc}

08005e18 <_realloc_r>:
 8005e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1c:	4680      	mov	r8, r0
 8005e1e:	4614      	mov	r4, r2
 8005e20:	460e      	mov	r6, r1
 8005e22:	b921      	cbnz	r1, 8005e2e <_realloc_r+0x16>
 8005e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e28:	4611      	mov	r1, r2
 8005e2a:	f7ff bc49 	b.w	80056c0 <_malloc_r>
 8005e2e:	b92a      	cbnz	r2, 8005e3c <_realloc_r+0x24>
 8005e30:	f7ff fbda 	bl	80055e8 <_free_r>
 8005e34:	4625      	mov	r5, r4
 8005e36:	4628      	mov	r0, r5
 8005e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e3c:	f000 f81b 	bl	8005e76 <_malloc_usable_size_r>
 8005e40:	4284      	cmp	r4, r0
 8005e42:	4607      	mov	r7, r0
 8005e44:	d802      	bhi.n	8005e4c <_realloc_r+0x34>
 8005e46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e4a:	d812      	bhi.n	8005e72 <_realloc_r+0x5a>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f7ff fc36 	bl	80056c0 <_malloc_r>
 8005e54:	4605      	mov	r5, r0
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d0ed      	beq.n	8005e36 <_realloc_r+0x1e>
 8005e5a:	42bc      	cmp	r4, r7
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4631      	mov	r1, r6
 8005e60:	bf28      	it	cs
 8005e62:	463a      	movcs	r2, r7
 8005e64:	f7ff ffca 	bl	8005dfc <memcpy>
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4640      	mov	r0, r8
 8005e6c:	f7ff fbbc 	bl	80055e8 <_free_r>
 8005e70:	e7e1      	b.n	8005e36 <_realloc_r+0x1e>
 8005e72:	4635      	mov	r5, r6
 8005e74:	e7df      	b.n	8005e36 <_realloc_r+0x1e>

08005e76 <_malloc_usable_size_r>:
 8005e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e7a:	1f18      	subs	r0, r3, #4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	bfbc      	itt	lt
 8005e80:	580b      	ldrlt	r3, [r1, r0]
 8005e82:	18c0      	addlt	r0, r0, r3
 8005e84:	4770      	bx	lr
	...

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
